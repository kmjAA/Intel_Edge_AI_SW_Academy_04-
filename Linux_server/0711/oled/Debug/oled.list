
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013524  080072b8  080072b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7dc  0801a7dc  0001c060  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7dc  0801a7dc  0001b7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7e4  0801a7e4  0001c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a7e4  0801a7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a7e8  0801a7e8  0001b7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801a7ec  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004748  20000060  0801a84c  0001c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047a8  0801a84c  0001c7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a153  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425f  00000000  00000000  000561e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a38  00000000  00000000  0005a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b34  00000000  00000000  0005de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019941  00000000  00000000  000609b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022537  00000000  00000000  0007a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9c41  00000000  00000000  0009c82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0014646d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010448  00000000  00000000  00146520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00156968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003194  00000000  00000000  001569c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  00159b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072a0 	.word	0x080072a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080072a0 	.word	0x080072a0

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <HAL_TIM_PeriodElapsedCallback>:
#define SamplingRate 40000
uint16_t adValue[SamplesFft];
float32_t input[SamplesFft];
float32_t output[SamplesFft];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *hTim) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if (doConvert > 0)
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <HAL_TIM_PeriodElapsedCallback+0x1a>
		doConvert--;
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	f5ad 5d09 	sub.w	sp, sp, #8768	@ 0x2240
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f002 fad3 	bl	8002c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f9fb 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 fb55 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000672:	f000 fb33 	bl	8000cdc <MX_DMA_Init>
  MX_SPI1_Init();
 8000676:	f000 faaf 	bl	8000bd8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800067a:	f000 fa5b 	bl	8000b34 <MX_ADC1_Init>
  MX_TIM2_Init();
 800067e:	f000 fae1 	bl	8000c44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	uint16_t adcValue[SamplesFft];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcValue, SamplesFft);
 8000682:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000686:	f103 0310 	add.w	r3, r3, #16
 800068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068e:	4619      	mov	r1, r3
 8000690:	48b1      	ldr	r0, [pc, #708]	@ (8000958 <main+0x2fc>)
 8000692:	f002 fb97 	bl	8002dc4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000696:	48b1      	ldr	r0, [pc, #708]	@ (800095c <main+0x300>)
 8000698:	f004 fc8e 	bl	8004fb8 <HAL_TIM_Base_Start_IT>
	//setup ssd1306
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800069c:	4bb0      	ldr	r3, [pc, #704]	@ (8000960 <main+0x304>)
 800069e:	4ab1      	ldr	r2, [pc, #708]	@ (8000964 <main+0x308>)
 80006a0:	49b1      	ldr	r1, [pc, #708]	@ (8000968 <main+0x30c>)
 80006a2:	48b2      	ldr	r0, [pc, #712]	@ (800096c <main+0x310>)
 80006a4:	f000 fe7c 	bl	80013a0 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);
	//init ssd1306
	u8g2_InitDisplay(&u8g2);
 80006a8:	48b0      	ldr	r0, [pc, #704]	@ (800096c <main+0x310>)
 80006aa:	f002 f9e9 	bl	8002a80 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80006ae:	2100      	movs	r1, #0
 80006b0:	48ae      	ldr	r0, [pc, #696]	@ (800096c <main+0x310>)
 80006b2:	f002 f9f4 	bl	8002a9e <u8x8_SetPowerSave>
//
  u8g2_ClearBuffer(&u8g2);
 80006b6:	48ad      	ldr	r0, [pc, #692]	@ (800096c <main+0x310>)
 80006b8:	f000 fde0 	bl	800127c <u8g2_ClearBuffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	u8g2_SetDrawColor(&u8g2, 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	48ab      	ldr	r0, [pc, #684]	@ (800096c <main+0x310>)
 80006c0:	f001 fc25 	bl	8001f0e <u8g2_SetDrawColor>
	//initialize FFT
	arm_rfft_fast_instance_f32 fftInstance;
	arm_rfft_fast_init_f32(&fftInstance, SamplesFft);
 80006c4:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80006c8:	f103 0310 	add.w	r3, r3, #16
 80006cc:	3b18      	subs	r3, #24
 80006ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f85a 	bl	800578c <arm_rfft_fast_init_f32>
	while (1) {
			if (doConvert==0){
 80006d8:	4ba5      	ldr	r3, [pc, #660]	@ (8000970 <main+0x314>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1fb      	bne.n	80006d8 <main+0x7c>
			doConvert = SamplesFft;
 80006e0:	4ba3      	ldr	r3, [pc, #652]	@ (8000970 <main+0x314>)
 80006e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006e6:	601a      	str	r2, [r3, #0]
			//date move
			for(int i=0; i<SamplesFft; i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 80006ee:	f102 020c 	add.w	r2, r2, #12
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e026      	b.n	8000744 <main+0xe8>
				input[i] =(float32_t)adcValue[i];
 80006f6:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80006fa:	f103 0310 	add.w	r3, r3, #16
 80006fe:	461a      	mov	r2, r3
 8000700:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000704:	f103 030c 	add.w	r3, r3, #12
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071a:	4a96      	ldr	r2, [pc, #600]	@ (8000974 <main+0x318>)
 800071c:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000720:	f103 030c 	add.w	r3, r3, #12
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<SamplesFft; i++){
 800072e:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000732:	f103 030c 	add.w	r3, r3, #12
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 800073e:	f102 020c 	add.w	r2, r2, #12
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000748:	f103 030c 	add.w	r3, r3, #12
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000752:	dbd0      	blt.n	80006f6 <main+0x9a>
			}
			//cal fft
			arm_rfft_fast_f32(&fftInstance,input,output,0);
 8000754:	f507 5091 	add.w	r0, r7, #4640	@ 0x1220
 8000758:	f100 0010 	add.w	r0, r0, #16
 800075c:	3818      	subs	r0, #24
 800075e:	2300      	movs	r3, #0
 8000760:	4a85      	ldr	r2, [pc, #532]	@ (8000978 <main+0x31c>)
 8000762:	4984      	ldr	r1, [pc, #528]	@ (8000974 <main+0x318>)
 8000764:	f005 f894 	bl	8005890 <arm_rfft_fast_f32>
			//search frequency
			float32_t magnitude[SamplesFft /2];
			arm_cmplx_mag_f32(output, magnitude, SamplesFft/2);
 8000768:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800076c:	3b0c      	subs	r3, #12
 800076e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000772:	4619      	mov	r1, r3
 8000774:	4880      	ldr	r0, [pc, #512]	@ (8000978 <main+0x31c>)
 8000776:	f005 fcf7 	bl	8006168 <arm_cmplx_mag_f32>

			uint32_t maxIndex = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000780:	f102 0208 	add.w	r2, r2, #8
 8000784:	6013      	str	r3, [r2, #0]
			float32_t maxValue = 0;
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 800078e:	f102 0204 	add.w	r2, r2, #4
 8000792:	6013      	str	r3, [r2, #0]
			for (int i =1; i<SamplesFft/2; i++){
 8000794:	2301      	movs	r3, #1
 8000796:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	e033      	b.n	8000806 <main+0x1aa>
				if(magnitude[i]>maxValue){
 800079e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80007a2:	461a      	mov	r2, r3
 80007a4:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3b4c      	subs	r3, #76	@ 0x4c
 80007b0:	edd3 7a00 	vldr	s15, [r3]
 80007b4:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80007b8:	f103 0304 	add.w	r3, r3, #4
 80007bc:	ed93 7a00 	vldr	s14, [r3]
 80007c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c8:	d516      	bpl.n	80007f8 <main+0x19c>
					maxValue = magnitude[i];
 80007ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80007ce:	461a      	mov	r2, r3
 80007d0:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	3b4c      	subs	r3, #76	@ 0x4c
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 80007e2:	f102 0204 	add.w	r2, r2, #4
 80007e6:	6013      	str	r3, [r2, #0]
					maxIndex = i;
 80007e8:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 80007f2:	f102 0208 	add.w	r2, r2, #8
 80007f6:	6013      	str	r3, [r2, #0]
			for (int i =1; i<SamplesFft/2; i++){
 80007f8:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000810:	dbc5      	blt.n	800079e <main+0x142>
				}
			}

			float frequency = maxIndex *((float)SamplingRate/(float)SamplesFft);
 8000812:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000816:	f103 0308 	add.w	r3, r3, #8
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000824:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800097c <main+0x320>
 8000828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800082c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000830:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000834:	edc3 7a00 	vstr	s15, [r3]
			//align data
			uint32_t showData[128] = {0, };
 8000838:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800083c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000840:	4618      	mov	r0, r3
 8000842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000846:	461a      	mov	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f006 f887 	bl	800695c <memset>
			for(int i =0; i<128; i++){
 800084e:	2300      	movs	r3, #0
 8000850:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000854:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e06b      	b.n	8000934 <main+0x2d8>
				for(int j =0; j<8; j++){
 800085c:	2300      	movs	r3, #0
 800085e:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000862:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	e03b      	b.n	80008e2 <main+0x286>
					showData[i] += output[i*8+j];
 800086a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800086e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000872:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000876:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000888:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800088c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	00da      	lsls	r2, r3, #3
 8000894:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000898:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a35      	ldr	r2, [pc, #212]	@ (8000978 <main+0x31c>)
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	edd3 7a00 	vldr	s15, [r3]
 80008aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b2:	ee17 1a90 	vmov	r1, s15
 80008b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008be:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80008c2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j =0; j<8; j++){
 80008cc:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80008d0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80008dc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80008e6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b07      	cmp	r3, #7
 80008ee:	ddbc      	ble.n	800086a <main+0x20e>
				}
				showData[i] /= 64;
 80008f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008f8:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80008fc:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000906:	0999      	lsrs	r1, r3, #6
 8000908:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800090c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000910:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000914:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i =0; i<128; i++){
 800091e:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000922:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800092e:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000938:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000940:	dd8c      	ble.n	800085c <main+0x200>
			}
			//show display
			u8g2_ClearBuffer(&u8g2);
 8000942:	480a      	ldr	r0, [pc, #40]	@ (800096c <main+0x310>)
 8000944:	f000 fc9a 	bl	800127c <u8g2_ClearBuffer>
			for (int x = 2; x < 128; x++) {
 8000948:	2302      	movs	r3, #2
 800094a:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800094e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e059      	b.n	8000a0a <main+0x3ae>
 8000956:	bf00      	nop
 8000958:	2000007c 	.word	0x2000007c
 800095c:	2000017c 	.word	0x2000017c
 8000960:	080010c5 	.word	0x080010c5
 8000964:	080011b9 	.word	0x080011b9
 8000968:	080072cc 	.word	0x080072cc
 800096c:	200001c4 	.word	0x200001c4
 8000970:	20000000 	.word	0x20000000
 8000974:	20000258 	.word	0x20000258
 8000978:	20002258 	.word	0x20002258
 800097c:	419c4000 	.word	0x419c4000
				if(showData[x] > 63) showData[x] = 63;
 8000980:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000984:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000988:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800098c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000996:	2b3f      	cmp	r3, #63	@ 0x3f
 8000998:	d90b      	bls.n	80009b2 <main+0x356>
 800099a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800099e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80009a2:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80009a6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	213f      	movs	r1, #63	@ 0x3f
 80009ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				u8g2_DrawLine(&u8g2, x,63,x, 64-showData[x]);
 80009b2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80009b6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b299      	uxth	r1, r3
 80009be:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80009c2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	b298      	uxth	r0, r3
 80009ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80009ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80009d2:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80009d6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	4603      	mov	r3, r0
 80009ec:	223f      	movs	r2, #63	@ 0x3f
 80009ee:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <main+0x400>)
 80009f0:	f001 fb02 	bl	8001ff8 <u8g2_DrawLine>
			for (int x = 2; x < 128; x++) {
 80009f4:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80009f8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000a04:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000a0e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a16:	ddb3      	ble.n	8000980 <main+0x324>
			}
			char str[20];
			sprintf(str, "%5d", (int)frequency);
 8000a18:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000a1c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000a20:	edd3 7a00 	vldr	s15, [r3]
 8000a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a28:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000a2c:	f103 0310 	add.w	r3, r3, #16
 8000a30:	3b0c      	subs	r3, #12
 8000a32:	ee17 2a90 	vmov	r2, s15
 8000a36:	490a      	ldr	r1, [pc, #40]	@ (8000a60 <main+0x404>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 ff6f 	bl	800691c <siprintf>
			u8g2_DrawStr(&u8g2,70,10,str);
 8000a3e:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000a42:	f103 0310 	add.w	r3, r3, #16
 8000a46:	3b0c      	subs	r3, #12
 8000a48:	220a      	movs	r2, #10
 8000a4a:	2146      	movs	r1, #70	@ 0x46
 8000a4c:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <main+0x400>)
 8000a4e:	f001 f8fb 	bl	8001c48 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8000a52:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <main+0x400>)
 8000a54:	f000 fc85 	bl	8001362 <u8g2_SendBuffer>
			if (doConvert==0){
 8000a58:	e63e      	b.n	80006d8 <main+0x7c>
 8000a5a:	bf00      	nop
 8000a5c:	200001c4 	.word	0x200001c4
 8000a60:	080072b8 	.word	0x080072b8

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2230      	movs	r2, #48	@ 0x30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 ff72 	bl	800695c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <SystemClock_Config+0xc8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a26      	ldr	r2, [pc, #152]	@ (8000b2c <SystemClock_Config+0xc8>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <SystemClock_Config+0xc8>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ad8:	2364      	movs	r3, #100	@ 0x64
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fb49 	bl	8004180 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af4:	f000 f946 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2103      	movs	r1, #3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fdab 	bl	8004670 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b20:	f000 f930 	bl	8000d84 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	@ 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b46:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b48:	4a22      	ldr	r2, [pc, #136]	@ (8000bd4 <MX_ADC1_Init+0xa0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b78:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000b9a:	f002 f8cf 	bl	8002d3c <HAL_ADC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ba4:	f000 f8ee 	bl	8000d84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_ADC1_Init+0x9c>)
 8000bba:	f002 fa11 	bl	8002fe0 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bc4:	f000 f8de 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000007c 	.word	0x2000007c
 8000bd4:	40012000 	.word	0x40012000

08000bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000bde:	4a18      	ldr	r2, [pc, #96]	@ (8000c40 <MX_SPI1_Init+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c0c:	2218      	movs	r2, #24
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_SPI1_Init+0x64>)
 8000c2a:	f003 fecd 	bl	80049c8 <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c34:	f000 f8a6 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000124 	.word	0x20000124
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c6a:	2263      	movs	r2, #99	@ 0x63
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25-1;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c76:	2218      	movs	r2, #24
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c86:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000c88:	f004 f946 	bl	8004f18 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 f877 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000ca4:	f004 fada 	bl	800525c <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f869 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <MX_TIM2_Init+0x94>)
 8000cc0:	f004 fce2 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000cca:	f000 f85b 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000017c 	.word	0x2000017c

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <MX_DMA_Init+0x3c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <MX_DMA_Init+0x3c>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_DMA_Init+0x3c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2038      	movs	r0, #56	@ 0x38
 8000d04:	f002 fcf7 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d08:	2038      	movs	r0, #56	@ 0x38
 8000d0a:	f002 fd10 	bl	800372e <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_GPIO_Init+0x60>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <MX_GPIO_Init+0x60>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_GPIO_Init+0x60>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000d52:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <MX_GPIO_Init+0x64>)
 8000d54:	f003 f9fa 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin;
 8000d58:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <MX_GPIO_Init+0x64>)
 8000d70:	f003 f868 	bl	8003e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8000ebc <HAL_ADC_MspInit+0xdc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d157      	bne.n	8000eb2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <HAL_ADC_MspInit+0xe0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <HAL_ADC_MspInit+0xe4>)
 8000e4e:	f002 fff9 	bl	8003e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_ADC_MspInit+0xec>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e96:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000e98:	f002 fc64 	bl	8003764 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ea2:	f7ff ff6f 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_ADC_MspInit+0xe8>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	40026410 	.word	0x40026410

08000ed0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_D0_Pin|OLED_D1_Pin;
 8000f2a:	23a0      	movs	r3, #160	@ 0xa0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f46:	f002 ff7d 	bl	8003e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f70:	d115      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	201c      	movs	r0, #28
 8000f94:	f002 fbaf 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f002 fbc8 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f001 fe57 	bl	8002cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <TIM2_IRQHandler+0x10>)
 8001012:	f004 f833 	bl	800507c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000017c 	.word	0x2000017c

08001020 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <DMA2_Stream0_IRQHandler+0x10>)
 8001026:	f002 fca3 	bl	8003970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000c4 	.word	0x200000c4

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f005 fc82 	bl	800696c <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20020000 	.word	0x20020000
 8001094:	00000400 	.word	0x00000400
 8001098:	20004258 	.word	0x20004258
 800109c:	200047a8 	.word	0x200047a8

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi1;
//extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	72fb      	strb	r3, [r7, #11]
 80010d2:	4613      	mov	r3, r2
 80010d4:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3b28      	subs	r3, #40	@ 0x28
 80010da:	2b23      	cmp	r3, #35	@ 0x23
 80010dc:	d865      	bhi.n	80011aa <u8x8_stm32_gpio_and_delay+0xe6>
 80010de:	a201      	add	r2, pc, #4	@ (adr r2, 80010e4 <u8x8_stm32_gpio_and_delay+0x20>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080011ab 	.word	0x080011ab
 80010e8:	08001175 	.word	0x08001175
 80010ec:	080011ab 	.word	0x080011ab
 80010f0:	080011ab 	.word	0x080011ab
 80010f4:	080011ab 	.word	0x080011ab
 80010f8:	080011ab 	.word	0x080011ab
 80010fc:	080011ab 	.word	0x080011ab
 8001100:	080011ab 	.word	0x080011ab
 8001104:	080011ab 	.word	0x080011ab
 8001108:	080011ab 	.word	0x080011ab
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	080011ab 	.word	0x080011ab
 8001144:	080011ab 	.word	0x080011ab
 8001148:	080011ab 	.word	0x080011ab
 800114c:	080011ab 	.word	0x080011ab
 8001150:	080011ab 	.word	0x080011ab
 8001154:	080011ab 	.word	0x080011ab
 8001158:	080011ab 	.word	0x080011ab
 800115c:	080011ab 	.word	0x080011ab
 8001160:	080011ab 	.word	0x080011ab
 8001164:	080011ab 	.word	0x080011ab
 8001168:	0800117f 	.word	0x0800117f
 800116c:	0800118d 	.word	0x0800118d
 8001170:	0800119b 	.word	0x0800119b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fdbc 	bl	8002cf4 <HAL_Delay>
		break;
 800117c:	e015      	b.n	80011aa <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	461a      	mov	r2, r3
 8001182:	2110      	movs	r1, #16
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001186:	f002 ffe1 	bl	800414c <HAL_GPIO_WritePin>
		break;
 800118a:	e00e      	b.n	80011aa <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	461a      	mov	r2, r3
 8001190:	2140      	movs	r1, #64	@ 0x40
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001194:	f002 ffda 	bl	800414c <HAL_GPIO_WritePin>
		break;
 8001198:	e007      	b.n	80011aa <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	461a      	mov	r2, r3
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <u8x8_stm32_gpio_and_delay+0xf0>)
 80011a4:	f002 ffd2 	bl	800414c <HAL_GPIO_WritePin>
		break;
 80011a8:	bf00      	nop
	}
	return 1;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020000 	.word	0x40020000

080011b8 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	72fb      	strb	r3, [r7, #11]
 80011c6:	4613      	mov	r3, r2
 80011c8:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	3b14      	subs	r3, #20
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d847      	bhi.n	8001262 <u8x8_byte_stm32_hw_spi+0xaa>
 80011d2:	a201      	add	r2, pc, #4	@ (adr r2, 80011d8 <u8x8_byte_stm32_hw_spi+0x20>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	08001267 	.word	0x08001267
 80011dc:	08001263 	.word	0x08001263
 80011e0:	08001263 	.word	0x08001263
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	08001233 	.word	0x08001233
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	08001263 	.word	0x08001263
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001263 	.word	0x08001263
 80011fc:	08001263 	.word	0x08001263
 8001200:	08001263 	.word	0x08001263
 8001204:	08001263 	.word	0x08001263
 8001208:	08001225 	.word	0x08001225
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 800120c:	7abb      	ldrb	r3, [r7, #10]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	@ 0x64
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4818      	ldr	r0, [pc, #96]	@ (8001278 <u8x8_byte_stm32_hw_spi+0xc0>)
 8001216:	f003 fc60 	bl	8004ada <HAL_SPI_Transmit>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d024      	beq.n	800126a <u8x8_byte_stm32_hw_spi+0xb2>
 8001220:	2300      	movs	r3, #0
 8001222:	e024      	b.n	800126e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	461a      	mov	r2, r3
 8001228:	214a      	movs	r1, #74	@ 0x4a
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f001 fc57 	bl	8002ade <u8x8_gpio_call>
		break;
 8001230:	e01c      	b.n	800126c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	2149      	movs	r1, #73	@ 0x49
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f001 fc4e 	bl	8002ade <u8x8_gpio_call>
		HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f001 fd56 	bl	8002cf4 <HAL_Delay>
		break;
 8001248:	e010      	b.n	800126c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f001 fd52 	bl	8002cf4 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	461a      	mov	r2, r3
 8001258:	2149      	movs	r1, #73	@ 0x49
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f001 fc3f 	bl	8002ade <u8x8_gpio_call>
		break;
 8001260:	e004      	b.n	800126c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001262:	2300      	movs	r3, #0
 8001264:	e003      	b.n	800126e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800126a:	bf00      	nop
	}
	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000124 	.word	0x20000124

0800127c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	7c1b      	ldrb	r3, [r3, #16]
 800128a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fb56 	bl	800695c <memset>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
 80012c4:	4613      	mov	r3, r2
 80012c6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	7c1b      	ldrb	r3, [r3, #16]
 80012ce:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	89ba      	ldrh	r2, [r7, #12]
 80012e0:	fb12 f303 	smulbb	r3, r2, r3
 80012e4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80012f4:	7bf9      	ldrb	r1, [r7, #15]
 80012f6:	78ba      	ldrb	r2, [r7, #2]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	460b      	mov	r3, r1
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f001 fb8c 	bl	8002a1e <u8x8_DrawTile>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001320:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001328:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	7c5b      	ldrb	r3, [r3, #17]
 8001330:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001332:	7bba      	ldrb	r2, [r7, #14]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4619      	mov	r1, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffbd 	bl	80012b8 <u8g2_send_tile_row>
    src_row++;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	3301      	adds	r3, #1
 8001348:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	429a      	cmp	r2, r3
 8001350:	d203      	bcs.n	800135a <u8g2_send_buffer+0x4c>
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3eb      	bcc.n	8001332 <u8g2_send_buffer+0x24>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffcf 	bl	800130e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f001 fba5 	bl	8002ac0 <u8x8_RefreshDisplay>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2208      	movs	r2, #8
 800138c:	701a      	strb	r2, [r3, #0]
  return buf;
 800138e:	4b03      	ldr	r3, [pc, #12]	@ (800139c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	2000425c 	.word	0x2000425c

080013a0 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 80013b6:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f001 fbe1 	bl	8002b80 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80013be:	f107 0313 	add.w	r3, r7, #19
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffdc 	bl	8001380 <u8g2_m_16_8_f>
 80013c8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80013ca:	7cfa      	ldrb	r2, [r7, #19]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 80013d2:	6979      	ldr	r1, [r7, #20]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 ff68 	bl	80022aa <u8g2_SetupBuffer>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08002741 	.word	0x08002741
 80013e8:	08002919 	.word	0x08002919
 80013ec:	0800212d 	.word	0x0800212d

080013f0 <u8g2_font_get_word>:
  return u8x8_pgm_read( font );  
}

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	81fb      	strh	r3, [r7, #14]
    font++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	4413      	add	r3, r2
 8001420:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001422:	89fb      	ldrh	r3, [r7, #14]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	fa42 f303 	asr.w	r3, r2, r3
 8001452:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001458:	7bba      	ldrb	r2, [r7, #14]
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	4413      	add	r3, r2
 800145e:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b07      	cmp	r3, #7
 8001464:	d91a      	bls.n	800149c <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001466:	2308      	movs	r3, #8
 8001468:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800146a:	7b3a      	ldrb	r2, [r7, #12]
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	b25a      	sxtb	r2, r3
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	4313      	orrs	r3, r2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	3b08      	subs	r3, #8
 800149a:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f04f 32ff 	mov.w	r2, #4294967295
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	4013      	ands	r3, r2
 80014b0:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7bba      	ldrb	r2, [r7, #14]
 80014b6:	731a      	strb	r2, [r3, #12]
  return val;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffaa 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80014ea:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	73fb      	strb	r3, [r7, #15]
  return v;
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800150c:	b490      	push	{r4, r7}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4623      	mov	r3, r4
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	4603      	mov	r3, r0
 8001520:	717b      	strb	r3, [r7, #5]
 8001522:	460b      	mov	r3, r1
 8001524:	713b      	strb	r3, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d014      	beq.n	800155a <u8g2_add_vector_y+0x4e>
 8001530:	2b02      	cmp	r3, #2
 8001532:	dc19      	bgt.n	8001568 <u8g2_add_vector_y+0x5c>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <u8g2_add_vector_y+0x32>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d007      	beq.n	800154c <u8g2_add_vector_y+0x40>
 800153c:	e014      	b.n	8001568 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800153e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001542:	b29a      	uxth	r2, r3
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4413      	add	r3, r2
 8001548:	80fb      	strh	r3, [r7, #6]
      break;
 800154a:	e014      	b.n	8001576 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800154c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001550:	b29a      	uxth	r2, r3
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4413      	add	r3, r2
 8001556:	80fb      	strh	r3, [r7, #6]
      break;
 8001558:	e00d      	b.n	8001576 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800155a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800155e:	b29b      	uxth	r3, r3
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	80fb      	strh	r3, [r7, #6]
      break;
 8001566:	e006      	b.n	8001576 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001568:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800156c:	b29b      	uxth	r3, r3
 800156e:	88fa      	ldrh	r2, [r7, #6]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	80fb      	strh	r3, [r7, #6]
      break;      
 8001574:	bf00      	nop
  }
  return dy;
 8001576:	88fb      	ldrh	r3, [r7, #6]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bc90      	pop	{r4, r7}
 8001580:	4770      	bx	lr

08001582 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001582:	b490      	push	{r4, r7}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4604      	mov	r4, r0
 800158a:	4608      	mov	r0, r1
 800158c:	4611      	mov	r1, r2
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	80fb      	strh	r3, [r7, #6]
 8001594:	4603      	mov	r3, r0
 8001596:	717b      	strb	r3, [r7, #5]
 8001598:	460b      	mov	r3, r1
 800159a:	713b      	strb	r3, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d014      	beq.n	80015d0 <u8g2_add_vector_x+0x4e>
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	dc19      	bgt.n	80015de <u8g2_add_vector_x+0x5c>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <u8g2_add_vector_x+0x32>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d007      	beq.n	80015c2 <u8g2_add_vector_x+0x40>
 80015b2:	e014      	b.n	80015de <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80015b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4413      	add	r3, r2
 80015be:	80fb      	strh	r3, [r7, #6]
      break;
 80015c0:	e014      	b.n	80015ec <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80015c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	80fb      	strh	r3, [r7, #6]
      break;
 80015ce:	e00d      	b.n	80015ec <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80015d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	88fa      	ldrh	r2, [r7, #6]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	80fb      	strh	r3, [r7, #6]
      break;
 80015dc:	e006      	b.n	80015ec <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80015de:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4413      	add	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
      break;      
 80015ea:	bf00      	nop
  }
  return dx;
 80015ec:	88fb      	ldrh	r3, [r7, #6]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc90      	pop	{r4, r7}
 80015f6:	4770      	bx	lr

080015f8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
 8001604:	4613      	mov	r3, r2
 8001606:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3360      	adds	r3, #96	@ 0x60
 800160c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001618:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001620:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001628:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	7d7b      	ldrb	r3, [r7, #21]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001636:	7dfa      	ldrb	r2, [r7, #23]
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	429a      	cmp	r2, r3
 800163c:	d201      	bcs.n	8001642 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800164e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001652:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	7c1b      	ldrb	r3, [r3, #16]
 800165a:	89b8      	ldrh	r0, [r7, #12]
 800165c:	f7ff ff91 	bl	8001582 <u8g2_add_vector_x>
 8001660:	4603      	mov	r3, r0
 8001662:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001664:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001668:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	7c1b      	ldrb	r3, [r3, #16]
 8001670:	8978      	ldrh	r0, [r7, #10]
 8001672:	f7ff ff4b 	bl	800150c <u8g2_add_vector_y>
 8001676:	4603      	mov	r3, r0
 8001678:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800167a:	78bb      	ldrb	r3, [r7, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d010      	beq.n	80016a2 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	7b9a      	ldrb	r2, [r3, #14]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800168a:	7dbb      	ldrb	r3, [r7, #22]
 800168c:	b298      	uxth	r0, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	7c1b      	ldrb	r3, [r3, #16]
 8001692:	897a      	ldrh	r2, [r7, #10]
 8001694:	89b9      	ldrh	r1, [r7, #12]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4603      	mov	r3, r0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fb79 	bl	8001d92 <u8g2_DrawHVLine>
 80016a0:	e013      	b.n	80016ca <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	7b5b      	ldrb	r3, [r3, #13]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	7bda      	ldrb	r2, [r3, #15]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80016b4:	7dbb      	ldrb	r3, [r7, #22]
 80016b6:	b298      	uxth	r0, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	7c1b      	ldrb	r3, [r3, #16]
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	89b9      	ldrh	r1, [r7, #12]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4603      	mov	r3, r0
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fb64 	bl	8001d92 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80016ca:	7dfa      	ldrb	r2, [r7, #23]
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d309      	bcc.n	80016e6 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80016d2:	7dfa      	ldrb	r2, [r7, #23]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	757b      	strb	r3, [r7, #21]
    ly++;
 80016de:	7d3b      	ldrb	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80016e4:	e79d      	b.n	8001622 <u8g2_font_decode_len+0x2a>
      break;
 80016e6:	bf00      	nop
  }
  lx += cnt;
 80016e8:	7d7a      	ldrb	r2, [r7, #21]
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	4413      	add	r3, r2
 80016ee:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80016f0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80016f8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	725a      	strb	r2, [r3, #9]
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3360      	adds	r3, #96	@ 0x60
 8001716:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800172a:	4619      	mov	r1, r3
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fe7f 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 8001732:	4603      	mov	r3, r0
 8001734:	b25a      	sxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001740:	4619      	mov	r1, r3
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fe74 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 8001748:	4603      	mov	r3, r0
 800174a:	b25a      	sxtb	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	7b9b      	ldrb	r3, [r3, #14]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	73da      	strb	r2, [r3, #15]
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af02      	add	r7, sp, #8
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3360      	adds	r3, #96	@ 0x60
 8001786:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffbc 	bl	8001708 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001796:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800179e:	4619      	mov	r1, r3
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f7ff fe90 	bl	80014c6 <u8g2_font_decode_get_signed_bits>
 80017a6:	4603      	mov	r3, r0
 80017a8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80017b0:	4619      	mov	r1, r3
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff fe87 	bl	80014c6 <u8g2_font_decode_get_signed_bits>
 80017b8:	4603      	mov	r3, r0
 80017ba:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80017c2:	4619      	mov	r1, r3
 80017c4:	6978      	ldr	r0, [r7, #20]
 80017c6:	f7ff fe7e 	bl	80014c6 <u8g2_font_decode_get_signed_bits>
 80017ca:	4603      	mov	r3, r0
 80017cc:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f340 80d7 	ble.w	8001988 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	8898      	ldrh	r0, [r3, #4]
 80017de:	7cfa      	ldrb	r2, [r7, #19]
 80017e0:	7c7b      	ldrb	r3, [r7, #17]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	425b      	negs	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	b25a      	sxtb	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	7c1b      	ldrb	r3, [r3, #16]
 80017f0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80017f4:	f7ff fec5 	bl	8001582 <u8g2_add_vector_x>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	88d8      	ldrh	r0, [r3, #6]
 8001804:	7cfa      	ldrb	r2, [r7, #19]
 8001806:	7c7b      	ldrb	r3, [r7, #17]
 8001808:	4413      	add	r3, r2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	425b      	negs	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	b25a      	sxtb	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	7c1b      	ldrb	r3, [r3, #16]
 8001816:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800181a:	f7ff fe77 	bl	800150c <u8g2_add_vector_y>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	88db      	ldrh	r3, [r3, #6]
 8001830:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001832:	8bfb      	ldrh	r3, [r7, #30]
 8001834:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001836:	8b7b      	ldrh	r3, [r7, #26]
 8001838:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	7c1b      	ldrb	r3, [r3, #16]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d85a      	bhi.n	80018f8 <u8g2_font_decode_glyph+0x180>
 8001842:	a201      	add	r2, pc, #4	@ (adr r2, 8001848 <u8g2_font_decode_glyph+0xd0>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	08001875 	.word	0x08001875
 8001850:	0800189d 	.word	0x0800189d
 8001854:	080018d1 	.word	0x080018d1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800185e:	b29a      	uxth	r2, r3
 8001860:	8bbb      	ldrh	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800186a:	b29a      	uxth	r2, r3
 800186c:	8b3b      	ldrh	r3, [r7, #24]
 800186e:	4413      	add	r3, r2
 8001870:	833b      	strh	r3, [r7, #24]
	    break;
 8001872:	e041      	b.n	80018f8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001878:	b29b      	uxth	r3, r3
 800187a:	8bfa      	ldrh	r2, [r7, #30]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001880:	8bfb      	ldrh	r3, [r7, #30]
 8001882:	3301      	adds	r3, #1
 8001884:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001886:	8bbb      	ldrh	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001892:	b29a      	uxth	r2, r3
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	4413      	add	r3, r2
 8001898:	833b      	strh	r3, [r7, #24]
	    break;
 800189a:	e02d      	b.n	80018f8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	8bfa      	ldrh	r2, [r7, #30]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018aa:	8bfb      	ldrh	r3, [r7, #30]
 80018ac:	3301      	adds	r3, #1
 80018ae:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80018b0:	8bbb      	ldrh	r3, [r7, #28]
 80018b2:	3301      	adds	r3, #1
 80018b4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80018b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8b7a      	ldrh	r2, [r7, #26]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018c2:	8b7b      	ldrh	r3, [r7, #26]
 80018c4:	3301      	adds	r3, #1
 80018c6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80018c8:	8b3b      	ldrh	r3, [r7, #24]
 80018ca:	3301      	adds	r3, #1
 80018cc:	833b      	strh	r3, [r7, #24]
	    break;	  
 80018ce:	e013      	b.n	80018f8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80018d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	8bbb      	ldrh	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	8b7a      	ldrh	r2, [r7, #26]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018ea:	8b7b      	ldrh	r3, [r7, #26]
 80018ec:	3301      	adds	r3, #1
 80018ee:	837b      	strh	r3, [r7, #26]
	    y1++;
 80018f0:	8b3b      	ldrh	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80018f6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80018f8:	8bb8      	ldrh	r0, [r7, #28]
 80018fa:	8b7a      	ldrh	r2, [r7, #26]
 80018fc:	8bf9      	ldrh	r1, [r7, #30]
 80018fe:	8b3b      	ldrh	r3, [r7, #24]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4603      	mov	r3, r0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fb4c 	bl	8001fa2 <u8g2_IsIntersection>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001910:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001914:	e03a      	b.n	800198c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2200      	movs	r2, #0
 800191a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2200      	movs	r2, #0
 8001920:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001928:	4619      	mov	r1, r3
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff fd80 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800193a:	4619      	mov	r1, r3
 800193c:	6978      	ldr	r0, [r7, #20]
 800193e:	f7ff fd77 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 8001942:	4603      	mov	r3, r0
 8001944:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fe53 	bl	80015f8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001952:	7bbb      	ldrb	r3, [r7, #14]
 8001954:	2201      	movs	r2, #1
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fe4d 	bl	80015f8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800195e:	2101      	movs	r1, #1
 8001960:	6978      	ldr	r0, [r7, #20]
 8001962:	f7ff fd65 	bl	8001430 <u8g2_font_decode_get_unsigned_bits>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ec      	bne.n	8001946 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001972:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001976:	429a      	cmp	r2, r3
 8001978:	dd00      	ble.n	800197c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800197a:	e7d2      	b.n	8001922 <u8g2_font_decode_glyph+0x1aa>
	break;
 800197c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	7b9a      	ldrb	r2, [r3, #14]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001988:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3317      	adds	r3, #23
 80019aa:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	2bff      	cmp	r3, #255	@ 0xff
 80019b0:	d82a      	bhi.n	8001a08 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	2b60      	cmp	r3, #96	@ 0x60
 80019b6:	d907      	bls.n	80019c8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80019be:	461a      	mov	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e009      	b.n	80019dc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d906      	bls.n	80019dc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80019d4:	461a      	mov	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04e      	beq.n	8001a84 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d102      	bne.n	80019f8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3302      	adds	r3, #2
 80019f6:	e049      	b.n	8001a8c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001a06:	e7e9      	b.n	80019dc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001a0e:	461a      	mov	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	6938      	ldr	r0, [r7, #16]
 8001a1e:	f7ff fce7 	bl	80013f0 <u8g2_font_get_word>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	6938      	ldr	r0, [r7, #16]
 8001a30:	f7ff fcde 	bl	80013f0 <u8g2_font_get_word>
 8001a34:	4603      	mov	r3, r0
 8001a36:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001a3e:	89fa      	ldrh	r2, [r7, #14]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3e9      	bcc.n	8001a1a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001a66:	89fa      	ldrh	r2, [r7, #14]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d102      	bne.n	8001a74 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3303      	adds	r3, #3
 8001a72:	e00b      	b.n	8001a8c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3302      	adds	r3, #2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001a82:	e7e0      	b.n	8001a46 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001a88:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	813b      	strh	r3, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	897a      	ldrh	r2, [r7, #10]
 8001ab6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	893a      	ldrh	r2, [r7, #8]
 8001abe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff ff64 	bl	8001994 <u8g2_font_get_glyph_data>
 8001acc:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fe4e 	bl	8001778 <u8g2_font_decode_glyph>
 8001adc:	4603      	mov	r3, r0
 8001ade:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	4608      	mov	r0, r1
 8001af6:	4611      	mov	r1, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	817b      	strh	r3, [r7, #10]
 8001afe:	460b      	mov	r3, r1
 8001b00:	813b      	strh	r3, [r7, #8]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d833      	bhi.n	8001b78 <u8g2_DrawGlyph+0x8c>
 8001b10:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <u8g2_DrawGlyph+0x2c>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b3d 	.word	0x08001b3d
 8001b20:	08001b51 	.word	0x08001b51
 8001b24:	08001b65 	.word	0x08001b65
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	4798      	blx	r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	893b      	ldrh	r3, [r7, #8]
 8001b36:	4413      	add	r3, r2
 8001b38:	813b      	strh	r3, [r7, #8]
      break;
 8001b3a:	e01d      	b.n	8001b78 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	817b      	strh	r3, [r7, #10]
      break;
 8001b4e:	e013      	b.n	8001b78 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	4798      	blx	r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	813b      	strh	r3, [r7, #8]
      break;
 8001b62:	e009      	b.n	8001b78 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	4798      	blx	r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	4413      	add	r3, r2
 8001b74:	817b      	strh	r3, [r7, #10]
      break;
 8001b76:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	893a      	ldrh	r2, [r7, #8]
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff ff88 	bl	8001a94 <u8g2_font_draw_glyph>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop

08001b90 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	817b      	strh	r3, [r7, #10]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fcc7 	bl	8002536 <u8x8_utf8_init>
  sum = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	7812      	ldrb	r2, [r2, #0]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	4798      	blx	r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d038      	beq.n	8001c3a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d0e9      	beq.n	8001bac <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001bd8:	8abb      	ldrh	r3, [r7, #20]
 8001bda:	893a      	ldrh	r2, [r7, #8]
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff ff84 	bl	8001aec <u8g2_DrawGlyph>
 8001be4:	4603      	mov	r3, r0
 8001be6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d81e      	bhi.n	8001c30 <u8g2_draw_string+0xa0>
 8001bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf8 <u8g2_draw_string+0x68>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001c13 	.word	0x08001c13
 8001c00:	08001c1d 	.word	0x08001c1d
 8001c04:	08001c27 	.word	0x08001c27
      {
	case 0:
	  x += delta;
 8001c08:	897a      	ldrh	r2, [r7, #10]
 8001c0a:	8a7b      	ldrh	r3, [r7, #18]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	817b      	strh	r3, [r7, #10]
	  break;
 8001c10:	e00e      	b.n	8001c30 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001c12:	893a      	ldrh	r2, [r7, #8]
 8001c14:	8a7b      	ldrh	r3, [r7, #18]
 8001c16:	4413      	add	r3, r2
 8001c18:	813b      	strh	r3, [r7, #8]
	  break;
 8001c1a:	e009      	b.n	8001c30 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001c1c:	897a      	ldrh	r2, [r7, #10]
 8001c1e:	8a7b      	ldrh	r3, [r7, #18]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	817b      	strh	r3, [r7, #10]
	  break;
 8001c24:	e004      	b.n	8001c30 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001c26:	893a      	ldrh	r2, [r7, #8]
 8001c28:	8a7b      	ldrh	r3, [r7, #18]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	813b      	strh	r3, [r7, #8]
	  break;
 8001c2e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001c30:	8afa      	ldrh	r2, [r7, #22]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	4413      	add	r3, r2
 8001c36:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001c38:	e7b8      	b.n	8001bac <u8g2_draw_string+0x1c>
      break;
 8001c3a:	bf00      	nop
    }
  }
  return sum;
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop

08001c48 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	817b      	strh	r3, [r7, #10]
 8001c56:	4613      	mov	r3, r2
 8001c58:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <u8g2_DrawStr+0x30>)
 8001c5e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	8979      	ldrh	r1, [r7, #10]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff ff92 	bl	8001b90 <u8g2_draw_string>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	08002553 	.word	0x08002553

08001c7c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <u8g2_SetFontPosBaseline+0x1c>)
 8001ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	08001c7d 	.word	0x08001c7d

08001cb4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001cd0:	8afb      	ldrh	r3, [r7, #22]
 8001cd2:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	8abb      	ldrh	r3, [r7, #20]
 8001cda:	4413      	add	r3, r2
 8001cdc:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001cde:	8afa      	ldrh	r2, [r7, #22]
 8001ce0:	8abb      	ldrh	r3, [r7, #20]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d90b      	bls.n	8001cfe <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001ce6:	8afa      	ldrh	r2, [r7, #22]
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d205      	bcs.n	8001cfa <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001cee:	88bb      	ldrh	r3, [r7, #4]
 8001cf0:	82bb      	strh	r3, [r7, #20]
      b--;
 8001cf2:	8abb      	ldrh	r3, [r7, #20]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	82bb      	strh	r3, [r7, #20]
 8001cf8:	e001      	b.n	8001cfe <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001cfe:	8afa      	ldrh	r2, [r7, #22]
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d301      	bcc.n	8001d0a <u8g2_clip_intersection2+0x56>
    return 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e01c      	b.n	8001d44 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001d0a:	8aba      	ldrh	r2, [r7, #20]
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d801      	bhi.n	8001d16 <u8g2_clip_intersection2+0x62>
    return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e016      	b.n	8001d44 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001d16:	8afa      	ldrh	r2, [r7, #22]
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d201      	bcs.n	8001d22 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001d22:	8aba      	ldrh	r2, [r7, #20]
 8001d24:	88bb      	ldrh	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d901      	bls.n	8001d2e <u8g2_clip_intersection2+0x7a>
    b = d;
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8afa      	ldrh	r2, [r7, #22]
 8001d32:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001d34:	8aba      	ldrh	r2, [r7, #20]
 8001d36:	8afb      	ldrh	r3, [r7, #22]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	8aba      	ldrh	r2, [r7, #20]
 8001d40:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d6e:	893a      	ldrh	r2, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001d78:	88f8      	ldrh	r0, [r7, #6]
 8001d7a:	893a      	ldrh	r2, [r7, #8]
 8001d7c:	8979      	ldrh	r1, [r7, #10]
 8001d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4603      	mov	r3, r0
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	47a0      	blx	r4
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}

08001d92 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d92:	b590      	push	{r4, r7, lr}
 8001d94:	b087      	sub	sp, #28
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	817b      	strh	r3, [r7, #10]
 8001da4:	460b      	mov	r3, r1
 8001da6:	813b      	strh	r3, [r7, #8]
 8001da8:	4613      	mov	r3, r2
 8001daa:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d075      	beq.n	8001ea2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d072      	beq.n	8001ea2 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d91a      	bls.n	8001df8 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001dc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d109      	bne.n	8001dde <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001dca:	897a      	ldrh	r2, [r7, #10]
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	817b      	strh	r3, [r7, #10]
	  x++;
 8001dd4:	897b      	ldrh	r3, [r7, #10]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	817b      	strh	r3, [r7, #10]
 8001ddc:	e00c      	b.n	8001df8 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d108      	bne.n	8001df8 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001de6:	893a      	ldrh	r2, [r7, #8]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	813b      	strh	r3, [r7, #8]
	  y++;
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11a      	bne.n	8001e42 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001e12:	893b      	ldrh	r3, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d83b      	bhi.n	8001e90 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001e1e:	893b      	ldrh	r3, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d937      	bls.n	8001e94 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001e30:	1db9      	adds	r1, r7, #6
 8001e32:	f107 000a 	add.w	r0, r7, #10
 8001e36:	f7ff ff3d 	bl	8001cb4 <u8g2_clip_intersection2>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11a      	bne.n	8001e76 <u8g2_DrawHVLine+0xe4>
	  return;
 8001e40:	e02f      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d824      	bhi.n	8001e98 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e54:	897b      	ldrh	r3, [r7, #10]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d920      	bls.n	8001e9c <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e66:	1db9      	adds	r1, r7, #6
 8001e68:	f107 0008 	add.w	r0, r7, #8
 8001e6c:	f7ff ff22 	bl	8001cb4 <u8g2_clip_intersection2>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d014      	beq.n	8001ea0 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	689c      	ldr	r4, [r3, #8]
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	893a      	ldrh	r2, [r7, #8]
 8001e80:	88f8      	ldrh	r0, [r7, #6]
 8001e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	47a0      	blx	r4
 8001e8e:	e008      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
	  return;
 8001e90:	bf00      	nop
 8001e92:	e006      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
	  return;
 8001e94:	bf00      	nop
 8001e96:	e004      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
	  return;
 8001e98:	bf00      	nop
 8001e9a:	e002      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
	  return;
 8001e9c:	bf00      	nop
 8001e9e:	e000      	b.n	8001ea2 <u8g2_DrawHVLine+0x110>
	  return;
 8001ea0:	bf00      	nop
    }
}
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}

08001ea8 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001ebe:	883a      	ldrh	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d31a      	bcc.n	8001efa <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001eca:	883a      	ldrh	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d216      	bcs.n	8001efe <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d312      	bcc.n	8001f02 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d20e      	bcs.n	8001f06 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001ee8:	883a      	ldrh	r2, [r7, #0]
 8001eea:	8879      	ldrh	r1, [r7, #2]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff4d 	bl	8001d92 <u8g2_DrawHVLine>
 8001ef8:	e006      	b.n	8001f08 <u8g2_DrawPixel+0x60>
    return;
 8001efa:	bf00      	nop
 8001efc:	e004      	b.n	8001f08 <u8g2_DrawPixel+0x60>
    return;
 8001efe:	bf00      	nop
 8001f00:	e002      	b.n	8001f08 <u8g2_DrawPixel+0x60>
    return;
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <u8g2_DrawPixel+0x60>
    return;
 8001f06:	bf00      	nop
}
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d903      	bls.n	8001f30 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001f3c:	b490      	push	{r4, r7}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20d      	bcs.n	8001f7e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f62:	883a      	ldrh	r2, [r7, #0]
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d901      	bls.n	8001f6e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e014      	b.n	8001f98 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	883b      	ldrh	r3, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d901      	bls.n	8001f7a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e00c      	b.n	8001f98 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f7e:	883a      	ldrh	r2, [r7, #0]
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d907      	bls.n	8001f96 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	883b      	ldrh	r3, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d901      	bls.n	8001f92 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e002      	b.n	8001f98 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001f96:	2300      	movs	r3, #0
    }
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc90      	pop	{r4, r7}
 8001fa0:	4770      	bx	lr

08001fa2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	4608      	mov	r0, r1
 8001fac:	4611      	mov	r1, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	813b      	strh	r3, [r7, #8]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001fc8:	8b3b      	ldrh	r3, [r7, #24]
 8001fca:	893a      	ldrh	r2, [r7, #8]
 8001fcc:	f7ff ffb6 	bl	8001f3c <u8g2_is_intersection_decision_tree>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <u8g2_IsIntersection+0x38>
    return 0; 
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e00a      	b.n	8001ff0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	897a      	ldrh	r2, [r7, #10]
 8001fea:	f7ff ffa7 	bl	8001f3c <u8g2_is_intersection_decision_tree>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	460b      	mov	r3, r1
 800200c:	813b      	strh	r3, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8002016:	897a      	ldrh	r2, [r7, #10]
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	429a      	cmp	r2, r3
 800201c:	d904      	bls.n	8002028 <u8g2_DrawLine+0x30>
 800201e:	897a      	ldrh	r2, [r7, #10]
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	837b      	strh	r3, [r7, #26]
 8002026:	e003      	b.n	8002030 <u8g2_DrawLine+0x38>
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	897b      	ldrh	r3, [r7, #10]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002034:	429a      	cmp	r2, r3
 8002036:	d904      	bls.n	8002042 <u8g2_DrawLine+0x4a>
 8002038:	893a      	ldrh	r2, [r7, #8]
 800203a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	833b      	strh	r3, [r7, #24]
 8002040:	e003      	b.n	800204a <u8g2_DrawLine+0x52>
 8002042:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002044:	893b      	ldrh	r3, [r7, #8]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 800204a:	8b3a      	ldrh	r2, [r7, #24]
 800204c:	8b7b      	ldrh	r3, [r7, #26]
 800204e:	429a      	cmp	r2, r3
 8002050:	d913      	bls.n	800207a <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	823b      	strh	r3, [r7, #16]
 800205a:	8b3b      	ldrh	r3, [r7, #24]
 800205c:	837b      	strh	r3, [r7, #26]
 800205e:	8a3b      	ldrh	r3, [r7, #16]
 8002060:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8002062:	897b      	ldrh	r3, [r7, #10]
 8002064:	823b      	strh	r3, [r7, #16]
 8002066:	893b      	ldrh	r3, [r7, #8]
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	8a3b      	ldrh	r3, [r7, #16]
 800206c:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	823b      	strh	r3, [r7, #16]
 8002072:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002074:	80fb      	strh	r3, [r7, #6]
 8002076:	8a3b      	ldrh	r3, [r7, #16]
 8002078:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  if ( x1 > x2 ) 
 800207a:	897a      	ldrh	r2, [r7, #10]
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90b      	bls.n	800209a <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	823b      	strh	r3, [r7, #16]
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	8a3b      	ldrh	r3, [r7, #16]
 800208c:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	823b      	strh	r3, [r7, #16]
 8002092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002094:	813b      	strh	r3, [r7, #8]
 8002096:	8a3b      	ldrh	r3, [r7, #16]
 8002098:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  err = dx >> 1;
 800209a:	8b7b      	ldrh	r3, [r7, #26]
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	b29b      	uxth	r3, r3
 80020a0:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80020a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80020a4:	893b      	ldrh	r3, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d902      	bls.n	80020b0 <u8g2_DrawLine+0xb8>
 80020aa:	2301      	movs	r3, #1
 80020ac:	82bb      	strh	r3, [r7, #20]
 80020ae:	e002      	b.n	80020b6 <u8g2_DrawLine+0xbe>
 80020b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020b4:	82bb      	strh	r3, [r7, #20]
  y = y1;
 80020b6:	893b      	ldrh	r3, [r7, #8]
 80020b8:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d102      	bne.n	80020ca <u8g2_DrawLine+0xd2>
    x2--;
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	83fb      	strh	r3, [r7, #30]
 80020ce:	e024      	b.n	800211a <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 80020d6:	8bba      	ldrh	r2, [r7, #28]
 80020d8:	8bfb      	ldrh	r3, [r7, #30]
 80020da:	4619      	mov	r1, r3
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fee3 	bl	8001ea8 <u8g2_DrawPixel>
 80020e2:	e005      	b.n	80020f0 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80020e4:	8bfa      	ldrh	r2, [r7, #30]
 80020e6:	8bbb      	ldrh	r3, [r7, #28]
 80020e8:	4619      	mov	r1, r3
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff fedc 	bl	8001ea8 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 80020f0:	8afa      	ldrh	r2, [r7, #22]
 80020f2:	8b3b      	ldrh	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 80020fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da08      	bge.n	8002114 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 8002102:	8aba      	ldrh	r2, [r7, #20]
 8002104:	8bbb      	ldrh	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 800210a:	8afa      	ldrh	r2, [r7, #22]
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	4413      	add	r3, r2
 8002110:	b29b      	uxth	r3, r3
 8002112:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8002114:	8bfb      	ldrh	r3, [r7, #30]
 8002116:	3301      	adds	r3, #1
 8002118:	83fb      	strh	r3, [r7, #30]
 800211a:	8bfa      	ldrh	r2, [r7, #30]
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	429a      	cmp	r2, r3
 8002120:	d9d6      	bls.n	80020d0 <u8g2_DrawLine+0xd8>
    }
  }
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4603      	mov	r3, r0
 800213c:	817b      	strh	r3, [r7, #10]
 800213e:	460b      	mov	r3, r1
 8002140:	813b      	strh	r3, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002146:	893b      	ldrh	r3, [r7, #8]
 8002148:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002156:	7e3a      	ldrb	r2, [r7, #24]
 8002158:	7efb      	ldrb	r3, [r7, #27]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800216e:	2b01      	cmp	r3, #1
 8002170:	d801      	bhi.n	8002176 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002172:	7e3b      	ldrb	r3, [r7, #24]
 8002174:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800217c:	2b01      	cmp	r3, #1
 800217e:	d001      	beq.n	8002184 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002180:	7e3b      	ldrb	r3, [r7, #24]
 8002182:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	f023 0307 	bic.w	r3, r3, #7
 800218e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	7c1b      	ldrb	r3, [r3, #16]
 8002196:	461a      	mov	r2, r3
 8002198:	8afb      	ldrh	r3, [r7, #22]
 800219a:	fb13 f302 	smulbb	r3, r3, r2
 800219e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80021a6:	8afb      	ldrh	r3, [r7, #22]
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80021b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d117      	bne.n	80021ee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	7ebb      	ldrb	r3, [r7, #26]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	7e7b      	ldrb	r3, [r7, #25]
 80021d2:	4053      	eors	r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	701a      	strb	r2, [r3, #0]
	ptr++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
	len--;
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e8      	bne.n	80021be <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80021ec:	e038      	b.n	8002260 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	7ebb      	ldrb	r3, [r7, #26]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	7e7b      	ldrb	r3, [r7, #25]
 8002202:	4053      	eors	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	3301      	adds	r3, #1
 800220e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002210:	7efb      	ldrb	r3, [r7, #27]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	76fb      	strb	r3, [r7, #27]
      len--;
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	3b01      	subs	r3, #1
 800221c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800221e:	7efb      	ldrb	r3, [r7, #27]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d114      	bne.n	800224e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002228:	461a      	mov	r2, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002236:	2b01      	cmp	r3, #1
 8002238:	d801      	bhi.n	800223e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002244:	2b01      	cmp	r3, #1
 8002246:	d008      	beq.n	800225a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002248:	2301      	movs	r3, #1
 800224a:	767b      	strb	r3, [r7, #25]
 800224c:	e005      	b.n	800225a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800224e:	7ebb      	ldrb	r3, [r7, #26]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002254:	7e7b      	ldrb	r3, [r7, #25]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1c6      	bne.n	80021ee <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002260:	bf00      	nop
 8002262:	3724      	adds	r7, #36	@ 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800228a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002294:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	79fa      	ldrb	r2, [r7, #7]
 80022d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff ffa9 	bl	800226c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff fcba 	bl	8001c94 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002344:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	89fa      	ldrh	r2, [r7, #14]
 8002350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	7c1b      	ldrb	r3, [r3, #16]
 8002356:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	89fa      	ldrh	r2, [r7, #14]
 8002362:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800236a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	89fa      	ldrh	r2, [r7, #14]
 8002376:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800237e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002388:	4413      	add	r3, r2
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	7c52      	ldrb	r2, [r2, #17]
 800238e:	4293      	cmp	r3, r2
 8002390:	dd07      	ble.n	80023a2 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	7c5b      	ldrb	r3, [r3, #17]
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	4413      	add	r3, r2
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	8a9a      	ldrh	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	8ada      	ldrh	r2, [r3, #22]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	4603      	mov	r3, r0
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fdc4 	bl	8001fa2 <u8g2_IsIntersection>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002428:	e03b      	b.n	80024a2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243e:	429a      	cmp	r2, r3
 8002440:	d205      	bcs.n	800244e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800245a:	429a      	cmp	r2, r3
 800245c:	d905      	bls.n	800246a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002476:	429a      	cmp	r2, r3
 8002478:	d205      	bcs.n	8002486 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002492:	429a      	cmp	r2, r3
 8002494:	d905      	bls.n	80024a2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff3c 	bl	8002330 <u8g2_update_dimension_common>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff7b 	bl	80023f0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	4608      	mov	r0, r1
 800250c:	4611      	mov	r1, r2
 800250e:	461a      	mov	r2, r3
 8002510:	4603      	mov	r3, r0
 8002512:	817b      	strh	r3, [r7, #10]
 8002514:	460b      	mov	r3, r1
 8002516:	813b      	strh	r3, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800251c:	88f8      	ldrh	r0, [r7, #6]
 800251e:	893a      	ldrh	r2, [r7, #8]
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	7e3b      	ldrb	r3, [r7, #24]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4603      	mov	r3, r0
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fc11 	bl	8001d50 <u8g2_draw_hv_line_2dir>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <u8x8_ascii_next+0x18>
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b0a      	cmp	r3, #10
 8002568:	d102      	bne.n	8002570 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800256a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800256e:	e001      	b.n	8002574 <u8x8_ascii_next+0x22>
  return b;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	b29b      	uxth	r3, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691c      	ldr	r4, [r3, #16]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	2300      	movs	r3, #0
 8002594:	2120      	movs	r1, #32
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	47a0      	blx	r4
 800259a:	4603      	mov	r3, r0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	460b      	mov	r3, r1
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691c      	ldr	r4, [r3, #16]
 80025b6:	7afa      	ldrb	r2, [r7, #11]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2117      	movs	r1, #23
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	47a0      	blx	r4
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	461a      	mov	r2, r3
 80025da:	2101      	movs	r1, #1
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe1 	bl	80025a4 <u8x8_byte_SendBytes>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68dc      	ldr	r4, [r3, #12]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	2300      	movs	r3, #0
 8002600:	2115      	movs	r1, #21
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	47a0      	blx	r4
 8002606:	4603      	mov	r3, r0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}

08002610 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68dc      	ldr	r4, [r3, #12]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	2300      	movs	r3, #0
 8002624:	2116      	movs	r1, #22
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	47a0      	blx	r4
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	460b      	mov	r3, r1
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68dc      	ldr	r4, [r3, #12]
 8002646:	7afa      	ldrb	r2, [r7, #11]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2117      	movs	r1, #23
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	47a0      	blx	r4
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}

0800265a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68dc      	ldr	r4, [r3, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	2200      	movs	r2, #0
 800266a:	2118      	movs	r1, #24
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	47a0      	blx	r4
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}

0800267a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800267a:	b590      	push	{r4, r7, lr}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68dc      	ldr	r4, [r3, #12]
 8002686:	2300      	movs	r3, #0
 8002688:	2200      	movs	r2, #0
 800268a:	2119      	movs	r1, #25
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	47a0      	blx	r4
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}

0800269a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800269a:	b590      	push	{r4, r7, lr}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	73fb      	strb	r3, [r7, #15]
    data++;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80026b4:	d031      	beq.n	800271a <u8x8_cad_SendSequence+0x80>
 80026b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80026b8:	dc3d      	bgt.n	8002736 <u8x8_cad_SendSequence+0x9c>
 80026ba:	2b19      	cmp	r3, #25
 80026bc:	dc3b      	bgt.n	8002736 <u8x8_cad_SendSequence+0x9c>
 80026be:	2b18      	cmp	r3, #24
 80026c0:	da23      	bge.n	800270a <u8x8_cad_SendSequence+0x70>
 80026c2:	2b16      	cmp	r3, #22
 80026c4:	dc02      	bgt.n	80026cc <u8x8_cad_SendSequence+0x32>
 80026c6:	2b15      	cmp	r3, #21
 80026c8:	da03      	bge.n	80026d2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80026ca:	e034      	b.n	8002736 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80026cc:	2b17      	cmp	r3, #23
 80026ce:	d00e      	beq.n	80026ee <u8x8_cad_SendSequence+0x54>
	return;
 80026d0:	e031      	b.n	8002736 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68dc      	ldr	r4, [r3, #12]
 80026dc:	7bba      	ldrb	r2, [r7, #14]
 80026de:	7bf9      	ldrb	r1, [r7, #15]
 80026e0:	2300      	movs	r3, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	47a0      	blx	r4
	  data++;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	603b      	str	r3, [r7, #0]
	  break;
 80026ec:	e022      	b.n	8002734 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80026f4:	f107 030e 	add.w	r3, r7, #14
 80026f8:	461a      	mov	r2, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff99 	bl	8002634 <u8x8_cad_SendData>
	  data++;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	603b      	str	r3, [r7, #0]
	  break;
 8002708:	e014      	b.n	8002734 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68dc      	ldr	r4, [r3, #12]
 800270e:	7bf9      	ldrb	r1, [r7, #15]
 8002710:	2300      	movs	r3, #0
 8002712:	2200      	movs	r2, #0
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	47a0      	blx	r4
	  break;
 8002718:	e00c      	b.n	8002734 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	461a      	mov	r2, r3
 8002724:	2129      	movs	r1, #41	@ 0x29
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9d9 	bl	8002ade <u8x8_gpio_call>
	  data++;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	603b      	str	r3, [r7, #0]
	  break;
 8002732:	bf00      	nop
    cmd = *data;
 8002734:	e7b6      	b.n	80026a4 <u8x8_cad_SendSequence+0xa>
	return;
 8002736:	bf00      	nop
    }
  }
}
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
	...

08002740 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	72fb      	strb	r3, [r7, #11]
 800274e:	4613      	mov	r3, r2
 8002750:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	3b14      	subs	r3, #20
 8002756:	2b05      	cmp	r3, #5
 8002758:	d82f      	bhi.n	80027ba <u8x8_cad_001+0x7a>
 800275a:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <u8x8_cad_001+0x20>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	080027a9 	.word	0x080027a9
 8002764:	08002779 	.word	0x08002779
 8002768:	0800278d 	.word	0x0800278d
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027a9 	.word	0x080027a9
 8002774:	080027a9 	.word	0x080027a9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002778:	2100      	movs	r1, #0
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff ff00 	bl	8002580 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002780:	7abb      	ldrb	r3, [r7, #10]
 8002782:	4619      	mov	r1, r3
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff ff20 	bl	80025ca <u8x8_byte_SendByte>
      break;
 800278a:	e018      	b.n	80027be <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800278c:	2100      	movs	r1, #0
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fef6 	bl	8002580 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002794:	7abb      	ldrb	r3, [r7, #10]
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff ff16 	bl	80025ca <u8x8_byte_SendByte>
      break;
 800279e:	e00e      	b.n	80027be <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80027a0:	2101      	movs	r1, #1
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff feec 	bl	8002580 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691c      	ldr	r4, [r3, #16]
 80027ac:	7aba      	ldrb	r2, [r7, #10]
 80027ae:	7af9      	ldrb	r1, [r7, #11]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	47a0      	blx	r4
 80027b6:	4603      	mov	r3, r0
 80027b8:	e002      	b.n	80027c0 <u8x8_cad_001+0x80>
    default:
      return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <u8x8_cad_001+0x80>
  }
  return 1;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}

080027c8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	72fb      	strb	r3, [r7, #11]
 80027d6:	4613      	mov	r3, r2
 80027d8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	3b0b      	subs	r3, #11
 80027de:	2b04      	cmp	r3, #4
 80027e0:	f200 808a 	bhi.w	80028f8 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80027e4:	a201      	add	r2, pc, #4	@ (adr r2, 80027ec <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002801 	.word	0x08002801
 80027f0:	080028f9 	.word	0x080028f9
 80027f4:	0800281b 	.word	0x0800281b
 80027f8:	0800284d 	.word	0x0800284d
 80027fc:	0800286d 	.word	0x0800286d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002800:	7abb      	ldrb	r3, [r7, #10]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002806:	4940      	ldr	r1, [pc, #256]	@ (8002908 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff ff46 	bl	800269a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800280e:	e075      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002810:	493e      	ldr	r1, [pc, #248]	@ (800290c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ff41 	bl	800269a <u8x8_cad_SendSequence>
      break;
 8002818:	e070      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800281a:	7abb      	ldrb	r3, [r7, #10]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002820:	493b      	ldr	r1, [pc, #236]	@ (8002910 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff ff39 	bl	800269a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	7c9a      	ldrb	r2, [r3, #18]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002834:	e062      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002836:	4937      	ldr	r1, [pc, #220]	@ (8002914 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff ff2e 	bl	800269a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	7cda      	ldrb	r2, [r3, #19]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800284a:	e057      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ff04 	bl	800265a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002852:	2181      	movs	r1, #129	@ 0x81
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff fec9 	bl	80025ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800285a:	7abb      	ldrb	r3, [r7, #10]
 800285c:	4619      	mov	r1, r3
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fed6 	bl	8002610 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff08 	bl	800267a <u8x8_cad_EndTransfer>
      break;
 800286a:	e047      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fef4 	bl	800265a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	4413      	add	r3, r2
 8002888:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800288a:	2140      	movs	r1, #64	@ 0x40
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fead 	bl	80025ec <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fea3 	bl	80025ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	4619      	mov	r1, r3
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fead 	bl	8002610 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	799b      	ldrb	r3, [r3, #6]
 80028ba:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fea4 	bl	8002610 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80028d4:	7dbb      	ldrb	r3, [r7, #22]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4619      	mov	r1, r3
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fea8 	bl	8002634 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80028e4:	7abb      	ldrb	r3, [r7, #10]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80028ea:	7abb      	ldrb	r3, [r7, #10]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1eb      	bne.n	80028c8 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fec2 	bl	800267a <u8x8_cad_EndTransfer>
      break;
 80028f6:	e001      	b.n	80028fc <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80028fc:	2301      	movs	r3, #1
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	08007310 	.word	0x08007310
 800290c:	08007318 	.word	0x08007318
 8002910:	08007320 	.word	0x08007320
 8002914:	08007328 	.word	0x08007328

08002918 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	72fb      	strb	r3, [r7, #11]
 8002926:	4613      	mov	r3, r2
 8002928:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800292a:	7aba      	ldrb	r2, [r7, #10]
 800292c:	7af9      	ldrb	r1, [r7, #11]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff ff49 	bl	80027c8 <u8x8_d_ssd1306_sh1106_generic>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800293c:	2301      	movs	r3, #1
 800293e:	e014      	b.n	800296a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	2b09      	cmp	r3, #9
 8002944:	d009      	beq.n	800295a <u8x8_d_ssd1306_128x64_noname+0x42>
 8002946:	2b0a      	cmp	r3, #10
 8002948:	d10c      	bne.n	8002964 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f82a 	bl	80029a4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002950:	4908      	ldr	r1, [pc, #32]	@ (8002974 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff fea1 	bl	800269a <u8x8_cad_SendSequence>
      break;
 8002958:	e006      	b.n	8002968 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800295a:	4907      	ldr	r1, [pc, #28]	@ (8002978 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f80d 	bl	800297c <u8x8_d_helper_display_setup_memory>
      break;
 8002962:	e001      	b.n	8002968 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	080072d8 	.word	0x080072d8
 8002978:	08007330 	.word	0x08007330

0800297c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	7c9a      	ldrb	r2, [r3, #18]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695c      	ldr	r4, [r3, #20]
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	2128      	movs	r1, #40	@ 0x28
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68dc      	ldr	r4, [r3, #12]
 80029be:	2300      	movs	r3, #0
 80029c0:	2200      	movs	r2, #0
 80029c2:	2114      	movs	r1, #20
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80029c8:	2201      	movs	r2, #1
 80029ca:	214b      	movs	r1, #75	@ 0x4b
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f886 	bl	8002ade <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	461a      	mov	r2, r3
 80029da:	2129      	movs	r1, #41	@ 0x29
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f87e 	bl	8002ade <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	214b      	movs	r1, #75	@ 0x4b
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f879 	bl	8002ade <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	791b      	ldrb	r3, [r3, #4]
 80029f2:	461a      	mov	r2, r3
 80029f4:	2129      	movs	r1, #41	@ 0x29
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f871 	bl	8002ade <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80029fc:	2201      	movs	r2, #1
 80029fe:	214b      	movs	r1, #75	@ 0x4b
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f86c 	bl	8002ade <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2129      	movs	r1, #41	@ 0x29
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f864 	bl	8002ade <u8x8_gpio_call>
}    
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002a1e:	b590      	push	{r4, r7, lr}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	4608      	mov	r0, r1
 8002a28:	4611      	mov	r1, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	70fb      	strb	r3, [r7, #3]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70bb      	strb	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002a3c:	78bb      	ldrb	r3, [r7, #2]
 8002a3e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689c      	ldr	r4, [r3, #8]
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	2201      	movs	r2, #1
 8002a52:	210f      	movs	r1, #15
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	47a0      	blx	r4
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}

08002a62 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002a62:	b590      	push	{r4, r7, lr}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689c      	ldr	r4, [r3, #8]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2200      	movs	r2, #0
 8002a72:	2109      	movs	r1, #9
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	47a0      	blx	r4
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689c      	ldr	r4, [r3, #8]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	210a      	movs	r1, #10
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}

08002a9e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002a9e:	b590      	push	{r4, r7, lr}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689c      	ldr	r4, [r3, #8]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	210b      	movs	r1, #11
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	47a0      	blx	r4
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689c      	ldr	r4, [r3, #8]
 8002acc:	2300      	movs	r3, #0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2110      	movs	r1, #16
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	47a0      	blx	r4
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}

08002ade <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002ade:	b590      	push	{r4, r7, lr}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695c      	ldr	r4, [r3, #20]
 8002af2:	78ba      	ldrb	r2, [r7, #2]
 8002af4:	78f9      	ldrb	r1, [r7, #3]
 8002af6:	2300      	movs	r3, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	47a0      	blx	r4
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}

08002b04 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	72fb      	strb	r3, [r7, #11]
 8002b12:	4613      	mov	r3, r2
 8002b14:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a11      	ldr	r2, [pc, #68]	@ (8002b7c <u8x8_SetupDefaults+0x58>)
 8002b36:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <u8x8_SetupDefaults+0x58>)
 8002b3c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <u8x8_SetupDefaults+0x58>)
 8002b42:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <u8x8_SetupDefaults+0x58>)
 8002b48:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	22ff      	movs	r2, #255	@ 0xff
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	22ff      	movs	r2, #255	@ 0xff
 8002b6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	08002b05 	.word	0x08002b05

08002b80 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ffc8 	bl	8002b24 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff ff58 	bl	8002a62 <u8x8_SetupMemory>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc0:	f7fe fa6e 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc4:	480c      	ldr	r0, [pc, #48]	@ (8002bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc6:	490d      	ldr	r1, [pc, #52]	@ (8002bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8002c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bea:	f003 fec5 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bee:	f7fd fd35 	bl	800065c <main>
  bx  lr    
 8002bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bfc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002c00:	0801a7ec 	.word	0x0801a7ec
  ldr r2, =_sbss
 8002c04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002c08:	200047a8 	.word	0x200047a8

08002c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c0c:	e7fe      	b.n	8002c0c <ADC_IRQHandler>
	...

08002c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_Init+0x40>)
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <HAL_Init+0x40>)
 8002c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <HAL_Init+0x40>)
 8002c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c38:	2003      	movs	r0, #3
 8002c3a:	f000 fd51 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3e:	200f      	movs	r0, #15
 8002c40:	f000 f808 	bl	8002c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c44:	f7fe f8a4 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00

08002c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x54>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_InitTick+0x58>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fd69 	bl	800374a <HAL_SYSTICK_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00e      	b.n	8002ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	d80a      	bhi.n	8002c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f000 fd31 	bl	80036f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <HAL_InitTick+0x5c>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	2000000c 	.word	0x2000000c
 8002cb0:	20000008 	.word	0x20000008

08002cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x20>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000000c 	.word	0x2000000c
 8002cd8:	2000465c 	.word	0x2000465c

08002cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_GetTick+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000465c 	.word	0x2000465c

08002cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff ffee 	bl	8002cdc <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d005      	beq.n	8002d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_Delay+0x44>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d1a:	bf00      	nop
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d8f7      	bhi.n	8002d1c <HAL_Delay+0x28>
  {
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e033      	b.n	8002dba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f840 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d82:	f023 0302 	bic.w	r3, r3, #2
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa58 	bl	8003244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002daa:	e001      	b.n	8002db0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ce      	b.n	8002f80 <HAL_ADC_Start_DMA+0x1bc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d018      	beq.n	8002e2a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e08:	4b5f      	ldr	r3, [pc, #380]	@ (8002f88 <HAL_ADC_Start_DMA+0x1c4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8002f8c <HAL_ADC_Start_DMA+0x1c8>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9a      	lsrs	r2, r3, #18
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e1c:	e002      	b.n	8002e24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f9      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e38:	d107      	bne.n	8002e4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e48:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 8086 	bne.w	8002f66 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e98:	d106      	bne.n	8002ea8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f023 0206 	bic.w	r2, r3, #6
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ea6:	e002      	b.n	8002eae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb6:	4b36      	ldr	r3, [pc, #216]	@ (8002f90 <HAL_ADC_Start_DMA+0x1cc>)
 8002eb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <HAL_ADC_Start_DMA+0x1d0>)
 8002ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_ADC_Start_DMA+0x1d4>)
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	4a33      	ldr	r2, [pc, #204]	@ (8002f9c <HAL_ADC_Start_DMA+0x1d8>)
 8002ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002eda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002eea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	334c      	adds	r3, #76	@ 0x4c
 8002f06:	4619      	mov	r1, r3
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f000 fcd8 	bl	80038c0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d129      	bne.n	8002f7e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e020      	b.n	8002f7e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <HAL_ADC_Start_DMA+0x1dc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_Start_DMA+0x1ba>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e00b      	b.n	8002f7e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	40012300 	.word	0x40012300
 8002f94:	0800343d 	.word	0x0800343d
 8002f98:	080034f7 	.word	0x080034f7
 8002f9c:	08003513 	.word	0x08003513
 8002fa0:	40012000 	.word	0x40012000

08002fa4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e113      	b.n	8003224 <HAL_ADC_ConfigChannel+0x244>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d925      	bls.n	8003058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	3b1e      	subs	r3, #30
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68d9      	ldr	r1, [r3, #12]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	4603      	mov	r3, r0
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4403      	add	r3, r0
 800304a:	3b1e      	subs	r3, #30
 800304c:	409a      	lsls	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e022      	b.n	800309e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	4603      	mov	r3, r0
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4403      	add	r3, r0
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d824      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b05      	subs	r3, #5
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80030ee:	e04c      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d824      	bhi.n	8003142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b23      	subs	r3, #35	@ 0x23
 800310a:	221f      	movs	r2, #31
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43da      	mvns	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b23      	subs	r3, #35	@ 0x23
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003140:	e023      	b.n	800318a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b41      	subs	r3, #65	@ 0x41
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	400a      	ands	r2, r1
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	4618      	mov	r0, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b41      	subs	r3, #65	@ 0x41
 800317e:	fa00 f203 	lsl.w	r2, r0, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318a:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <HAL_ADC_ConfigChannel+0x250>)
 800318c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_ADC_ConfigChannel+0x254>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10f      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d10b      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_ADC_ConfigChannel+0x254>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12b      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <HAL_ADC_ConfigChannel+0x258>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x1f4>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b11      	cmp	r3, #17
 80031d2:	d122      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <HAL_ADC_ConfigChannel+0x258>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d111      	bne.n	800321a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_ADC_ConfigChannel+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_ADC_ConfigChannel+0x260>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9a      	lsrs	r2, r3, #18
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800320c:	e002      	b.n	8003214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3b01      	subs	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f9      	bne.n	800320e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40012300 	.word	0x40012300
 8003234:	40012000 	.word	0x40012000
 8003238:	10000012 	.word	0x10000012
 800323c:	20000004 	.word	0x20000004
 8003240:	431bde83 	.word	0x431bde83

08003244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324c:	4b79      	ldr	r3, [pc, #484]	@ (8003434 <ADC_Init+0x1f0>)
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800329c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <ADC_Init+0x1f4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800330c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	e00f      	b.n	8003342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0202 	bic.w	r2, r2, #2
 8003350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e1b      	ldrb	r3, [r3, #24]
 800335c:	005a      	lsls	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800338e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	3b01      	subs	r3, #1
 800339c:	035a      	lsls	r2, r3, #13
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e007      	b.n	80033b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	051a      	lsls	r2, r3, #20
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033fa:	025a      	lsls	r2, r3, #9
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	029a      	lsls	r2, r3, #10
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40012300 	.word	0x40012300
 8003438:	0f000001 	.word	0x0f000001

0800343c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13c      	bne.n	80034d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12b      	bne.n	80034c8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d127      	bne.n	80034c8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003490:	2b00      	cmp	r3, #0
 8003492:	d119      	bne.n	80034c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0220 	bic.w	r2, r2, #32
 80034a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fd6b 	bl	8002fa4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ce:	e00e      	b.n	80034ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fd75 	bl	8002fcc <HAL_ADC_ErrorCallback>
}
 80034e2:	e004      	b.n	80034ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fd57 	bl	8002fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	@ 0x40
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f043 0204 	orr.w	r2, r3, #4
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fd4a 	bl	8002fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	@ (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	@ (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <SysTick_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ba:	210f      	movs	r1, #15
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f7ff ff8e 	bl	80035e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <SysTick_Config+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <SysTick_Config+0x40>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff29 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003708:	f7ff ff3e 	bl	8003588 <__NVIC_GetPriorityGrouping>
 800370c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff8e 	bl	8003634 <NVIC_EncodePriority>
 8003718:	4602      	mov	r2, r0
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff5d 	bl	80035e0 <__NVIC_SetPriority>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff31 	bl	80035a4 <__NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ffa2 	bl	800369c <SysTick_Config>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff fab4 	bl	8002cdc <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e099      	b.n	80038b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a0:	e00f      	b.n	80037c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a2:	f7ff fa9b 	bl	8002cdc <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d908      	bls.n	80037c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2203      	movs	r2, #3
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e078      	b.n	80038b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e8      	bne.n	80037a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <HAL_DMA_Init+0x158>)
 80037dc:	4013      	ands	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	2b04      	cmp	r3, #4
 800381a:	d107      	bne.n	800382c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4313      	orrs	r3, r2
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0307 	bic.w	r3, r3, #7
 8003842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b04      	cmp	r3, #4
 8003854:	d117      	bne.n	8003886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa6f 	bl	8003d4c <DMA_CheckFifoParam>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2240      	movs	r2, #64	@ 0x40
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003882:	2301      	movs	r3, #1
 8003884:	e016      	b.n	80038b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa26 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 8003894:	4603      	mov	r3, r0
 8003896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	223f      	movs	r2, #63	@ 0x3f
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	f010803f 	.word	0xf010803f

080038c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_Start_IT+0x26>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e040      	b.n	8003968 <HAL_DMA_Start_IT+0xa8>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d12f      	bne.n	800395a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f9b8 	bl	8003c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	223f      	movs	r2, #63	@ 0x3f
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0216 	orr.w	r2, r2, #22
 800392e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e005      	b.n	8003966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800397c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb8 <HAL_DMA_IRQHandler+0x248>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a8e      	ldr	r2, [pc, #568]	@ (8003bbc <HAL_DMA_IRQHandler+0x24c>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	2208      	movs	r2, #8
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	2208      	movs	r2, #8
 80039ca:	409a      	lsls	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	2204      	movs	r2, #4
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	2204      	movs	r2, #4
 8003a36:	409a      	lsls	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d043      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d024      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e01f      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0208 	bic.w	r2, r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 808f 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8087 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2220      	movs	r2, #32
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d136      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0216 	bic.w	r2, r2, #22
 8003b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x1da>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0208 	bic.w	r2, r2, #8
 8003b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	223f      	movs	r2, #63	@ 0x3f
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d07e      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
        }
        return;
 8003b86:	e079      	b.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
 8003bb4:	e02c      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
 8003bb6:	bf00      	nop
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
 8003bd0:	e01e      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10f      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0210 	bic.w	r2, r2, #16
 8003bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d032      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2205      	movs	r2, #5
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d307      	bcc.n	8003c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f2      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x2cc>
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c7c:	bf00      	nop
    }
  }
}
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cfa:	4a13      	ldr	r2, [pc, #76]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	08007348 	.word	0x08007348

08003d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
    }
  } 
  
  return status; 
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e159      	b.n	8004114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e60:	2201      	movs	r2, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 8148 	bne.w	800410e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d005      	beq.n	8003e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d130      	bne.n	8003ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 0201 	and.w	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d017      	beq.n	8003f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d123      	bne.n	8003f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	08da      	lsrs	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3208      	adds	r2, #8
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a2 	beq.w	800410e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b57      	ldr	r3, [pc, #348]	@ (800412c <HAL_GPIO_Init+0x2e8>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	4a56      	ldr	r2, [pc, #344]	@ (800412c <HAL_GPIO_Init+0x2e8>)
 8003fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fda:	4b54      	ldr	r3, [pc, #336]	@ (800412c <HAL_GPIO_Init+0x2e8>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe6:	4a52      	ldr	r2, [pc, #328]	@ (8004130 <HAL_GPIO_Init+0x2ec>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a49      	ldr	r2, [pc, #292]	@ (8004134 <HAL_GPIO_Init+0x2f0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d019      	beq.n	8004046 <HAL_GPIO_Init+0x202>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <HAL_GPIO_Init+0x2f4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_GPIO_Init+0x1fe>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a47      	ldr	r2, [pc, #284]	@ (800413c <HAL_GPIO_Init+0x2f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00d      	beq.n	800403e <HAL_GPIO_Init+0x1fa>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a46      	ldr	r2, [pc, #280]	@ (8004140 <HAL_GPIO_Init+0x2fc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <HAL_GPIO_Init+0x1f6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a45      	ldr	r2, [pc, #276]	@ (8004144 <HAL_GPIO_Init+0x300>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_GPIO_Init+0x1f2>
 8004032:	2304      	movs	r3, #4
 8004034:	e008      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004036:	2307      	movs	r3, #7
 8004038:	e006      	b.n	8004048 <HAL_GPIO_Init+0x204>
 800403a:	2303      	movs	r3, #3
 800403c:	e004      	b.n	8004048 <HAL_GPIO_Init+0x204>
 800403e:	2302      	movs	r3, #2
 8004040:	e002      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x204>
 8004046:	2300      	movs	r3, #0
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f002 0203 	and.w	r2, r2, #3
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	4093      	lsls	r3, r2
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004058:	4935      	ldr	r1, [pc, #212]	@ (8004130 <HAL_GPIO_Init+0x2ec>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004066:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <HAL_GPIO_Init+0x304>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800408a:	4a2f      	ldr	r2, [pc, #188]	@ (8004148 <HAL_GPIO_Init+0x304>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004090:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <HAL_GPIO_Init+0x304>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b4:	4a24      	ldr	r2, [pc, #144]	@ (8004148 <HAL_GPIO_Init+0x304>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ba:	4b23      	ldr	r3, [pc, #140]	@ (8004148 <HAL_GPIO_Init+0x304>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <HAL_GPIO_Init+0x304>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e4:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <HAL_GPIO_Init+0x304>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004108:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <HAL_GPIO_Init+0x304>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	f67f aea2 	bls.w	8003e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	@ 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40013800 	.word	0x40013800
 8004134:	40020000 	.word	0x40020000
 8004138:	40020400 	.word	0x40020400
 800413c:	40020800 	.word	0x40020800
 8004140:	40020c00 	.word	0x40020c00
 8004144:	40021000 	.word	0x40021000
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e267      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d075      	beq.n	800428a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419e:	4b88      	ldr	r3, [pc, #544]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b85      	ldr	r3, [pc, #532]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d112      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b6:	4b82      	ldr	r3, [pc, #520]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c2:	d10b      	bne.n	80041dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	4b7e      	ldr	r3, [pc, #504]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d05b      	beq.n	8004288 <HAL_RCC_OscConfig+0x108>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d157      	bne.n	8004288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e242      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e4:	d106      	bne.n	80041f4 <HAL_RCC_OscConfig+0x74>
 80041e6:	4b76      	ldr	r3, [pc, #472]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a75      	ldr	r2, [pc, #468]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e01d      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x98>
 80041fe:	4b70      	ldr	r3, [pc, #448]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6f      	ldr	r2, [pc, #444]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b6d      	ldr	r3, [pc, #436]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a6c      	ldr	r2, [pc, #432]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0xb0>
 8004218:	4b69      	ldr	r3, [pc, #420]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a68      	ldr	r2, [pc, #416]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b66      	ldr	r3, [pc, #408]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800422e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fe fd50 	bl	8002cdc <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fe fd4c 	bl	8002cdc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	@ 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e207      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b5b      	ldr	r3, [pc, #364]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0xc0>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fd3c 	bl	8002cdc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fe fd38 	bl	8002cdc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	@ 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1f3      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	4b51      	ldr	r3, [pc, #324]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0xe8>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d063      	beq.n	800435e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004296:	4b4a      	ldr	r3, [pc, #296]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d11c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e1c7      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d2:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4937      	ldr	r1, [pc, #220]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	e03a      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f0:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_RCC_OscConfig+0x244>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fe fcf1 	bl	8002cdc <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fe fced 	bl	8002cdc <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1a8      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b28      	ldr	r3, [pc, #160]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4925      	ldr	r1, [pc, #148]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004332:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_RCC_OscConfig+0x244>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fcd0 	bl	8002cdc <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004340:	f7fe fccc 	bl	8002cdc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e187      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d036      	beq.n	80043d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004372:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <HAL_RCC_OscConfig+0x248>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fe fcb0 	bl	8002cdc <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004380:	f7fe fcac 	bl	8002cdc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e167      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_OscConfig+0x240>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x200>
 800439e:	e01b      	b.n	80043d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_OscConfig+0x248>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a6:	f7fe fc99 	bl	8002cdc <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ac:	e00e      	b.n	80043cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ae:	f7fe fc95 	bl	8002cdc <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d907      	bls.n	80043cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e150      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470000 	.word	0x42470000
 80043c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ea      	bne.n	80043ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8097 	beq.w	8004514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b7d      	ldr	r3, [pc, #500]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	4a7c      	ldr	r2, [pc, #496]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	@ 0x40
 8004406:	4b7a      	ldr	r3, [pc, #488]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b77      	ldr	r3, [pc, #476]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004422:	4b74      	ldr	r3, [pc, #464]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a73      	ldr	r2, [pc, #460]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fe fc55 	bl	8002cdc <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fe fc51 	bl	8002cdc <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e10c      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b6a      	ldr	r3, [pc, #424]	@ (80045f4 <HAL_RCC_OscConfig+0x474>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x2ea>
 800445c:	4b64      	ldr	r3, [pc, #400]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	4a63      	ldr	r2, [pc, #396]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	@ 0x70
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b05      	cmp	r3, #5
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x30c>
 8004472:	4b5f      	ldr	r3, [pc, #380]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a5e      	ldr	r2, [pc, #376]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
 800447e:	4b5c      	ldr	r3, [pc, #368]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	4a5b      	ldr	r2, [pc, #364]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	@ 0x70
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0x324>
 800448c:	4b58      	ldr	r3, [pc, #352]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a57      	ldr	r2, [pc, #348]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
 8004498:	4b55      	ldr	r3, [pc, #340]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800449e:	f023 0304 	bic.w	r3, r3, #4
 80044a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe fc16 	bl	8002cdc <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fe fc12 	bl	8002cdc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0cb      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ee      	beq.n	80044b4 <HAL_RCC_OscConfig+0x334>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fe fc00 	bl	8002cdc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fe fbfc 	bl	8002cdc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0b5      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	4b3e      	ldr	r3, [pc, #248]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1ee      	bne.n	80044e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	4a38      	ldr	r2, [pc, #224]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a1 	beq.w	8004660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800451e:	4b34      	ldr	r3, [pc, #208]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b08      	cmp	r3, #8
 8004528:	d05c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d141      	bne.n	80045b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b31      	ldr	r3, [pc, #196]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fe fbd0 	bl	8002cdc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe fbcc 	bl	8002cdc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e087      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	491b      	ldr	r1, [pc, #108]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fe fba5 	bl	8002cdc <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004596:	f7fe fba1 	bl	8002cdc <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e05c      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x416>
 80045b4:	e054      	b.n	8004660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <HAL_RCC_OscConfig+0x478>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fb8e 	bl	8002cdc <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fe fb8a 	bl	8002cdc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e045      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCC_OscConfig+0x470>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x444>
 80045e2:	e03d      	b.n	8004660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e038      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40007000 	.word	0x40007000
 80045f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x4ec>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d028      	beq.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d121      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d11a      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800462c:	4013      	ands	r3, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004634:	4293      	cmp	r3, r2
 8004636:	d111      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	3b01      	subs	r3, #1
 8004646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0cc      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b68      	ldr	r3, [pc, #416]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90c      	bls.n	80046ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b65      	ldr	r3, [pc, #404]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b63      	ldr	r3, [pc, #396]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b8      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c4:	4b59      	ldr	r3, [pc, #356]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a58      	ldr	r2, [pc, #352]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046dc:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a52      	ldr	r2, [pc, #328]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	4b50      	ldr	r3, [pc, #320]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	494d      	ldr	r1, [pc, #308]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d044      	beq.n	8004790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b47      	ldr	r3, [pc, #284]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b3f      	ldr	r3, [pc, #252]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b3b      	ldr	r3, [pc, #236]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e067      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b37      	ldr	r3, [pc, #220]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4934      	ldr	r1, [pc, #208]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7fe fabc 	bl	8002cdc <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fe fab8 	bl	8002cdc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d20c      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e032      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4916      	ldr	r1, [pc, #88]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	490e      	ldr	r1, [pc, #56]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047f6:	f000 f821 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	490a      	ldr	r1, [pc, #40]	@ (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	5ccb      	ldrb	r3, [r1, r3]
 800480a:	fa22 f303 	lsr.w	r3, r2, r3
 800480e:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004812:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fa1c 	bl	8002c54 <HAL_InitTick>

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023c00 	.word	0x40023c00
 800482c:	40023800 	.word	0x40023800
 8004830:	080072bc 	.word	0x080072bc
 8004834:	20000004 	.word	0x20000004
 8004838:	20000008 	.word	0x20000008

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b090      	sub	sp, #64	@ 0x40
 8004842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800484c:	2300      	movs	r3, #0
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004854:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d00d      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x40>
 8004860:	2b08      	cmp	r3, #8
 8004862:	f200 80a1 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x34>
 800486a:	2b04      	cmp	r3, #4
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x3a>
 800486e:	e09b      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004872:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004874:	e09b      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004876:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800487a:	e098      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800487c:	4b4f      	ldr	r3, [pc, #316]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004886:	4b4d      	ldr	r3, [pc, #308]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d028      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004892:	4b4a      	ldr	r3, [pc, #296]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	2200      	movs	r2, #0
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	627a      	str	r2, [r7, #36]	@ 0x24
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048a4:	2100      	movs	r1, #0
 80048a6:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80048a8:	fb03 f201 	mul.w	r2, r3, r1
 80048ac:	2300      	movs	r3, #0
 80048ae:	fb00 f303 	mul.w	r3, r0, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	4a43      	ldr	r2, [pc, #268]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80048b6:	fba0 1202 	umull	r1, r2, r0, r2
 80048ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048bc:	460a      	mov	r2, r1
 80048be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c2:	4413      	add	r3, r2
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c8:	2200      	movs	r2, #0
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	61fa      	str	r2, [r7, #28]
 80048ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048d6:	f7fb fd33 	bl	8000340 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4613      	mov	r3, r2
 80048e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e2:	e053      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	2200      	movs	r2, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	617a      	str	r2, [r7, #20]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048f6:	f04f 0b00 	mov.w	fp, #0
 80048fa:	4652      	mov	r2, sl
 80048fc:	465b      	mov	r3, fp
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	ebb2 080a 	subs.w	r8, r2, sl
 8004916:	eb63 090b 	sbc.w	r9, r3, fp
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800492a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800492e:	ebb2 0408 	subs.w	r4, r2, r8
 8004932:	eb63 0509 	sbc.w	r5, r3, r9
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	00eb      	lsls	r3, r5, #3
 8004940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004944:	00e2      	lsls	r2, r4, #3
 8004946:	4614      	mov	r4, r2
 8004948:	461d      	mov	r5, r3
 800494a:	eb14 030a 	adds.w	r3, r4, sl
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	eb45 030b 	adc.w	r3, r5, fp
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004962:	4629      	mov	r1, r5
 8004964:	028b      	lsls	r3, r1, #10
 8004966:	4621      	mov	r1, r4
 8004968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496c:	4621      	mov	r1, r4
 800496e:	028a      	lsls	r2, r1, #10
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004976:	2200      	movs	r2, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	60fa      	str	r2, [r7, #12]
 800497c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004980:	f7fb fcde 	bl	8000340 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x180>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800499c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3740      	adds	r7, #64	@ 0x40
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	017d7840 	.word	0x017d7840

080049c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07b      	b.n	8004ad2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ea:	d009      	beq.n	8004a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
 80049f2:	e005      	b.n	8004a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fa58 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	ea42 0103 	orr.w	r1, r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0104 	and.w	r1, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	f003 0210 	and.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b088      	sub	sp, #32
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_SPI_Transmit+0x22>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e12d      	b.n	8004d58 <HAL_SPI_Transmit+0x27e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b04:	f7fe f8ea 	bl	8002cdc <HAL_GetTick>
 8004b08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d002      	beq.n	8004b20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b1e:	e116      	b.n	8004d4e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x52>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b30:	e10d      	b.n	8004d4e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2203      	movs	r2, #3
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b78:	d10f      	bne.n	8004b9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d007      	beq.n	8004bb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc0:	d14f      	bne.n	8004c62 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Transmit+0xf6>
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d142      	bne.n	8004c56 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bf4:	e02f      	b.n	8004c56 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d112      	bne.n	8004c2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	881a      	ldrh	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c28:	e015      	b.n	8004c56 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c2a:	f7fe f857 	bl	8002cdc <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d803      	bhi.n	8004c42 <HAL_SPI_Transmit+0x168>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d102      	bne.n	8004c48 <HAL_SPI_Transmit+0x16e>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c54:	e07b      	b.n	8004d4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ca      	bne.n	8004bf6 <HAL_SPI_Transmit+0x11c>
 8004c60:	e050      	b.n	8004d04 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Transmit+0x196>
 8004c6a:	8afb      	ldrh	r3, [r7, #22]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d144      	bne.n	8004cfa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c96:	e030      	b.n	8004cfa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d113      	bne.n	8004cce <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ccc:	e015      	b.n	8004cfa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fe f805 	bl	8002cdc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Transmit+0x20c>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Transmit+0x212>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004cf8:	e029      	b.n	8004d4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1c9      	bne.n	8004c98 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f8b1 	bl	8004e70 <SPI_EndRxTxTransaction>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e003      	b.n	8004d4e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d70:	f7fd ffb4 	bl	8002cdc <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d80:	f7fd ffac 	bl	8002cdc <HAL_GetTick>
 8004d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d86:	4b39      	ldr	r3, [pc, #228]	@ (8004e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	015b      	lsls	r3, r3, #5
 8004d8c:	0d1b      	lsrs	r3, r3, #20
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d96:	e054      	b.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d050      	beq.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004da0:	f7fd ff9c 	bl	8002cdc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d902      	bls.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d13d      	bne.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dce:	d111      	bne.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd8:	d004      	beq.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de2:	d107      	bne.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfc:	d10f      	bne.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e017      	b.n	8004e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d19b      	bne.n	8004d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000004 	.word	0x20000004

08004e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2201      	movs	r2, #1
 8004e84:	2102      	movs	r1, #2
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ff6a 	bl	8004d60 <SPI_WaitFlagStateUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e032      	b.n	8004f08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <SPI_EndRxTxTransaction+0xa0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <SPI_EndRxTxTransaction+0xa4>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0d5b      	lsrs	r3, r3, #21
 8004eae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec0:	d112      	bne.n	8004ee8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	@ 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff ff47 	bl	8004d60 <SPI_WaitFlagStateUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e00f      	b.n	8004f08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b80      	cmp	r3, #128	@ 0x80
 8004f00:	d0f2      	beq.n	8004ee8 <SPI_EndRxTxTransaction+0x78>
 8004f02:	e000      	b.n	8004f06 <SPI_EndRxTxTransaction+0x96>
        break;
 8004f04:	bf00      	nop
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000004 	.word	0x20000004
 8004f14:	165e9f81 	.word	0x165e9f81

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e041      	b.n	8004fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc f80e 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fa70 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d001      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e044      	b.n	800505a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	@ (8005068 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d013      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <HAL_TIM_Base_Start_IT+0xb4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <HAL_TIM_Base_Start_IT+0xb8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <HAL_TIM_Base_Start_IT+0xbc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <HAL_TIM_Base_Start_IT+0xc0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d111      	bne.n	8005048 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d010      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	e007      	b.n	8005058 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40014000 	.word	0x40014000

0800507c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0202 	mvn.w	r2, #2
 80050b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f999 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f98b 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f99c 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0204 	mvn.w	r2, #4
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f973 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f965 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f976 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0208 	mvn.w	r2, #8
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2204      	movs	r2, #4
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f94d 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f93f 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f950 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d020      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01b      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0210 	mvn.w	r2, #16
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2208      	movs	r2, #8
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f927 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f919 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f92a 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0201 	mvn.w	r2, #1
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fa24 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fab6 	bl	8005778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8fb 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0220 	mvn.w	r2, #32
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa88 	bl	8005764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIM_ConfigClockSource+0x1c>
 8005274:	2302      	movs	r3, #2
 8005276:	e0b4      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x186>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800529e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b0:	d03e      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0xd4>
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b6:	f200 8087 	bhi.w	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052be:	f000 8086 	beq.w	80053ce <HAL_TIM_ConfigClockSource+0x172>
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c6:	d87f      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b70      	cmp	r3, #112	@ 0x70
 80052ca:	d01a      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0xa6>
 80052cc:	2b70      	cmp	r3, #112	@ 0x70
 80052ce:	d87b      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b60      	cmp	r3, #96	@ 0x60
 80052d2:	d050      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x11a>
 80052d4:	2b60      	cmp	r3, #96	@ 0x60
 80052d6:	d877      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b50      	cmp	r3, #80	@ 0x50
 80052da:	d03c      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xfa>
 80052dc:	2b50      	cmp	r3, #80	@ 0x50
 80052de:	d873      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	d058      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x13a>
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d86f      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b30      	cmp	r3, #48	@ 0x30
 80052ea:	d064      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x15a>
 80052ec:	2b30      	cmp	r3, #48	@ 0x30
 80052ee:	d86b      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d060      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x15a>
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d867      	bhi.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05c      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x15a>
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d05a      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005300:	e062      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005312:	f000 f999 	bl	8005648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	609a      	str	r2, [r3, #8]
      break;
 800532e:	e04f      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005340:	f000 f982 	bl	8005648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005352:	609a      	str	r2, [r3, #8]
      break;
 8005354:	e03c      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	461a      	mov	r2, r3
 8005364:	f000 f8f6 	bl	8005554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2150      	movs	r1, #80	@ 0x50
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f94f 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 8005374:	e02c      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005382:	461a      	mov	r2, r3
 8005384:	f000 f915 	bl	80055b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2160      	movs	r1, #96	@ 0x60
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f93f 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 8005394:	e01c      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 f8d6 	bl	8005554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2140      	movs	r1, #64	@ 0x40
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f92f 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 80053b4:	e00c      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f000 f926 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 80053c6:	e003      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      break;
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3a      	ldr	r2, [pc, #232]	@ (8005538 <TIM_Base_SetConfig+0xfc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00f      	beq.n	8005474 <TIM_Base_SetConfig+0x38>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545a:	d00b      	beq.n	8005474 <TIM_Base_SetConfig+0x38>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a37      	ldr	r2, [pc, #220]	@ (800553c <TIM_Base_SetConfig+0x100>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_Base_SetConfig+0x38>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a36      	ldr	r2, [pc, #216]	@ (8005540 <TIM_Base_SetConfig+0x104>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0x38>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a35      	ldr	r2, [pc, #212]	@ (8005544 <TIM_Base_SetConfig+0x108>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2b      	ldr	r2, [pc, #172]	@ (8005538 <TIM_Base_SetConfig+0xfc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a28      	ldr	r2, [pc, #160]	@ (800553c <TIM_Base_SetConfig+0x100>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a27      	ldr	r2, [pc, #156]	@ (8005540 <TIM_Base_SetConfig+0x104>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a26      	ldr	r2, [pc, #152]	@ (8005544 <TIM_Base_SetConfig+0x108>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a25      	ldr	r2, [pc, #148]	@ (8005548 <TIM_Base_SetConfig+0x10c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a24      	ldr	r2, [pc, #144]	@ (800554c <TIM_Base_SetConfig+0x110>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a23      	ldr	r2, [pc, #140]	@ (8005550 <TIM_Base_SetConfig+0x114>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005538 <TIM_Base_SetConfig+0xfc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d103      	bne.n	800550c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]
  }
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40014000 	.word	0x40014000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800

08005554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800557e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 030a 	bic.w	r3, r3, #10
 8005590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f023 0210 	bic.w	r2, r3, #16
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	031b      	lsls	r3, r3, #12
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	f043 0307 	orr.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	431a      	orrs	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e050      	b.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1c      	ldr	r2, [pc, #112]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d013      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a18      	ldr	r2, [pc, #96]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d009      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a15      	ldr	r2, [pc, #84]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10c      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40014000 	.word	0x40014000

08005764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <arm_rfft_fast_init_f32>:
 800578c:	084b      	lsrs	r3, r1, #1
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	b410      	push	{r4}
 8005792:	8201      	strh	r1, [r0, #16]
 8005794:	8003      	strh	r3, [r0, #0]
 8005796:	d046      	beq.n	8005826 <arm_rfft_fast_init_f32+0x9a>
 8005798:	d916      	bls.n	80057c8 <arm_rfft_fast_init_f32+0x3c>
 800579a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800579e:	d03c      	beq.n	800581a <arm_rfft_fast_init_f32+0x8e>
 80057a0:	d928      	bls.n	80057f4 <arm_rfft_fast_init_f32+0x68>
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a6:	d01f      	beq.n	80057e8 <arm_rfft_fast_init_f32+0x5c>
 80057a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ac:	d112      	bne.n	80057d4 <arm_rfft_fast_init_f32+0x48>
 80057ae:	4920      	ldr	r1, [pc, #128]	@ (8005830 <arm_rfft_fast_init_f32+0xa4>)
 80057b0:	4a20      	ldr	r2, [pc, #128]	@ (8005834 <arm_rfft_fast_init_f32+0xa8>)
 80057b2:	4b21      	ldr	r3, [pc, #132]	@ (8005838 <arm_rfft_fast_init_f32+0xac>)
 80057b4:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80057b8:	8184      	strh	r4, [r0, #12]
 80057ba:	6081      	str	r1, [r0, #8]
 80057bc:	6042      	str	r2, [r0, #4]
 80057be:	6143      	str	r3, [r0, #20]
 80057c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c4:	2000      	movs	r0, #0
 80057c6:	4770      	bx	lr
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d01c      	beq.n	8005806 <arm_rfft_fast_init_f32+0x7a>
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	d006      	beq.n	80057de <arm_rfft_fast_init_f32+0x52>
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d01d      	beq.n	8005810 <arm_rfft_fast_init_f32+0x84>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	2438      	movs	r4, #56	@ 0x38
 80057e0:	4916      	ldr	r1, [pc, #88]	@ (800583c <arm_rfft_fast_init_f32+0xb0>)
 80057e2:	4a17      	ldr	r2, [pc, #92]	@ (8005840 <arm_rfft_fast_init_f32+0xb4>)
 80057e4:	4b17      	ldr	r3, [pc, #92]	@ (8005844 <arm_rfft_fast_init_f32+0xb8>)
 80057e6:	e7e7      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 80057e8:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80057ec:	4916      	ldr	r1, [pc, #88]	@ (8005848 <arm_rfft_fast_init_f32+0xbc>)
 80057ee:	4a17      	ldr	r2, [pc, #92]	@ (800584c <arm_rfft_fast_init_f32+0xc0>)
 80057f0:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <arm_rfft_fast_init_f32+0xc4>)
 80057f2:	e7e1      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 80057f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f8:	d1ec      	bne.n	80057d4 <arm_rfft_fast_init_f32+0x48>
 80057fa:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80057fe:	4915      	ldr	r1, [pc, #84]	@ (8005854 <arm_rfft_fast_init_f32+0xc8>)
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <arm_rfft_fast_init_f32+0xcc>)
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <arm_rfft_fast_init_f32+0xd0>)
 8005804:	e7d8      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 8005806:	2430      	movs	r4, #48	@ 0x30
 8005808:	4915      	ldr	r1, [pc, #84]	@ (8005860 <arm_rfft_fast_init_f32+0xd4>)
 800580a:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <arm_rfft_fast_init_f32+0xd8>)
 800580c:	4b16      	ldr	r3, [pc, #88]	@ (8005868 <arm_rfft_fast_init_f32+0xdc>)
 800580e:	e7d3      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 8005810:	2414      	movs	r4, #20
 8005812:	4916      	ldr	r1, [pc, #88]	@ (800586c <arm_rfft_fast_init_f32+0xe0>)
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <arm_rfft_fast_init_f32+0xe4>)
 8005816:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <arm_rfft_fast_init_f32+0xe8>)
 8005818:	e7ce      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 800581a:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800581e:	4916      	ldr	r1, [pc, #88]	@ (8005878 <arm_rfft_fast_init_f32+0xec>)
 8005820:	4a16      	ldr	r2, [pc, #88]	@ (800587c <arm_rfft_fast_init_f32+0xf0>)
 8005822:	4b17      	ldr	r3, [pc, #92]	@ (8005880 <arm_rfft_fast_init_f32+0xf4>)
 8005824:	e7c8      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 8005826:	24d0      	movs	r4, #208	@ 0xd0
 8005828:	4916      	ldr	r1, [pc, #88]	@ (8005884 <arm_rfft_fast_init_f32+0xf8>)
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <arm_rfft_fast_init_f32+0xfc>)
 800582c:	4b17      	ldr	r3, [pc, #92]	@ (800588c <arm_rfft_fast_init_f32+0x100>)
 800582e:	e7c3      	b.n	80057b8 <arm_rfft_fast_init_f32+0x2c>
 8005830:	08016158 	.word	0x08016158
 8005834:	08007350 	.word	0x08007350
 8005838:	0800d4c0 	.word	0x0800d4c0
 800583c:	0800b450 	.word	0x0800b450
 8005840:	08017f18 	.word	0x08017f18
 8005844:	0801a408 	.word	0x0801a408
 8005848:	08013e40 	.word	0x08013e40
 800584c:	08011d40 	.word	0x08011d40
 8005850:	0800b4c0 	.word	0x0800b4c0
 8005854:	0801a098 	.word	0x0801a098
 8005858:	080114c0 	.word	0x080114c0
 800585c:	08018118 	.word	0x08018118
 8005860:	08014cf8 	.word	0x08014cf8
 8005864:	08013d40 	.word	0x08013d40
 8005868:	0800b350 	.word	0x0800b350
 800586c:	08014c50 	.word	0x08014c50
 8005870:	08011cc0 	.word	0x08011cc0
 8005874:	08014c78 	.word	0x08014c78
 8005878:	08018918 	.word	0x08018918
 800587c:	08015158 	.word	0x08015158
 8005880:	08018c98 	.word	0x08018c98
 8005884:	0801a608 	.word	0x0801a608
 8005888:	08014d58 	.word	0x08014d58
 800588c:	08019c98 	.word	0x08019c98

08005890 <arm_rfft_fast_f32>:
 8005890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005894:	8a06      	ldrh	r6, [r0, #16]
 8005896:	0876      	lsrs	r6, r6, #1
 8005898:	4607      	mov	r7, r0
 800589a:	4615      	mov	r5, r2
 800589c:	8006      	strh	r6, [r0, #0]
 800589e:	460c      	mov	r4, r1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d15c      	bne.n	800595e <arm_rfft_fast_f32+0xce>
 80058a4:	461a      	mov	r2, r3
 80058a6:	2301      	movs	r3, #1
 80058a8:	f000 fbe4 	bl	8006074 <arm_cfft_f32>
 80058ac:	edd4 7a00 	vldr	s15, [r4]
 80058b0:	ed94 7a01 	vldr	s14, [r4, #4]
 80058b4:	883e      	ldrh	r6, [r7, #0]
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80058bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80058c0:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 80058c4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80058c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058cc:	3e01      	subs	r6, #1
 80058ce:	ee26 7a83 	vmul.f32	s14, s13, s6
 80058d2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80058d6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80058da:	ed85 7a00 	vstr	s14, [r5]
 80058de:	edc5 7a01 	vstr	s15, [r5, #4]
 80058e2:	3010      	adds	r0, #16
 80058e4:	f105 0210 	add.w	r2, r5, #16
 80058e8:	3b08      	subs	r3, #8
 80058ea:	f104 0110 	add.w	r1, r4, #16
 80058ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80058f2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80058f6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80058fa:	edd3 3a03 	vldr	s7, [r3, #12]
 80058fe:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005902:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005906:	ee77 7a66 	vsub.f32	s15, s14, s13
 800590a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800590e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8005912:	ee66 6a27 	vmul.f32	s13, s12, s15
 8005916:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800591a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800591e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005922:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005926:	ee26 6a04 	vmul.f32	s12, s12, s8
 800592a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800592e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005932:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005936:	ee67 7a83 	vmul.f32	s15, s15, s6
 800593a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800593e:	3e01      	subs	r6, #1
 8005940:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005944:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005948:	f1a3 0308 	sub.w	r3, r3, #8
 800594c:	f101 0108 	add.w	r1, r1, #8
 8005950:	f100 0008 	add.w	r0, r0, #8
 8005954:	f102 0208 	add.w	r2, r2, #8
 8005958:	d1c9      	bne.n	80058ee <arm_rfft_fast_f32+0x5e>
 800595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800595e:	edd1 7a00 	vldr	s15, [r1]
 8005962:	edd1 6a01 	vldr	s13, [r1, #4]
 8005966:	6941      	ldr	r1, [r0, #20]
 8005968:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800596c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005970:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005974:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005978:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800597c:	3e01      	subs	r6, #1
 800597e:	ed82 7a00 	vstr	s14, [r2]
 8005982:	edc2 7a01 	vstr	s15, [r2, #4]
 8005986:	00f0      	lsls	r0, r6, #3
 8005988:	b3ee      	cbz	r6, 8005a06 <arm_rfft_fast_f32+0x176>
 800598a:	3808      	subs	r0, #8
 800598c:	f101 0e10 	add.w	lr, r1, #16
 8005990:	4420      	add	r0, r4
 8005992:	f104 0110 	add.w	r1, r4, #16
 8005996:	f102 0c10 	add.w	ip, r2, #16
 800599a:	ed90 7a02 	vldr	s14, [r0, #8]
 800599e:	ed51 6a02 	vldr	s13, [r1, #-8]
 80059a2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80059a6:	ed90 4a03 	vldr	s8, [r0, #12]
 80059aa:	ed11 5a01 	vldr	s10, [r1, #-4]
 80059ae:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80059b2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80059b6:	ee74 4a05 	vadd.f32	s9, s8, s10
 80059ba:	ee26 3a27 	vmul.f32	s6, s12, s15
 80059be:	ee77 6a26 	vadd.f32	s13, s14, s13
 80059c2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80059c6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80059ca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80059ce:	ee77 7a05 	vadd.f32	s15, s14, s10
 80059d2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80059d6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80059da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059de:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80059e2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80059e6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80059ea:	3e01      	subs	r6, #1
 80059ec:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80059f0:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80059f4:	f1a0 0008 	sub.w	r0, r0, #8
 80059f8:	f101 0108 	add.w	r1, r1, #8
 80059fc:	f10e 0e08 	add.w	lr, lr, #8
 8005a00:	f10c 0c08 	add.w	ip, ip, #8
 8005a04:	d1c9      	bne.n	800599a <arm_rfft_fast_f32+0x10a>
 8005a06:	461a      	mov	r2, r3
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 bb2f 	b.w	8006074 <arm_cfft_f32>
 8005a16:	bf00      	nop

08005a18 <arm_cfft_radix8by2_f32>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	ed2d 8b08 	vpush	{d8-d11}
 8005a20:	4607      	mov	r7, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	f8b7 e000 	ldrh.w	lr, [r7]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8005a2e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8005a32:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005a36:	f000 80b0 	beq.w	8005b9a <arm_cfft_radix8by2_f32+0x182>
 8005a3a:	008b      	lsls	r3, r1, #2
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	18c6      	adds	r6, r0, r3
 8005a40:	3210      	adds	r2, #16
 8005a42:	4443      	add	r3, r8
 8005a44:	f100 0510 	add.w	r5, r0, #16
 8005a48:	f108 0410 	add.w	r4, r8, #16
 8005a4c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005a50:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005a54:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005a58:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005a5c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005a60:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005a64:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005a68:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005a6c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005a70:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005a74:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005a78:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005a7c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005a80:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005a84:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005a88:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005a8c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005a90:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005a94:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005a98:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005a9c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005aa0:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005aa4:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005aa8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005aac:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005ab0:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005ab4:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005ab8:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005abc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005ac0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005ac4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005ac8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005acc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005ad0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005ad4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005ad8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005adc:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005ae0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005ae4:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005ae8:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005aec:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005af0:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005af4:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005af8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005afc:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005b00:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005b04:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005b08:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005b0c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005b10:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005b14:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005b18:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005b1c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005b20:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b28:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005b2c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005b30:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005b34:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005b38:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005b3c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005b40:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005b44:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005b48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b4c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005b50:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005b54:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005b58:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005b5c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005b60:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005b64:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005b68:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005b6c:	f1be 0e01 	subs.w	lr, lr, #1
 8005b70:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005b74:	f105 0510 	add.w	r5, r5, #16
 8005b78:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005b7c:	f106 0610 	add.w	r6, r6, #16
 8005b80:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005b84:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005b88:	f102 0210 	add.w	r2, r2, #16
 8005b8c:	f104 0410 	add.w	r4, r4, #16
 8005b90:	f103 0310 	add.w	r3, r3, #16
 8005b94:	f47f af5a 	bne.w	8005a4c <arm_cfft_radix8by2_f32+0x34>
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	b28c      	uxth	r4, r1
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	f000 fbca 	bl	8006338 <arm_radix8_butterfly_f32>
 8005ba4:	ecbd 8b08 	vpop	{d8-d11}
 8005ba8:	4621      	mov	r1, r4
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4640      	mov	r0, r8
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	f000 bbc0 	b.w	8006338 <arm_radix8_butterfly_f32>

08005bb8 <arm_cfft_radix8by4_f32>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	ed2d 8b0a 	vpush	{d8-d12}
 8005bc0:	8802      	ldrh	r2, [r0, #0]
 8005bc2:	ed91 6a00 	vldr	s12, [r1]
 8005bc6:	b08f      	sub	sp, #60	@ 0x3c
 8005bc8:	460f      	mov	r7, r1
 8005bca:	0852      	lsrs	r2, r2, #1
 8005bcc:	6841      	ldr	r1, [r0, #4]
 8005bce:	900c      	str	r0, [sp, #48]	@ 0x30
 8005bd0:	0093      	lsls	r3, r2, #2
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	4418      	add	r0, r3
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bda:	4418      	add	r0, r3
 8005bdc:	edd0 6a00 	vldr	s13, [r0]
 8005be0:	ed96 4a00 	vldr	s8, [r6]
 8005be4:	edd6 2a01 	vldr	s5, [r6, #4]
 8005be8:	edd0 7a01 	vldr	s15, [r0, #4]
 8005bec:	900a      	str	r0, [sp, #40]	@ 0x28
 8005bee:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4625      	mov	r5, r4
 8005bf6:	441c      	add	r4, r3
 8005bf8:	edd4 4a00 	vldr	s9, [r4]
 8005bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c00:	ed94 3a01 	vldr	s6, [r4, #4]
 8005c04:	9401      	str	r4, [sp, #4]
 8005c06:	ee35 5a84 	vadd.f32	s10, s11, s8
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005c10:	463e      	mov	r6, r7
 8005c12:	ee15 ea10 	vmov	lr, s10
 8005c16:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005c1a:	f846 eb08 	str.w	lr, [r6], #8
 8005c1e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005c22:	ed90 5a01 	vldr	s10, [r0, #4]
 8005c26:	9605      	str	r6, [sp, #20]
 8005c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c2c:	9e01      	ldr	r6, [sp, #4]
 8005c2e:	9707      	str	r7, [sp, #28]
 8005c30:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8005c34:	ed96 2a01 	vldr	s4, [r6, #4]
 8005c38:	ee36 7a05 	vadd.f32	s14, s12, s10
 8005c3c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005c40:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8005c44:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005c48:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	46a3      	mov	fp, r4
 8005c50:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005c54:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005c58:	ee14 8a10 	vmov	r8, s8
 8005c5c:	46a4      	mov	ip, r4
 8005c5e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005c62:	ed87 7a01 	vstr	s14, [r7, #4]
 8005c66:	f84b 8b08 	str.w	r8, [fp], #8
 8005c6a:	f1ac 0704 	sub.w	r7, ip, #4
 8005c6e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005c72:	f101 0c08 	add.w	ip, r1, #8
 8005c76:	462c      	mov	r4, r5
 8005c78:	f8cd c010 	str.w	ip, [sp, #16]
 8005c7c:	ee15 ca90 	vmov	ip, s11
 8005c80:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005c84:	f844 cb08 	str.w	ip, [r4], #8
 8005c88:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005c8c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005c90:	9406      	str	r4, [sp, #24]
 8005c92:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005c96:	f101 0410 	add.w	r4, r1, #16
 8005c9a:	0852      	lsrs	r2, r2, #1
 8005c9c:	9402      	str	r4, [sp, #8]
 8005c9e:	ed85 6a01 	vstr	s12, [r5, #4]
 8005ca2:	462c      	mov	r4, r5
 8005ca4:	f101 0518 	add.w	r5, r1, #24
 8005ca8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005caa:	46b2      	mov	sl, r6
 8005cac:	9503      	str	r5, [sp, #12]
 8005cae:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005cb2:	3a02      	subs	r2, #2
 8005cb4:	ee16 5a90 	vmov	r5, s13
 8005cb8:	46b6      	mov	lr, r6
 8005cba:	4630      	mov	r0, r6
 8005cbc:	0852      	lsrs	r2, r2, #1
 8005cbe:	f84a 5b08 	str.w	r5, [sl], #8
 8005cc2:	f1a0 0604 	sub.w	r6, r0, #4
 8005cc6:	edce 7a01 	vstr	s15, [lr, #4]
 8005cca:	9208      	str	r2, [sp, #32]
 8005ccc:	f000 8130 	beq.w	8005f30 <arm_cfft_radix8by4_f32+0x378>
 8005cd0:	4691      	mov	r9, r2
 8005cd2:	9a07      	ldr	r2, [sp, #28]
 8005cd4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cd8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8005cdc:	3b08      	subs	r3, #8
 8005cde:	f102 0510 	add.w	r5, r2, #16
 8005ce2:	f101 0c20 	add.w	ip, r1, #32
 8005ce6:	f1a4 020c 	sub.w	r2, r4, #12
 8005cea:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005cee:	4433      	add	r3, r6
 8005cf0:	3410      	adds	r4, #16
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005cfa:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005cfe:	ed91 7a00 	vldr	s14, [r1]
 8005d02:	edd0 7a00 	vldr	s15, [r0]
 8005d06:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005d0a:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005d0e:	edd0 6a01 	vldr	s13, [r0, #4]
 8005d12:	ed91 6a01 	vldr	s12, [r1, #4]
 8005d16:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005d1a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005d1e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005d22:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005d26:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005d2a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005d2e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005d32:	edd1 4a01 	vldr	s9, [r1, #4]
 8005d36:	ed90 4a01 	vldr	s8, [r0, #4]
 8005d3a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005d3e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8005d42:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005d46:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005d4a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005d4e:	edd6 1a00 	vldr	s3, [r6]
 8005d52:	edd7 0a00 	vldr	s1, [r7]
 8005d56:	ed92 4a02 	vldr	s8, [r2, #8]
 8005d5a:	edd3 3a02 	vldr	s7, [r3, #8]
 8005d5e:	ed93 2a01 	vldr	s4, [r3, #4]
 8005d62:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005d66:	edd2 2a01 	vldr	s5, [r2, #4]
 8005d6a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005d6e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005d72:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005d76:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005d7a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005d7e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8005d82:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005d86:	ee18 aa90 	vmov	sl, s17
 8005d8a:	f847 a908 	str.w	sl, [r7], #-8
 8005d8e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005d92:	ed93 9a01 	vldr	s18, [r3, #4]
 8005d96:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005d9a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005d9e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005da2:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005da6:	edc7 8a01 	vstr	s17, [r7, #4]
 8005daa:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005dae:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005db2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005db6:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005dba:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005dbe:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005dc2:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005dc6:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005dca:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005dce:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005dd2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005dd6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005dda:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8005dde:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005de2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005de6:	ee1c aa10 	vmov	sl, s24
 8005dea:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8005dee:	f841 ab08 	str.w	sl, [r1], #8
 8005df2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005df6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8005dfa:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8005dfe:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005e02:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005e06:	edc2 8a01 	vstr	s17, [r2, #4]
 8005e0a:	ed82 ba02 	vstr	s22, [r2, #8]
 8005e0e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005e12:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005e16:	ee38 8a47 	vsub.f32	s16, s16, s14
 8005e1a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8005e1e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005e22:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005e26:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005e2a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e2e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005e32:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005e36:	ee28 aa24 	vmul.f32	s20, s16, s9
 8005e3a:	ee60 9a04 	vmul.f32	s19, s0, s8
 8005e3e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005e42:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005e46:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005e4a:	ee39 4a68 	vsub.f32	s8, s18, s17
 8005e4e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005e52:	ee14 aa10 	vmov	sl, s8
 8005e56:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005e5a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8005e5e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005e62:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005e66:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005e6a:	f846 a908 	str.w	sl, [r6], #-8
 8005e6e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005e72:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005e76:	edc6 3a01 	vstr	s7, [r6, #4]
 8005e7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e82:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8005e86:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8005e8a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8005e8e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005e92:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005e96:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005e9a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8005e9e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005ea2:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005ea6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eae:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005eb2:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005eb6:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005eba:	ee15 aa90 	vmov	sl, s11
 8005ebe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ec2:	f840 ab08 	str.w	sl, [r0], #8
 8005ec6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005eca:	ee76 2a22 	vadd.f32	s5, s12, s5
 8005ece:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed2:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005ed6:	f105 0508 	add.w	r5, r5, #8
 8005eda:	ed83 1a02 	vstr	s2, [r3, #8]
 8005ede:	edc3 2a01 	vstr	s5, [r3, #4]
 8005ee2:	f108 0808 	add.w	r8, r8, #8
 8005ee6:	f1a2 0208 	sub.w	r2, r2, #8
 8005eea:	f10c 0c10 	add.w	ip, ip, #16
 8005eee:	f104 0408 	add.w	r4, r4, #8
 8005ef2:	f10e 0e18 	add.w	lr, lr, #24
 8005ef6:	f1a3 0308 	sub.w	r3, r3, #8
 8005efa:	f47f aefc 	bne.w	8005cf6 <arm_cfft_radix8by4_f32+0x13e>
 8005efe:	9908      	ldr	r1, [sp, #32]
 8005f00:	9802      	ldr	r0, [sp, #8]
 8005f02:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005f06:	00cb      	lsls	r3, r1, #3
 8005f08:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005f0c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005f10:	9102      	str	r1, [sp, #8]
 8005f12:	9905      	ldr	r1, [sp, #20]
 8005f14:	4419      	add	r1, r3
 8005f16:	9105      	str	r1, [sp, #20]
 8005f18:	9904      	ldr	r1, [sp, #16]
 8005f1a:	4419      	add	r1, r3
 8005f1c:	9104      	str	r1, [sp, #16]
 8005f1e:	9906      	ldr	r1, [sp, #24]
 8005f20:	449b      	add	fp, r3
 8005f22:	4419      	add	r1, r3
 8005f24:	449a      	add	sl, r3
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	9106      	str	r1, [sp, #24]
 8005f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9a05      	ldr	r2, [sp, #20]
 8005f32:	9806      	ldr	r0, [sp, #24]
 8005f34:	ed92 4a00 	vldr	s8, [r2]
 8005f38:	ed90 7a00 	vldr	s14, [r0]
 8005f3c:	ed9b 3a00 	vldr	s6, [fp]
 8005f40:	edda 3a00 	vldr	s7, [sl]
 8005f44:	edd2 4a01 	vldr	s9, [r2, #4]
 8005f48:	edd0 6a01 	vldr	s13, [r0, #4]
 8005f4c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8005f50:	eddb 7a01 	vldr	s15, [fp, #4]
 8005f54:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005f58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f5a:	ee34 6a07 	vadd.f32	s12, s8, s14
 8005f5e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8005f62:	ee36 5a03 	vadd.f32	s10, s12, s6
 8005f66:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005f6a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f6e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8005f72:	ed82 5a00 	vstr	s10, [r2]
 8005f76:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005f7a:	edda 4a01 	vldr	s9, [sl, #4]
 8005f7e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005f82:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005f86:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005f8a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8005f8e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005f92:	9a04      	ldr	r2, [sp, #16]
 8005f94:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005f98:	edd2 1a00 	vldr	s3, [r2]
 8005f9c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005fa0:	9a02      	ldr	r2, [sp, #8]
 8005fa2:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005fa6:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005faa:	ee64 4a21 	vmul.f32	s9, s8, s3
 8005fae:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005fb2:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005fb6:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005fba:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8005fbe:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005fc2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fc6:	edcb 2a00 	vstr	s5, [fp]
 8005fca:	ed8b 5a01 	vstr	s10, [fp, #4]
 8005fce:	ed92 4a01 	vldr	s8, [r2, #4]
 8005fd2:	ed92 5a00 	vldr	s10, [r2]
 8005fd6:	9a03      	ldr	r2, [sp, #12]
 8005fd8:	ee36 6a63 	vsub.f32	s12, s12, s7
 8005fdc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005fe0:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005fe4:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005fe8:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005fec:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005ff0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005ff4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005ff8:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006000:	ed80 6a01 	vstr	s12, [r0, #4]
 8006004:	edc0 5a00 	vstr	s11, [r0]
 8006008:	edd2 5a01 	vldr	s11, [r2, #4]
 800600c:	9807      	ldr	r0, [sp, #28]
 800600e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8006012:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8006016:	edd2 6a00 	vldr	s13, [r2]
 800601a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800601e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8006022:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006026:	ee27 7a25 	vmul.f32	s14, s14, s11
 800602a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800602e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006032:	edca 7a01 	vstr	s15, [sl, #4]
 8006036:	ed8a 7a00 	vstr	s14, [sl]
 800603a:	6872      	ldr	r2, [r6, #4]
 800603c:	4621      	mov	r1, r4
 800603e:	2304      	movs	r3, #4
 8006040:	f000 f97a 	bl	8006338 <arm_radix8_butterfly_f32>
 8006044:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006046:	6872      	ldr	r2, [r6, #4]
 8006048:	4621      	mov	r1, r4
 800604a:	2304      	movs	r3, #4
 800604c:	f000 f974 	bl	8006338 <arm_radix8_butterfly_f32>
 8006050:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006052:	6872      	ldr	r2, [r6, #4]
 8006054:	4621      	mov	r1, r4
 8006056:	2304      	movs	r3, #4
 8006058:	f000 f96e 	bl	8006338 <arm_radix8_butterfly_f32>
 800605c:	6872      	ldr	r2, [r6, #4]
 800605e:	9801      	ldr	r0, [sp, #4]
 8006060:	4621      	mov	r1, r4
 8006062:	2304      	movs	r3, #4
 8006064:	b00f      	add	sp, #60	@ 0x3c
 8006066:	ecbd 8b0a 	vpop	{d8-d12}
 800606a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606e:	f000 b963 	b.w	8006338 <arm_radix8_butterfly_f32>
 8006072:	bf00      	nop

08006074 <arm_cfft_f32>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	2a01      	cmp	r2, #1
 800607a:	4606      	mov	r6, r0
 800607c:	4617      	mov	r7, r2
 800607e:	460c      	mov	r4, r1
 8006080:	4698      	mov	r8, r3
 8006082:	8805      	ldrh	r5, [r0, #0]
 8006084:	d054      	beq.n	8006130 <arm_cfft_f32+0xbc>
 8006086:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800608a:	d04c      	beq.n	8006126 <arm_cfft_f32+0xb2>
 800608c:	d916      	bls.n	80060bc <arm_cfft_f32+0x48>
 800608e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006092:	d01a      	beq.n	80060ca <arm_cfft_f32+0x56>
 8006094:	d95c      	bls.n	8006150 <arm_cfft_f32+0xdc>
 8006096:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800609a:	d044      	beq.n	8006126 <arm_cfft_f32+0xb2>
 800609c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80060a0:	d105      	bne.n	80060ae <arm_cfft_f32+0x3a>
 80060a2:	2301      	movs	r3, #1
 80060a4:	6872      	ldr	r2, [r6, #4]
 80060a6:	4629      	mov	r1, r5
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f945 	bl	8006338 <arm_radix8_butterfly_f32>
 80060ae:	f1b8 0f00 	cmp.w	r8, #0
 80060b2:	d111      	bne.n	80060d8 <arm_cfft_f32+0x64>
 80060b4:	2f01      	cmp	r7, #1
 80060b6:	d016      	beq.n	80060e6 <arm_cfft_f32+0x72>
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	2d20      	cmp	r5, #32
 80060be:	d032      	beq.n	8006126 <arm_cfft_f32+0xb2>
 80060c0:	d94a      	bls.n	8006158 <arm_cfft_f32+0xe4>
 80060c2:	2d40      	cmp	r5, #64	@ 0x40
 80060c4:	d0ed      	beq.n	80060a2 <arm_cfft_f32+0x2e>
 80060c6:	2d80      	cmp	r5, #128	@ 0x80
 80060c8:	d1f1      	bne.n	80060ae <arm_cfft_f32+0x3a>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff fca3 	bl	8005a18 <arm_cfft_radix8by2_f32>
 80060d2:	f1b8 0f00 	cmp.w	r8, #0
 80060d6:	d0ed      	beq.n	80060b4 <arm_cfft_f32+0x40>
 80060d8:	68b2      	ldr	r2, [r6, #8]
 80060da:	89b1      	ldrh	r1, [r6, #12]
 80060dc:	4620      	mov	r0, r4
 80060de:	f7fa f87f 	bl	80001e0 <arm_bitreversal_32>
 80060e2:	2f01      	cmp	r7, #1
 80060e4:	d1e8      	bne.n	80060b8 <arm_cfft_f32+0x44>
 80060e6:	ee07 5a90 	vmov	s15, r5
 80060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	d0de      	beq.n	80060b8 <arm_cfft_f32+0x44>
 80060fa:	f104 0108 	add.w	r1, r4, #8
 80060fe:	2300      	movs	r3, #0
 8006100:	3301      	adds	r3, #1
 8006102:	429d      	cmp	r5, r3
 8006104:	f101 0108 	add.w	r1, r1, #8
 8006108:	ed11 7a04 	vldr	s14, [r1, #-16]
 800610c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006110:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006114:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006118:	ed01 7a04 	vstr	s14, [r1, #-16]
 800611c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006120:	d1ee      	bne.n	8006100 <arm_cfft_f32+0x8c>
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff fd45 	bl	8005bb8 <arm_cfft_radix8by4_f32>
 800612e:	e7be      	b.n	80060ae <arm_cfft_f32+0x3a>
 8006130:	b1ad      	cbz	r5, 800615e <arm_cfft_f32+0xea>
 8006132:	f101 030c 	add.w	r3, r1, #12
 8006136:	2200      	movs	r2, #0
 8006138:	ed53 7a02 	vldr	s15, [r3, #-8]
 800613c:	3201      	adds	r2, #1
 800613e:	eef1 7a67 	vneg.f32	s15, s15
 8006142:	4295      	cmp	r5, r2
 8006144:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006148:	f103 0308 	add.w	r3, r3, #8
 800614c:	d1f4      	bne.n	8006138 <arm_cfft_f32+0xc4>
 800614e:	e79a      	b.n	8006086 <arm_cfft_f32+0x12>
 8006150:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006154:	d0a5      	beq.n	80060a2 <arm_cfft_f32+0x2e>
 8006156:	e7aa      	b.n	80060ae <arm_cfft_f32+0x3a>
 8006158:	2d10      	cmp	r5, #16
 800615a:	d0b6      	beq.n	80060ca <arm_cfft_f32+0x56>
 800615c:	e7a7      	b.n	80060ae <arm_cfft_f32+0x3a>
 800615e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006162:	d894      	bhi.n	800608e <arm_cfft_f32+0x1a>
 8006164:	e7aa      	b.n	80060bc <arm_cfft_f32+0x48>
 8006166:	bf00      	nop

08006168 <arm_cmplx_mag_f32>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8006170:	b084      	sub	sp, #16
 8006172:	d07f      	beq.n	8006274 <arm_cmplx_mag_f32+0x10c>
 8006174:	2700      	movs	r7, #0
 8006176:	f100 0420 	add.w	r4, r0, #32
 800617a:	f101 0510 	add.w	r5, r1, #16
 800617e:	4646      	mov	r6, r8
 8006180:	e05a      	b.n	8006238 <arm_cmplx_mag_f32+0xd0>
 8006182:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006186:	eeb4 0a40 	vcmp.f32	s0, s0
 800618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618e:	f040 80a4 	bne.w	80062da <arm_cmplx_mag_f32+0x172>
 8006192:	ed05 0a04 	vstr	s0, [r5, #-16]
 8006196:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800619a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800619e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80061a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80061aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b2:	f2c0 808f 	blt.w	80062d4 <arm_cmplx_mag_f32+0x16c>
 80061b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80061ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80061be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c2:	f040 80af 	bne.w	8006324 <arm_cmplx_mag_f32+0x1bc>
 80061c6:	ed05 0a03 	vstr	s0, [r5, #-12]
 80061ca:	ed54 7a04 	vldr	s15, [r4, #-16]
 80061ce:	ed14 0a03 	vldr	s0, [r4, #-12]
 80061d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80061da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80061de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	db72      	blt.n	80062ce <arm_cmplx_mag_f32+0x166>
 80061e8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80061ec:	eeb4 0a40 	vcmp.f32	s0, s0
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	f040 808c 	bne.w	8006310 <arm_cmplx_mag_f32+0x1a8>
 80061f8:	ed05 0a02 	vstr	s0, [r5, #-8]
 80061fc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8006200:	ed14 0a01 	vldr	s0, [r4, #-4]
 8006204:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006208:	ee20 0a00 	vmul.f32	s0, s0, s0
 800620c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	db20      	blt.n	800625c <arm_cmplx_mag_f32+0xf4>
 800621a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800621e:	eeb4 0a40 	vcmp.f32	s0, s0
 8006222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006226:	d169      	bne.n	80062fc <arm_cmplx_mag_f32+0x194>
 8006228:	3e01      	subs	r6, #1
 800622a:	ed05 0a01 	vstr	s0, [r5, #-4]
 800622e:	f104 0420 	add.w	r4, r4, #32
 8006232:	f105 0510 	add.w	r5, r5, #16
 8006236:	d019      	beq.n	800626c <arm_cmplx_mag_f32+0x104>
 8006238:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800623c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8006240:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006244:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006248:	ee77 7a80 	vadd.f32	s15, s15, s0
 800624c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006254:	da95      	bge.n	8006182 <arm_cmplx_mag_f32+0x1a>
 8006256:	f845 7c10 	str.w	r7, [r5, #-16]
 800625a:	e79c      	b.n	8006196 <arm_cmplx_mag_f32+0x2e>
 800625c:	3e01      	subs	r6, #1
 800625e:	f845 7c04 	str.w	r7, [r5, #-4]
 8006262:	f104 0420 	add.w	r4, r4, #32
 8006266:	f105 0510 	add.w	r5, r5, #16
 800626a:	d1e5      	bne.n	8006238 <arm_cmplx_mag_f32+0xd0>
 800626c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8006270:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8006274:	f012 0503 	ands.w	r5, r2, #3
 8006278:	d026      	beq.n	80062c8 <arm_cmplx_mag_f32+0x160>
 800627a:	2600      	movs	r6, #0
 800627c:	f100 0408 	add.w	r4, r0, #8
 8006280:	e00c      	b.n	800629c <arm_cmplx_mag_f32+0x134>
 8006282:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8006286:	eeb4 0a40 	vcmp.f32	s0, s0
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	d12e      	bne.n	80062ee <arm_cmplx_mag_f32+0x186>
 8006290:	3d01      	subs	r5, #1
 8006292:	ed01 0a01 	vstr	s0, [r1, #-4]
 8006296:	f104 0408 	add.w	r4, r4, #8
 800629a:	d015      	beq.n	80062c8 <arm_cmplx_mag_f32+0x160>
 800629c:	ed54 7a02 	vldr	s15, [r4, #-8]
 80062a0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80062a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80062a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80062ac:	3104      	adds	r1, #4
 80062ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80062b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	dae2      	bge.n	8006282 <arm_cmplx_mag_f32+0x11a>
 80062bc:	3d01      	subs	r5, #1
 80062be:	f841 6c04 	str.w	r6, [r1, #-4]
 80062c2:	f104 0408 	add.w	r4, r4, #8
 80062c6:	d1e9      	bne.n	800629c <arm_cmplx_mag_f32+0x134>
 80062c8:	b004      	add	sp, #16
 80062ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ce:	f845 7c08 	str.w	r7, [r5, #-8]
 80062d2:	e793      	b.n	80061fc <arm_cmplx_mag_f32+0x94>
 80062d4:	f845 7c0c 	str.w	r7, [r5, #-12]
 80062d8:	e777      	b.n	80061ca <arm_cmplx_mag_f32+0x62>
 80062da:	eeb0 0a67 	vmov.f32	s0, s15
 80062de:	9203      	str	r2, [sp, #12]
 80062e0:	9102      	str	r1, [sp, #8]
 80062e2:	9001      	str	r0, [sp, #4]
 80062e4:	f000 ffba 	bl	800725c <sqrtf>
 80062e8:	a801      	add	r0, sp, #4
 80062ea:	c807      	ldmia	r0, {r0, r1, r2}
 80062ec:	e751      	b.n	8006192 <arm_cmplx_mag_f32+0x2a>
 80062ee:	eeb0 0a67 	vmov.f32	s0, s15
 80062f2:	9101      	str	r1, [sp, #4]
 80062f4:	f000 ffb2 	bl	800725c <sqrtf>
 80062f8:	9901      	ldr	r1, [sp, #4]
 80062fa:	e7c9      	b.n	8006290 <arm_cmplx_mag_f32+0x128>
 80062fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006300:	9203      	str	r2, [sp, #12]
 8006302:	9102      	str	r1, [sp, #8]
 8006304:	9001      	str	r0, [sp, #4]
 8006306:	f000 ffa9 	bl	800725c <sqrtf>
 800630a:	a801      	add	r0, sp, #4
 800630c:	c807      	ldmia	r0, {r0, r1, r2}
 800630e:	e78b      	b.n	8006228 <arm_cmplx_mag_f32+0xc0>
 8006310:	eeb0 0a67 	vmov.f32	s0, s15
 8006314:	9203      	str	r2, [sp, #12]
 8006316:	9102      	str	r1, [sp, #8]
 8006318:	9001      	str	r0, [sp, #4]
 800631a:	f000 ff9f 	bl	800725c <sqrtf>
 800631e:	a801      	add	r0, sp, #4
 8006320:	c807      	ldmia	r0, {r0, r1, r2}
 8006322:	e769      	b.n	80061f8 <arm_cmplx_mag_f32+0x90>
 8006324:	eeb0 0a67 	vmov.f32	s0, s15
 8006328:	9203      	str	r2, [sp, #12]
 800632a:	9102      	str	r1, [sp, #8]
 800632c:	9001      	str	r0, [sp, #4]
 800632e:	f000 ff95 	bl	800725c <sqrtf>
 8006332:	a801      	add	r0, sp, #4
 8006334:	c807      	ldmia	r0, {r0, r1, r2}
 8006336:	e746      	b.n	80061c6 <arm_cmplx_mag_f32+0x5e>

08006338 <arm_radix8_butterfly_f32>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	ed2d 8b10 	vpush	{d8-d15}
 8006340:	461c      	mov	r4, r3
 8006342:	b09d      	sub	sp, #116	@ 0x74
 8006344:	4603      	mov	r3, r0
 8006346:	3304      	adds	r3, #4
 8006348:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800665c <arm_radix8_butterfly_f32+0x324>
 800634c:	9019      	str	r0, [sp, #100]	@ 0x64
 800634e:	921a      	str	r2, [sp, #104]	@ 0x68
 8006350:	468b      	mov	fp, r1
 8006352:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006354:	468a      	mov	sl, r1
 8006356:	46a1      	mov	r9, r4
 8006358:	4607      	mov	r7, r0
 800635a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800635e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006362:	eb03 0508 	add.w	r5, r3, r8
 8006366:	195c      	adds	r4, r3, r5
 8006368:	00de      	lsls	r6, r3, #3
 800636a:	191a      	adds	r2, r3, r4
 800636c:	9600      	str	r6, [sp, #0]
 800636e:	1898      	adds	r0, r3, r2
 8006370:	4619      	mov	r1, r3
 8006372:	9e00      	ldr	r6, [sp, #0]
 8006374:	9311      	str	r3, [sp, #68]	@ 0x44
 8006376:	4401      	add	r1, r0
 8006378:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800637c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8006380:	19be      	adds	r6, r7, r6
 8006382:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8006386:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800638a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800638e:	9f00      	ldr	r7, [sp, #0]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	eb06 0e07 	add.w	lr, r6, r7
 8006396:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8006398:	9302      	str	r3, [sp, #8]
 800639a:	3204      	adds	r2, #4
 800639c:	3104      	adds	r1, #4
 800639e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a2:	f04f 0c00 	mov.w	ip, #0
 80063a6:	edde 7a00 	vldr	s15, [lr]
 80063aa:	edd6 6a00 	vldr	s13, [r6]
 80063ae:	ed95 2a00 	vldr	s4, [r5]
 80063b2:	ed17 aa01 	vldr	s20, [r7, #-4]
 80063b6:	edd4 4a00 	vldr	s9, [r4]
 80063ba:	ed90 5a00 	vldr	s10, [r0]
 80063be:	ed12 7a01 	vldr	s14, [r2, #-4]
 80063c2:	ed51 0a01 	vldr	s1, [r1, #-4]
 80063c6:	ee77 8a85 	vadd.f32	s17, s15, s10
 80063ca:	ee76 3a87 	vadd.f32	s7, s13, s14
 80063ce:	ee32 4a20 	vadd.f32	s8, s4, s1
 80063d2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80063d6:	ee33 6a84 	vadd.f32	s12, s7, s8
 80063da:	ee73 5a28 	vadd.f32	s11, s6, s17
 80063de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80063e2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80063e6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80063ea:	ed47 6a01 	vstr	s13, [r7, #-4]
 80063ee:	edc4 5a00 	vstr	s11, [r4]
 80063f2:	ed92 9a00 	vldr	s18, [r2]
 80063f6:	ed95 1a01 	vldr	s2, [r5, #4]
 80063fa:	edd6 5a01 	vldr	s11, [r6, #4]
 80063fe:	ed91 6a00 	vldr	s12, [r1]
 8006402:	edd7 2a00 	vldr	s5, [r7]
 8006406:	edd4 1a01 	vldr	s3, [r4, #4]
 800640a:	edde 6a01 	vldr	s13, [lr, #4]
 800640e:	edd0 9a01 	vldr	s19, [r0, #4]
 8006412:	ee72 0a60 	vsub.f32	s1, s4, s1
 8006416:	ee71 aa46 	vsub.f32	s21, s2, s12
 800641a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800641e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006422:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8006426:	ee37 7a20 	vadd.f32	s14, s14, s1
 800642a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800642e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8006432:	ee75 5a89 	vadd.f32	s11, s11, s18
 8006436:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800643a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800643e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006442:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006446:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800644a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800644e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8006452:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006456:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800645a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800645e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006462:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006466:	ee75 8a86 	vadd.f32	s17, s11, s12
 800646a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800646e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006472:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8006476:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800647a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800647e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8006482:	ee71 5a49 	vsub.f32	s11, s2, s18
 8006486:	ee31 2a09 	vadd.f32	s4, s2, s18
 800648a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800648e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8006492:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8006496:	ee73 0a06 	vadd.f32	s1, s6, s12
 800649a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800649e:	ee36 5a87 	vadd.f32	s10, s13, s14
 80064a2:	ee32 8a28 	vadd.f32	s16, s4, s17
 80064a6:	ee33 6a46 	vsub.f32	s12, s6, s12
 80064aa:	ee34 4a25 	vadd.f32	s8, s8, s11
 80064ae:	ee33 3a80 	vadd.f32	s6, s7, s0
 80064b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80064b6:	ee71 5a64 	vsub.f32	s11, s2, s9
 80064ba:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80064be:	ee32 2a68 	vsub.f32	s4, s4, s17
 80064c2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80064c6:	ee74 4a81 	vadd.f32	s9, s9, s2
 80064ca:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80064ce:	44dc      	add	ip, fp
 80064d0:	45e2      	cmp	sl, ip
 80064d2:	ed87 8a00 	vstr	s16, [r7]
 80064d6:	ed84 2a01 	vstr	s4, [r4, #4]
 80064da:	441f      	add	r7, r3
 80064dc:	edce 0a00 	vstr	s1, [lr]
 80064e0:	441c      	add	r4, r3
 80064e2:	ed80 6a00 	vstr	s12, [r0]
 80064e6:	edce 1a01 	vstr	s3, [lr, #4]
 80064ea:	ed80 4a01 	vstr	s8, [r0, #4]
 80064ee:	449e      	add	lr, r3
 80064f0:	ed86 3a00 	vstr	s6, [r6]
 80064f4:	4418      	add	r0, r3
 80064f6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80064fa:	ed02 5a01 	vstr	s10, [r2, #-4]
 80064fe:	ed85 7a00 	vstr	s14, [r5]
 8006502:	edc6 5a01 	vstr	s11, [r6, #4]
 8006506:	edc1 4a00 	vstr	s9, [r1]
 800650a:	441e      	add	r6, r3
 800650c:	edc2 6a00 	vstr	s13, [r2]
 8006510:	4419      	add	r1, r3
 8006512:	edc5 7a01 	vstr	s15, [r5, #4]
 8006516:	441a      	add	r2, r3
 8006518:	441d      	add	r5, r3
 800651a:	f63f af44 	bhi.w	80063a6 <arm_radix8_butterfly_f32+0x6e>
 800651e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006520:	2a07      	cmp	r2, #7
 8006522:	f240 81f5 	bls.w	8006910 <arm_radix8_butterfly_f32+0x5d8>
 8006526:	f108 0101 	add.w	r1, r8, #1
 800652a:	188f      	adds	r7, r1, r2
 800652c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8006530:	19d6      	adds	r6, r2, r7
 8006532:	eb08 0c09 	add.w	ip, r8, r9
 8006536:	1994      	adds	r4, r2, r6
 8006538:	eb0c 0e09 	add.w	lr, ip, r9
 800653c:	4610      	mov	r0, r2
 800653e:	9701      	str	r7, [sp, #4]
 8006540:	4420      	add	r0, r4
 8006542:	eb0e 0709 	add.w	r7, lr, r9
 8006546:	1815      	adds	r5, r2, r0
 8006548:	eb07 0209 	add.w	r2, r7, r9
 800654c:	9203      	str	r2, [sp, #12]
 800654e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006550:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006554:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006556:	440a      	add	r2, r1
 8006558:	9900      	ldr	r1, [sp, #0]
 800655a:	3108      	adds	r1, #8
 800655c:	9100      	str	r1, [sp, #0]
 800655e:	9902      	ldr	r1, [sp, #8]
 8006560:	3108      	adds	r1, #8
 8006562:	9102      	str	r1, [sp, #8]
 8006564:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006566:	00ff      	lsls	r7, r7, #3
 8006568:	9715      	str	r7, [sp, #84]	@ 0x54
 800656a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800656e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006572:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8006576:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8006578:	9903      	ldr	r1, [sp, #12]
 800657a:	19d7      	adds	r7, r2, r7
 800657c:	00c9      	lsls	r1, r1, #3
 800657e:	9114      	str	r1, [sp, #80]	@ 0x50
 8006580:	9710      	str	r7, [sp, #64]	@ 0x40
 8006582:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006584:	9f00      	ldr	r7, [sp, #0]
 8006586:	19cf      	adds	r7, r1, r7
 8006588:	970d      	str	r7, [sp, #52]	@ 0x34
 800658a:	9f02      	ldr	r7, [sp, #8]
 800658c:	19cf      	adds	r7, r1, r7
 800658e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8006592:	970c      	str	r7, [sp, #48]	@ 0x30
 8006594:	9f01      	ldr	r7, [sp, #4]
 8006596:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800659a:	3504      	adds	r5, #4
 800659c:	3004      	adds	r0, #4
 800659e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80065a2:	9508      	str	r5, [sp, #32]
 80065a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80065a6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80065a8:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80065aa:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 80065ae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80065b2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80065b6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80065b8:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 80065bc:	1945      	adds	r5, r0, r5
 80065be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80065c2:	460f      	mov	r7, r1
 80065c4:	3404      	adds	r4, #4
 80065c6:	4641      	mov	r1, r8
 80065c8:	1841      	adds	r1, r0, r1
 80065ca:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 80065ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80065d0:	eb00 0c06 	add.w	ip, r0, r6
 80065d4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80065d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80065da:	9506      	str	r5, [sp, #24]
 80065dc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80065de:	9105      	str	r1, [sp, #20]
 80065e0:	4639      	mov	r1, r7
 80065e2:	1905      	adds	r5, r0, r4
 80065e4:	3108      	adds	r1, #8
 80065e6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80065e8:	9507      	str	r5, [sp, #28]
 80065ea:	910f      	str	r1, [sp, #60]	@ 0x3c
 80065ec:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	eb00 0e06 	add.w	lr, r0, r6
 80065f6:	9518      	str	r5, [sp, #96]	@ 0x60
 80065f8:	9404      	str	r4, [sp, #16]
 80065fa:	9103      	str	r1, [sp, #12]
 80065fc:	4620      	mov	r0, r4
 80065fe:	4689      	mov	r9, r1
 8006600:	9e06      	ldr	r6, [sp, #24]
 8006602:	ed90 fa00 	vldr	s30, [r0]
 8006606:	edd6 7a01 	vldr	s15, [r6, #4]
 800660a:	edd0 ba01 	vldr	s23, [r0, #4]
 800660e:	edcd 7a00 	vstr	s15, [sp]
 8006612:	a80d      	add	r0, sp, #52	@ 0x34
 8006614:	edde 7a01 	vldr	s15, [lr, #4]
 8006618:	9c05      	ldr	r4, [sp, #20]
 800661a:	9d07      	ldr	r5, [sp, #28]
 800661c:	edd2 fa00 	vldr	s31, [r2]
 8006620:	ed92 ca01 	vldr	s24, [r2, #4]
 8006624:	edcd 7a01 	vstr	s15, [sp, #4]
 8006628:	c807      	ldmia	r0, {r0, r1, r2}
 800662a:	eddc 7a01 	vldr	s15, [ip, #4]
 800662e:	edd4 ea00 	vldr	s29, [r4]
 8006632:	ed95 ea00 	vldr	s28, [r5]
 8006636:	edd6 da00 	vldr	s27, [r6]
 800663a:	edd4 aa01 	vldr	s21, [r4, #4]
 800663e:	ed95 aa01 	vldr	s20, [r5, #4]
 8006642:	ed9e da00 	vldr	s26, [lr]
 8006646:	eddc ca00 	vldr	s25, [ip]
 800664a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800664e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006650:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006652:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006654:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006656:	edcd 7a02 	vstr	s15, [sp, #8]
 800665a:	e001      	b.n	8006660 <arm_radix8_butterfly_f32+0x328>
 800665c:	3f3504f3 	.word	0x3f3504f3
 8006660:	ed16 6a01 	vldr	s12, [r6, #-4]
 8006664:	ed91 5a00 	vldr	s10, [r1]
 8006668:	ed57 9a01 	vldr	s19, [r7, #-4]
 800666c:	edd5 7a00 	vldr	s15, [r5]
 8006670:	ed18 7a01 	vldr	s14, [r8, #-4]
 8006674:	edd2 3a00 	vldr	s7, [r2]
 8006678:	ed94 3a00 	vldr	s6, [r4]
 800667c:	ed90 2a00 	vldr	s4, [r0]
 8006680:	ed92 0a01 	vldr	s0, [r2, #4]
 8006684:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006688:	ee32 1a06 	vadd.f32	s2, s4, s12
 800668c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006690:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006694:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006698:	ee71 6a24 	vadd.f32	s13, s2, s9
 800669c:	ee32 2a46 	vsub.f32	s4, s4, s12
 80066a0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80066a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066a8:	ed82 6a00 	vstr	s12, [r2]
 80066ac:	edd5 8a01 	vldr	s17, [r5, #4]
 80066b0:	ed90 9a01 	vldr	s18, [r0, #4]
 80066b4:	edd6 2a00 	vldr	s5, [r6]
 80066b8:	ed98 7a00 	vldr	s14, [r8]
 80066bc:	edd4 0a01 	vldr	s1, [r4, #4]
 80066c0:	ed91 6a01 	vldr	s12, [r1, #4]
 80066c4:	edd7 5a00 	vldr	s11, [r7]
 80066c8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80066cc:	ee33 3a69 	vsub.f32	s6, s6, s19
 80066d0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80066d4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80066d8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80066dc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80066e0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80066e4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80066e8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80066ec:	ee32 9a27 	vadd.f32	s18, s4, s15
 80066f0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80066f4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80066f8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80066fc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006700:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006704:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006708:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800670c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006710:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006714:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006718:	ee32 1a87 	vadd.f32	s2, s5, s14
 800671c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006720:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006724:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006728:	ee73 0a29 	vadd.f32	s1, s6, s19
 800672c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006730:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006734:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006738:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800673c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006740:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006744:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006748:	ee74 3a22 	vadd.f32	s7, s8, s5
 800674c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006750:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006754:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006758:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800675c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006760:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006764:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006768:	ee30 4a60 	vsub.f32	s8, s0, s1
 800676c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006770:	ee30 0a80 	vadd.f32	s0, s1, s0
 8006774:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006778:	ee33 6a06 	vadd.f32	s12, s6, s12
 800677c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006780:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006784:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006788:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800678c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006790:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006794:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006798:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800679c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80067a0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80067a4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80067a8:	ee35 3a03 	vadd.f32	s6, s10, s6
 80067ac:	ee72 6a66 	vsub.f32	s13, s4, s13
 80067b0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80067b4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80067b8:	ed9d 4a02 	vldr	s8, [sp, #8]
 80067bc:	ed82 1a01 	vstr	s2, [r2, #4]
 80067c0:	ee77 3a63 	vsub.f32	s7, s14, s7
 80067c4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80067c8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80067cc:	ed81 3a00 	vstr	s6, [r1]
 80067d0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80067d4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80067d8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80067dc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80067e0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80067e4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80067e8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80067ec:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80067f0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80067f4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80067f8:	ed9d 4a00 	vldr	s8, [sp]
 80067fc:	edc1 6a01 	vstr	s13, [r1, #4]
 8006800:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006804:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006808:	ee64 9a29 	vmul.f32	s19, s8, s19
 800680c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006810:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006814:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006818:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800681c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006820:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006824:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006828:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800682c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006830:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006834:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006838:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800683c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006840:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006844:	44d9      	add	r9, fp
 8006846:	45ca      	cmp	sl, r9
 8006848:	ed84 9a00 	vstr	s18, [r4]
 800684c:	edc4 3a01 	vstr	s7, [r4, #4]
 8006850:	441a      	add	r2, r3
 8006852:	ed07 7a01 	vstr	s14, [r7, #-4]
 8006856:	edc7 2a00 	vstr	s5, [r7]
 800685a:	4419      	add	r1, r3
 800685c:	ed80 2a00 	vstr	s4, [r0]
 8006860:	ed80 8a01 	vstr	s16, [r0, #4]
 8006864:	441c      	add	r4, r3
 8006866:	ed48 1a01 	vstr	s3, [r8, #-4]
 800686a:	ed88 0a00 	vstr	s0, [r8]
 800686e:	441f      	add	r7, r3
 8006870:	ed46 4a01 	vstr	s9, [r6, #-4]
 8006874:	4418      	add	r0, r3
 8006876:	edc6 9a00 	vstr	s19, [r6]
 800687a:	4498      	add	r8, r3
 800687c:	edc5 0a00 	vstr	s1, [r5]
 8006880:	ed85 6a01 	vstr	s12, [r5, #4]
 8006884:	441e      	add	r6, r3
 8006886:	441d      	add	r5, r3
 8006888:	f63f aeea 	bhi.w	8006660 <arm_radix8_butterfly_f32+0x328>
 800688c:	9a03      	ldr	r2, [sp, #12]
 800688e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006890:	3201      	adds	r2, #1
 8006892:	4611      	mov	r1, r2
 8006894:	9203      	str	r2, [sp, #12]
 8006896:	9a04      	ldr	r2, [sp, #16]
 8006898:	4402      	add	r2, r0
 800689a:	9204      	str	r2, [sp, #16]
 800689c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800689e:	9a05      	ldr	r2, [sp, #20]
 80068a0:	4402      	add	r2, r0
 80068a2:	9205      	str	r2, [sp, #20]
 80068a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	4402      	add	r2, r0
 80068aa:	9207      	str	r2, [sp, #28]
 80068ac:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80068ae:	9a06      	ldr	r2, [sp, #24]
 80068b0:	4402      	add	r2, r0
 80068b2:	9206      	str	r2, [sp, #24]
 80068b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80068b6:	4496      	add	lr, r2
 80068b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068ba:	4494      	add	ip, r2
 80068bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068be:	3208      	adds	r2, #8
 80068c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80068c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068c4:	3208      	adds	r2, #8
 80068c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80068c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068ca:	3208      	adds	r2, #8
 80068cc:	920d      	str	r2, [sp, #52]	@ 0x34
 80068ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068d0:	3208      	adds	r2, #8
 80068d2:	920c      	str	r2, [sp, #48]	@ 0x30
 80068d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068d6:	3208      	adds	r2, #8
 80068d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068dc:	3208      	adds	r2, #8
 80068de:	920a      	str	r2, [sp, #40]	@ 0x28
 80068e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068e2:	3208      	adds	r2, #8
 80068e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80068e6:	9a08      	ldr	r2, [sp, #32]
 80068e8:	3208      	adds	r2, #8
 80068ea:	9208      	str	r2, [sp, #32]
 80068ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80068ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80068f0:	4288      	cmp	r0, r1
 80068f2:	4622      	mov	r2, r4
 80068f4:	d007      	beq.n	8006906 <arm_radix8_butterfly_f32+0x5ce>
 80068f6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80068f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80068fc:	4621      	mov	r1, r4
 80068fe:	4401      	add	r1, r0
 8006900:	9110      	str	r1, [sp, #64]	@ 0x40
 8006902:	9804      	ldr	r0, [sp, #16]
 8006904:	e67c      	b.n	8006600 <arm_radix8_butterfly_f32+0x2c8>
 8006906:	4683      	mov	fp, r0
 8006908:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800690c:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800690e:	e524      	b.n	800635a <arm_radix8_butterfly_f32+0x22>
 8006910:	b01d      	add	sp, #116	@ 0x74
 8006912:	ecbd 8b10 	vpop	{d8-d15}
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop

0800691c <siprintf>:
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b500      	push	{lr}
 8006920:	b09c      	sub	sp, #112	@ 0x70
 8006922:	ab1d      	add	r3, sp, #116	@ 0x74
 8006924:	9002      	str	r0, [sp, #8]
 8006926:	9006      	str	r0, [sp, #24]
 8006928:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800692c:	4809      	ldr	r0, [pc, #36]	@ (8006954 <siprintf+0x38>)
 800692e:	9107      	str	r1, [sp, #28]
 8006930:	9104      	str	r1, [sp, #16]
 8006932:	4909      	ldr	r1, [pc, #36]	@ (8006958 <siprintf+0x3c>)
 8006934:	f853 2b04 	ldr.w	r2, [r3], #4
 8006938:	9105      	str	r1, [sp, #20]
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	a902      	add	r1, sp, #8
 8006940:	f000 f994 	bl	8006c6c <_svfiprintf_r>
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	b01c      	add	sp, #112	@ 0x70
 800694c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006950:	b003      	add	sp, #12
 8006952:	4770      	bx	lr
 8006954:	20000010 	.word	0x20000010
 8006958:	ffff0208 	.word	0xffff0208

0800695c <memset>:
 800695c:	4402      	add	r2, r0
 800695e:	4603      	mov	r3, r0
 8006960:	4293      	cmp	r3, r2
 8006962:	d100      	bne.n	8006966 <memset+0xa>
 8006964:	4770      	bx	lr
 8006966:	f803 1b01 	strb.w	r1, [r3], #1
 800696a:	e7f9      	b.n	8006960 <memset+0x4>

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	@ (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000010 	.word	0x20000010

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4d0d      	ldr	r5, [pc, #52]	@ (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	@ (80069b4 <__libc_init_array+0x3c>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2600      	movs	r6, #0
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4d0b      	ldr	r5, [pc, #44]	@ (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	@ (80069bc <__libc_init_array+0x44>)
 800698c:	f000 fc88 	bl	80072a0 <_init>
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2600      	movs	r6, #0
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	0801a7e4 	.word	0x0801a7e4
 80069b4:	0801a7e4 	.word	0x0801a7e4
 80069b8:	0801a7e4 	.word	0x0801a7e4
 80069bc:	0801a7e8 	.word	0x0801a7e8

080069c0 <__retarget_lock_acquire_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_release_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <_free_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4605      	mov	r5, r0
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d041      	beq.n	8006a50 <_free_r+0x8c>
 80069cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d0:	1f0c      	subs	r4, r1, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bfb8      	it	lt
 80069d6:	18e4      	addlt	r4, r4, r3
 80069d8:	f000 f8e0 	bl	8006b9c <__malloc_lock>
 80069dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a54 <_free_r+0x90>)
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	b933      	cbnz	r3, 80069f0 <_free_r+0x2c>
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	6014      	str	r4, [r2, #0]
 80069e6:	4628      	mov	r0, r5
 80069e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ec:	f000 b8dc 	b.w	8006ba8 <__malloc_unlock>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d908      	bls.n	8006a06 <_free_r+0x42>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	1821      	adds	r1, r4, r0
 80069f8:	428b      	cmp	r3, r1
 80069fa:	bf01      	itttt	eq
 80069fc:	6819      	ldreq	r1, [r3, #0]
 80069fe:	685b      	ldreq	r3, [r3, #4]
 8006a00:	1809      	addeq	r1, r1, r0
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	e7ed      	b.n	80069e2 <_free_r+0x1e>
 8006a06:	461a      	mov	r2, r3
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b10b      	cbz	r3, 8006a10 <_free_r+0x4c>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d9fa      	bls.n	8006a06 <_free_r+0x42>
 8006a10:	6811      	ldr	r1, [r2, #0]
 8006a12:	1850      	adds	r0, r2, r1
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d10b      	bne.n	8006a30 <_free_r+0x6c>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	4401      	add	r1, r0
 8006a1c:	1850      	adds	r0, r2, r1
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	6011      	str	r1, [r2, #0]
 8006a22:	d1e0      	bne.n	80069e6 <_free_r+0x22>
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	6053      	str	r3, [r2, #4]
 8006a2a:	4408      	add	r0, r1
 8006a2c:	6010      	str	r0, [r2, #0]
 8006a2e:	e7da      	b.n	80069e6 <_free_r+0x22>
 8006a30:	d902      	bls.n	8006a38 <_free_r+0x74>
 8006a32:	230c      	movs	r3, #12
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	e7d6      	b.n	80069e6 <_free_r+0x22>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	1821      	adds	r1, r4, r0
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	bf04      	itt	eq
 8006a40:	6819      	ldreq	r1, [r3, #0]
 8006a42:	685b      	ldreq	r3, [r3, #4]
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	bf04      	itt	eq
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	6054      	str	r4, [r2, #4]
 8006a4e:	e7ca      	b.n	80069e6 <_free_r+0x22>
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	200047a4 	.word	0x200047a4

08006a58 <sbrk_aligned>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a98 <sbrk_aligned+0x40>)
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	6831      	ldr	r1, [r6, #0]
 8006a60:	4605      	mov	r5, r0
 8006a62:	b911      	cbnz	r1, 8006a6a <sbrk_aligned+0x12>
 8006a64:	f000 fba6 	bl	80071b4 <_sbrk_r>
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 fba1 	bl	80071b4 <_sbrk_r>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d103      	bne.n	8006a7e <sbrk_aligned+0x26>
 8006a76:	f04f 34ff 	mov.w	r4, #4294967295
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	1cc4      	adds	r4, r0, #3
 8006a80:	f024 0403 	bic.w	r4, r4, #3
 8006a84:	42a0      	cmp	r0, r4
 8006a86:	d0f8      	beq.n	8006a7a <sbrk_aligned+0x22>
 8006a88:	1a21      	subs	r1, r4, r0
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f000 fb92 	bl	80071b4 <_sbrk_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1f2      	bne.n	8006a7a <sbrk_aligned+0x22>
 8006a94:	e7ef      	b.n	8006a76 <sbrk_aligned+0x1e>
 8006a96:	bf00      	nop
 8006a98:	200047a0 	.word	0x200047a0

08006a9c <_malloc_r>:
 8006a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	1ccd      	adds	r5, r1, #3
 8006aa2:	f025 0503 	bic.w	r5, r5, #3
 8006aa6:	3508      	adds	r5, #8
 8006aa8:	2d0c      	cmp	r5, #12
 8006aaa:	bf38      	it	cc
 8006aac:	250c      	movcc	r5, #12
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	db01      	blt.n	8006ab8 <_malloc_r+0x1c>
 8006ab4:	42a9      	cmp	r1, r5
 8006ab6:	d904      	bls.n	8006ac2 <_malloc_r+0x26>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	2000      	movs	r0, #0
 8006abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b98 <_malloc_r+0xfc>
 8006ac6:	f000 f869 	bl	8006b9c <__malloc_lock>
 8006aca:	f8d8 3000 	ldr.w	r3, [r8]
 8006ace:	461c      	mov	r4, r3
 8006ad0:	bb44      	cbnz	r4, 8006b24 <_malloc_r+0x88>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff ffbf 	bl	8006a58 <sbrk_aligned>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	4604      	mov	r4, r0
 8006ade:	d158      	bne.n	8006b92 <_malloc_r+0xf6>
 8006ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ae4:	4627      	mov	r7, r4
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d143      	bne.n	8006b72 <_malloc_r+0xd6>
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	d04b      	beq.n	8006b86 <_malloc_r+0xea>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	4639      	mov	r1, r7
 8006af2:	4630      	mov	r0, r6
 8006af4:	eb04 0903 	add.w	r9, r4, r3
 8006af8:	f000 fb5c 	bl	80071b4 <_sbrk_r>
 8006afc:	4581      	cmp	r9, r0
 8006afe:	d142      	bne.n	8006b86 <_malloc_r+0xea>
 8006b00:	6821      	ldr	r1, [r4, #0]
 8006b02:	1a6d      	subs	r5, r5, r1
 8006b04:	4629      	mov	r1, r5
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ffa6 	bl	8006a58 <sbrk_aligned>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d03a      	beq.n	8006b86 <_malloc_r+0xea>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	442b      	add	r3, r5
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	bb62      	cbnz	r2, 8006b78 <_malloc_r+0xdc>
 8006b1e:	f8c8 7000 	str.w	r7, [r8]
 8006b22:	e00f      	b.n	8006b44 <_malloc_r+0xa8>
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	1b52      	subs	r2, r2, r5
 8006b28:	d420      	bmi.n	8006b6c <_malloc_r+0xd0>
 8006b2a:	2a0b      	cmp	r2, #11
 8006b2c:	d917      	bls.n	8006b5e <_malloc_r+0xc2>
 8006b2e:	1961      	adds	r1, r4, r5
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	6025      	str	r5, [r4, #0]
 8006b34:	bf18      	it	ne
 8006b36:	6059      	strne	r1, [r3, #4]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	bf08      	it	eq
 8006b3c:	f8c8 1000 	streq.w	r1, [r8]
 8006b40:	5162      	str	r2, [r4, r5]
 8006b42:	604b      	str	r3, [r1, #4]
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f82f 	bl	8006ba8 <__malloc_unlock>
 8006b4a:	f104 000b 	add.w	r0, r4, #11
 8006b4e:	1d23      	adds	r3, r4, #4
 8006b50:	f020 0007 	bic.w	r0, r0, #7
 8006b54:	1ac2      	subs	r2, r0, r3
 8006b56:	bf1c      	itt	ne
 8006b58:	1a1b      	subne	r3, r3, r0
 8006b5a:	50a3      	strne	r3, [r4, r2]
 8006b5c:	e7af      	b.n	8006abe <_malloc_r+0x22>
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	bf0c      	ite	eq
 8006b64:	f8c8 2000 	streq.w	r2, [r8]
 8006b68:	605a      	strne	r2, [r3, #4]
 8006b6a:	e7eb      	b.n	8006b44 <_malloc_r+0xa8>
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	6864      	ldr	r4, [r4, #4]
 8006b70:	e7ae      	b.n	8006ad0 <_malloc_r+0x34>
 8006b72:	463c      	mov	r4, r7
 8006b74:	687f      	ldr	r7, [r7, #4]
 8006b76:	e7b6      	b.n	8006ae6 <_malloc_r+0x4a>
 8006b78:	461a      	mov	r2, r3
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d1fb      	bne.n	8006b78 <_malloc_r+0xdc>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6053      	str	r3, [r2, #4]
 8006b84:	e7de      	b.n	8006b44 <_malloc_r+0xa8>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f80c 	bl	8006ba8 <__malloc_unlock>
 8006b90:	e794      	b.n	8006abc <_malloc_r+0x20>
 8006b92:	6005      	str	r5, [r0, #0]
 8006b94:	e7d6      	b.n	8006b44 <_malloc_r+0xa8>
 8006b96:	bf00      	nop
 8006b98:	200047a4 	.word	0x200047a4

08006b9c <__malloc_lock>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	@ (8006ba4 <__malloc_lock+0x8>)
 8006b9e:	f7ff bf0f 	b.w	80069c0 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	2000479c 	.word	0x2000479c

08006ba8 <__malloc_unlock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	@ (8006bb0 <__malloc_unlock+0x8>)
 8006baa:	f7ff bf0a 	b.w	80069c2 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	2000479c 	.word	0x2000479c

08006bb4 <__ssputs_r>:
 8006bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	688e      	ldr	r6, [r1, #8]
 8006bba:	461f      	mov	r7, r3
 8006bbc:	42be      	cmp	r6, r7
 8006bbe:	680b      	ldr	r3, [r1, #0]
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	4690      	mov	r8, r2
 8006bc6:	d82d      	bhi.n	8006c24 <__ssputs_r+0x70>
 8006bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bd0:	d026      	beq.n	8006c20 <__ssputs_r+0x6c>
 8006bd2:	6965      	ldr	r5, [r4, #20]
 8006bd4:	6909      	ldr	r1, [r1, #16]
 8006bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bda:	eba3 0901 	sub.w	r9, r3, r1
 8006bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be2:	1c7b      	adds	r3, r7, #1
 8006be4:	444b      	add	r3, r9
 8006be6:	106d      	asrs	r5, r5, #1
 8006be8:	429d      	cmp	r5, r3
 8006bea:	bf38      	it	cc
 8006bec:	461d      	movcc	r5, r3
 8006bee:	0553      	lsls	r3, r2, #21
 8006bf0:	d527      	bpl.n	8006c42 <__ssputs_r+0x8e>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7ff ff52 	bl	8006a9c <_malloc_r>
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	b360      	cbz	r0, 8006c56 <__ssputs_r+0xa2>
 8006bfc:	6921      	ldr	r1, [r4, #16]
 8006bfe:	464a      	mov	r2, r9
 8006c00:	f000 fae8 	bl	80071d4 <memcpy>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	6126      	str	r6, [r4, #16]
 8006c12:	6165      	str	r5, [r4, #20]
 8006c14:	444e      	add	r6, r9
 8006c16:	eba5 0509 	sub.w	r5, r5, r9
 8006c1a:	6026      	str	r6, [r4, #0]
 8006c1c:	60a5      	str	r5, [r4, #8]
 8006c1e:	463e      	mov	r6, r7
 8006c20:	42be      	cmp	r6, r7
 8006c22:	d900      	bls.n	8006c26 <__ssputs_r+0x72>
 8006c24:	463e      	mov	r6, r7
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	f000 faa8 	bl	8007180 <memmove>
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	1b9b      	subs	r3, r3, r6
 8006c34:	60a3      	str	r3, [r4, #8]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	4433      	add	r3, r6
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c42:	462a      	mov	r2, r5
 8006c44:	f000 fad4 	bl	80071f0 <_realloc_r>
 8006c48:	4606      	mov	r6, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d1e0      	bne.n	8006c10 <__ssputs_r+0x5c>
 8006c4e:	6921      	ldr	r1, [r4, #16]
 8006c50:	4650      	mov	r0, sl
 8006c52:	f7ff feb7 	bl	80069c4 <_free_r>
 8006c56:	230c      	movs	r3, #12
 8006c58:	f8ca 3000 	str.w	r3, [sl]
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e7e9      	b.n	8006c3e <__ssputs_r+0x8a>
	...

08006c6c <_svfiprintf_r>:
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	4698      	mov	r8, r3
 8006c72:	898b      	ldrh	r3, [r1, #12]
 8006c74:	061b      	lsls	r3, r3, #24
 8006c76:	b09d      	sub	sp, #116	@ 0x74
 8006c78:	4607      	mov	r7, r0
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	d510      	bpl.n	8006ca2 <_svfiprintf_r+0x36>
 8006c80:	690b      	ldr	r3, [r1, #16]
 8006c82:	b973      	cbnz	r3, 8006ca2 <_svfiprintf_r+0x36>
 8006c84:	2140      	movs	r1, #64	@ 0x40
 8006c86:	f7ff ff09 	bl	8006a9c <_malloc_r>
 8006c8a:	6028      	str	r0, [r5, #0]
 8006c8c:	6128      	str	r0, [r5, #16]
 8006c8e:	b930      	cbnz	r0, 8006c9e <_svfiprintf_r+0x32>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	b01d      	add	sp, #116	@ 0x74
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	2340      	movs	r3, #64	@ 0x40
 8006ca0:	616b      	str	r3, [r5, #20]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ca6:	2320      	movs	r3, #32
 8006ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb0:	2330      	movs	r3, #48	@ 0x30
 8006cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e50 <_svfiprintf_r+0x1e4>
 8006cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cba:	f04f 0901 	mov.w	r9, #1
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	469a      	mov	sl, r3
 8006cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cc6:	b10a      	cbz	r2, 8006ccc <_svfiprintf_r+0x60>
 8006cc8:	2a25      	cmp	r2, #37	@ 0x25
 8006cca:	d1f9      	bne.n	8006cc0 <_svfiprintf_r+0x54>
 8006ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd0:	d00b      	beq.n	8006cea <_svfiprintf_r+0x7e>
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff ff6b 	bl	8006bb4 <__ssputs_r>
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f000 80a7 	beq.w	8006e32 <_svfiprintf_r+0x1c6>
 8006ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce6:	445a      	add	r2, fp
 8006ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cea:	f89a 3000 	ldrb.w	r3, [sl]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 809f 	beq.w	8006e32 <_svfiprintf_r+0x1c6>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cfe:	f10a 0a01 	add.w	sl, sl, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	9307      	str	r3, [sp, #28]
 8006d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d0c:	4654      	mov	r4, sl
 8006d0e:	2205      	movs	r2, #5
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	484e      	ldr	r0, [pc, #312]	@ (8006e50 <_svfiprintf_r+0x1e4>)
 8006d16:	f7f9 fac3 	bl	80002a0 <memchr>
 8006d1a:	9a04      	ldr	r2, [sp, #16]
 8006d1c:	b9d8      	cbnz	r0, 8006d56 <_svfiprintf_r+0xea>
 8006d1e:	06d0      	lsls	r0, r2, #27
 8006d20:	bf44      	itt	mi
 8006d22:	2320      	movmi	r3, #32
 8006d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d28:	0711      	lsls	r1, r2, #28
 8006d2a:	bf44      	itt	mi
 8006d2c:	232b      	movmi	r3, #43	@ 0x2b
 8006d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d32:	f89a 3000 	ldrb.w	r3, [sl]
 8006d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d38:	d015      	beq.n	8006d66 <_svfiprintf_r+0xfa>
 8006d3a:	9a07      	ldr	r2, [sp, #28]
 8006d3c:	4654      	mov	r4, sl
 8006d3e:	2000      	movs	r0, #0
 8006d40:	f04f 0c0a 	mov.w	ip, #10
 8006d44:	4621      	mov	r1, r4
 8006d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4a:	3b30      	subs	r3, #48	@ 0x30
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d94b      	bls.n	8006de8 <_svfiprintf_r+0x17c>
 8006d50:	b1b0      	cbz	r0, 8006d80 <_svfiprintf_r+0x114>
 8006d52:	9207      	str	r2, [sp, #28]
 8006d54:	e014      	b.n	8006d80 <_svfiprintf_r+0x114>
 8006d56:	eba0 0308 	sub.w	r3, r0, r8
 8006d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	46a2      	mov	sl, r4
 8006d64:	e7d2      	b.n	8006d0c <_svfiprintf_r+0xa0>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	1d19      	adds	r1, r3, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	9103      	str	r1, [sp, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfbb      	ittet	lt
 8006d72:	425b      	neglt	r3, r3
 8006d74:	f042 0202 	orrlt.w	r2, r2, #2
 8006d78:	9307      	strge	r3, [sp, #28]
 8006d7a:	9307      	strlt	r3, [sp, #28]
 8006d7c:	bfb8      	it	lt
 8006d7e:	9204      	strlt	r2, [sp, #16]
 8006d80:	7823      	ldrb	r3, [r4, #0]
 8006d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d84:	d10a      	bne.n	8006d9c <_svfiprintf_r+0x130>
 8006d86:	7863      	ldrb	r3, [r4, #1]
 8006d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d8a:	d132      	bne.n	8006df2 <_svfiprintf_r+0x186>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	1d1a      	adds	r2, r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	9203      	str	r2, [sp, #12]
 8006d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d98:	3402      	adds	r4, #2
 8006d9a:	9305      	str	r3, [sp, #20]
 8006d9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e60 <_svfiprintf_r+0x1f4>
 8006da0:	7821      	ldrb	r1, [r4, #0]
 8006da2:	2203      	movs	r2, #3
 8006da4:	4650      	mov	r0, sl
 8006da6:	f7f9 fa7b 	bl	80002a0 <memchr>
 8006daa:	b138      	cbz	r0, 8006dbc <_svfiprintf_r+0x150>
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	eba0 000a 	sub.w	r0, r0, sl
 8006db2:	2240      	movs	r2, #64	@ 0x40
 8006db4:	4082      	lsls	r2, r0
 8006db6:	4313      	orrs	r3, r2
 8006db8:	3401      	adds	r4, #1
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	4824      	ldr	r0, [pc, #144]	@ (8006e54 <_svfiprintf_r+0x1e8>)
 8006dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	f7f9 fa6a 	bl	80002a0 <memchr>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d036      	beq.n	8006e3e <_svfiprintf_r+0x1d2>
 8006dd0:	4b21      	ldr	r3, [pc, #132]	@ (8006e58 <_svfiprintf_r+0x1ec>)
 8006dd2:	bb1b      	cbnz	r3, 8006e1c <_svfiprintf_r+0x1b0>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	3307      	adds	r3, #7
 8006dd8:	f023 0307 	bic.w	r3, r3, #7
 8006ddc:	3308      	adds	r3, #8
 8006dde:	9303      	str	r3, [sp, #12]
 8006de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de2:	4433      	add	r3, r6
 8006de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006de6:	e76a      	b.n	8006cbe <_svfiprintf_r+0x52>
 8006de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dec:	460c      	mov	r4, r1
 8006dee:	2001      	movs	r0, #1
 8006df0:	e7a8      	b.n	8006d44 <_svfiprintf_r+0xd8>
 8006df2:	2300      	movs	r3, #0
 8006df4:	3401      	adds	r4, #1
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f04f 0c0a 	mov.w	ip, #10
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e04:	3a30      	subs	r2, #48	@ 0x30
 8006e06:	2a09      	cmp	r2, #9
 8006e08:	d903      	bls.n	8006e12 <_svfiprintf_r+0x1a6>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0c6      	beq.n	8006d9c <_svfiprintf_r+0x130>
 8006e0e:	9105      	str	r1, [sp, #20]
 8006e10:	e7c4      	b.n	8006d9c <_svfiprintf_r+0x130>
 8006e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e16:	4604      	mov	r4, r0
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e7f0      	b.n	8006dfe <_svfiprintf_r+0x192>
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <_svfiprintf_r+0x1f0>)
 8006e24:	a904      	add	r1, sp, #16
 8006e26:	4638      	mov	r0, r7
 8006e28:	f3af 8000 	nop.w
 8006e2c:	1c42      	adds	r2, r0, #1
 8006e2e:	4606      	mov	r6, r0
 8006e30:	d1d6      	bne.n	8006de0 <_svfiprintf_r+0x174>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	065b      	lsls	r3, r3, #25
 8006e36:	f53f af2d 	bmi.w	8006c94 <_svfiprintf_r+0x28>
 8006e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e3c:	e72c      	b.n	8006c98 <_svfiprintf_r+0x2c>
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <_svfiprintf_r+0x1f0>)
 8006e46:	a904      	add	r1, sp, #16
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f000 f879 	bl	8006f40 <_printf_i>
 8006e4e:	e7ed      	b.n	8006e2c <_svfiprintf_r+0x1c0>
 8006e50:	0801a7a8 	.word	0x0801a7a8
 8006e54:	0801a7b2 	.word	0x0801a7b2
 8006e58:	00000000 	.word	0x00000000
 8006e5c:	08006bb5 	.word	0x08006bb5
 8006e60:	0801a7ae 	.word	0x0801a7ae

08006e64 <_printf_common>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	4616      	mov	r6, r2
 8006e6a:	4698      	mov	r8, r3
 8006e6c:	688a      	ldr	r2, [r1, #8]
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	bfb8      	it	lt
 8006e78:	4613      	movlt	r3, r2
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e80:	4607      	mov	r7, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	b10a      	cbz	r2, 8006e8a <_printf_common+0x26>
 8006e86:	3301      	adds	r3, #1
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	0699      	lsls	r1, r3, #26
 8006e8e:	bf42      	ittt	mi
 8006e90:	6833      	ldrmi	r3, [r6, #0]
 8006e92:	3302      	addmi	r3, #2
 8006e94:	6033      	strmi	r3, [r6, #0]
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	f015 0506 	ands.w	r5, r5, #6
 8006e9c:	d106      	bne.n	8006eac <_printf_common+0x48>
 8006e9e:	f104 0a19 	add.w	sl, r4, #25
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	6832      	ldr	r2, [r6, #0]
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	dc26      	bgt.n	8006efa <_printf_common+0x96>
 8006eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	3b00      	subs	r3, #0
 8006eb4:	bf18      	it	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	0692      	lsls	r2, r2, #26
 8006eba:	d42b      	bmi.n	8006f14 <_printf_common+0xb0>
 8006ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c8      	blx	r9
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d01e      	beq.n	8006f08 <_printf_common+0xa4>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	f003 0306 	and.w	r3, r3, #6
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	bf02      	ittt	eq
 8006ed6:	68e5      	ldreq	r5, [r4, #12]
 8006ed8:	6833      	ldreq	r3, [r6, #0]
 8006eda:	1aed      	subeq	r5, r5, r3
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	bf0c      	ite	eq
 8006ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee4:	2500      	movne	r5, #0
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	bfc4      	itt	gt
 8006eea:	1a9b      	subgt	r3, r3, r2
 8006eec:	18ed      	addgt	r5, r5, r3
 8006eee:	2600      	movs	r6, #0
 8006ef0:	341a      	adds	r4, #26
 8006ef2:	42b5      	cmp	r5, r6
 8006ef4:	d11a      	bne.n	8006f2c <_printf_common+0xc8>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e008      	b.n	8006f0c <_printf_common+0xa8>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4652      	mov	r2, sl
 8006efe:	4641      	mov	r1, r8
 8006f00:	4638      	mov	r0, r7
 8006f02:	47c8      	blx	r9
 8006f04:	3001      	adds	r0, #1
 8006f06:	d103      	bne.n	8006f10 <_printf_common+0xac>
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	3501      	adds	r5, #1
 8006f12:	e7c6      	b.n	8006ea2 <_printf_common+0x3e>
 8006f14:	18e1      	adds	r1, r4, r3
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	2030      	movs	r0, #48	@ 0x30
 8006f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f1e:	4422      	add	r2, r4
 8006f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f28:	3302      	adds	r3, #2
 8006f2a:	e7c7      	b.n	8006ebc <_printf_common+0x58>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4622      	mov	r2, r4
 8006f30:	4641      	mov	r1, r8
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c8      	blx	r9
 8006f36:	3001      	adds	r0, #1
 8006f38:	d0e6      	beq.n	8006f08 <_printf_common+0xa4>
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7d9      	b.n	8006ef2 <_printf_common+0x8e>
	...

08006f40 <_printf_i>:
 8006f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	7e0f      	ldrb	r7, [r1, #24]
 8006f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f48:	2f78      	cmp	r7, #120	@ 0x78
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	469a      	mov	sl, r3
 8006f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f56:	d807      	bhi.n	8006f68 <_printf_i+0x28>
 8006f58:	2f62      	cmp	r7, #98	@ 0x62
 8006f5a:	d80a      	bhi.n	8006f72 <_printf_i+0x32>
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	f000 80d2 	beq.w	8007106 <_printf_i+0x1c6>
 8006f62:	2f58      	cmp	r7, #88	@ 0x58
 8006f64:	f000 80b9 	beq.w	80070da <_printf_i+0x19a>
 8006f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f70:	e03a      	b.n	8006fe8 <_printf_i+0xa8>
 8006f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f76:	2b15      	cmp	r3, #21
 8006f78:	d8f6      	bhi.n	8006f68 <_printf_i+0x28>
 8006f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f80 <_printf_i+0x40>)
 8006f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f80:	08006fd9 	.word	0x08006fd9
 8006f84:	08006fed 	.word	0x08006fed
 8006f88:	08006f69 	.word	0x08006f69
 8006f8c:	08006f69 	.word	0x08006f69
 8006f90:	08006f69 	.word	0x08006f69
 8006f94:	08006f69 	.word	0x08006f69
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006f69 	.word	0x08006f69
 8006fa0:	08006f69 	.word	0x08006f69
 8006fa4:	08006f69 	.word	0x08006f69
 8006fa8:	08006f69 	.word	0x08006f69
 8006fac:	080070ed 	.word	0x080070ed
 8006fb0:	08007017 	.word	0x08007017
 8006fb4:	080070a7 	.word	0x080070a7
 8006fb8:	08006f69 	.word	0x08006f69
 8006fbc:	08006f69 	.word	0x08006f69
 8006fc0:	0800710f 	.word	0x0800710f
 8006fc4:	08006f69 	.word	0x08006f69
 8006fc8:	08007017 	.word	0x08007017
 8006fcc:	08006f69 	.word	0x08006f69
 8006fd0:	08006f69 	.word	0x08006f69
 8006fd4:	080070af 	.word	0x080070af
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	1d1a      	adds	r2, r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6032      	str	r2, [r6, #0]
 8006fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e09d      	b.n	8007128 <_printf_i+0x1e8>
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	6820      	ldr	r0, [r4, #0]
 8006ff0:	1d19      	adds	r1, r3, #4
 8006ff2:	6031      	str	r1, [r6, #0]
 8006ff4:	0606      	lsls	r6, r0, #24
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0xbc>
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	e003      	b.n	8007004 <_printf_i+0xc4>
 8006ffc:	0645      	lsls	r5, r0, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0xb8>
 8007000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007004:	2d00      	cmp	r5, #0
 8007006:	da03      	bge.n	8007010 <_printf_i+0xd0>
 8007008:	232d      	movs	r3, #45	@ 0x2d
 800700a:	426d      	negs	r5, r5
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007010:	4859      	ldr	r0, [pc, #356]	@ (8007178 <_printf_i+0x238>)
 8007012:	230a      	movs	r3, #10
 8007014:	e011      	b.n	800703a <_printf_i+0xfa>
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	6833      	ldr	r3, [r6, #0]
 800701a:	0608      	lsls	r0, r1, #24
 800701c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007020:	d402      	bmi.n	8007028 <_printf_i+0xe8>
 8007022:	0649      	lsls	r1, r1, #25
 8007024:	bf48      	it	mi
 8007026:	b2ad      	uxthmi	r5, r5
 8007028:	2f6f      	cmp	r7, #111	@ 0x6f
 800702a:	4853      	ldr	r0, [pc, #332]	@ (8007178 <_printf_i+0x238>)
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	bf14      	ite	ne
 8007030:	230a      	movne	r3, #10
 8007032:	2308      	moveq	r3, #8
 8007034:	2100      	movs	r1, #0
 8007036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800703a:	6866      	ldr	r6, [r4, #4]
 800703c:	60a6      	str	r6, [r4, #8]
 800703e:	2e00      	cmp	r6, #0
 8007040:	bfa2      	ittt	ge
 8007042:	6821      	ldrge	r1, [r4, #0]
 8007044:	f021 0104 	bicge.w	r1, r1, #4
 8007048:	6021      	strge	r1, [r4, #0]
 800704a:	b90d      	cbnz	r5, 8007050 <_printf_i+0x110>
 800704c:	2e00      	cmp	r6, #0
 800704e:	d04b      	beq.n	80070e8 <_printf_i+0x1a8>
 8007050:	4616      	mov	r6, r2
 8007052:	fbb5 f1f3 	udiv	r1, r5, r3
 8007056:	fb03 5711 	mls	r7, r3, r1, r5
 800705a:	5dc7      	ldrb	r7, [r0, r7]
 800705c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007060:	462f      	mov	r7, r5
 8007062:	42bb      	cmp	r3, r7
 8007064:	460d      	mov	r5, r1
 8007066:	d9f4      	bls.n	8007052 <_printf_i+0x112>
 8007068:	2b08      	cmp	r3, #8
 800706a:	d10b      	bne.n	8007084 <_printf_i+0x144>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	07df      	lsls	r7, r3, #31
 8007070:	d508      	bpl.n	8007084 <_printf_i+0x144>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4299      	cmp	r1, r3
 8007078:	bfde      	ittt	le
 800707a:	2330      	movle	r3, #48	@ 0x30
 800707c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007084:	1b92      	subs	r2, r2, r6
 8007086:	6122      	str	r2, [r4, #16]
 8007088:	f8cd a000 	str.w	sl, [sp]
 800708c:	464b      	mov	r3, r9
 800708e:	aa03      	add	r2, sp, #12
 8007090:	4621      	mov	r1, r4
 8007092:	4640      	mov	r0, r8
 8007094:	f7ff fee6 	bl	8006e64 <_printf_common>
 8007098:	3001      	adds	r0, #1
 800709a:	d14a      	bne.n	8007132 <_printf_i+0x1f2>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	b004      	add	sp, #16
 80070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	f043 0320 	orr.w	r3, r3, #32
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	4833      	ldr	r0, [pc, #204]	@ (800717c <_printf_i+0x23c>)
 80070b0:	2778      	movs	r7, #120	@ 0x78
 80070b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	6831      	ldr	r1, [r6, #0]
 80070ba:	061f      	lsls	r7, r3, #24
 80070bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80070c0:	d402      	bmi.n	80070c8 <_printf_i+0x188>
 80070c2:	065f      	lsls	r7, r3, #25
 80070c4:	bf48      	it	mi
 80070c6:	b2ad      	uxthmi	r5, r5
 80070c8:	6031      	str	r1, [r6, #0]
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	bf44      	itt	mi
 80070ce:	f043 0320 	orrmi.w	r3, r3, #32
 80070d2:	6023      	strmi	r3, [r4, #0]
 80070d4:	b11d      	cbz	r5, 80070de <_printf_i+0x19e>
 80070d6:	2310      	movs	r3, #16
 80070d8:	e7ac      	b.n	8007034 <_printf_i+0xf4>
 80070da:	4827      	ldr	r0, [pc, #156]	@ (8007178 <_printf_i+0x238>)
 80070dc:	e7e9      	b.n	80070b2 <_printf_i+0x172>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f023 0320 	bic.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	e7f6      	b.n	80070d6 <_printf_i+0x196>
 80070e8:	4616      	mov	r6, r2
 80070ea:	e7bd      	b.n	8007068 <_printf_i+0x128>
 80070ec:	6833      	ldr	r3, [r6, #0]
 80070ee:	6825      	ldr	r5, [r4, #0]
 80070f0:	6961      	ldr	r1, [r4, #20]
 80070f2:	1d18      	adds	r0, r3, #4
 80070f4:	6030      	str	r0, [r6, #0]
 80070f6:	062e      	lsls	r6, r5, #24
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	d501      	bpl.n	8007100 <_printf_i+0x1c0>
 80070fc:	6019      	str	r1, [r3, #0]
 80070fe:	e002      	b.n	8007106 <_printf_i+0x1c6>
 8007100:	0668      	lsls	r0, r5, #25
 8007102:	d5fb      	bpl.n	80070fc <_printf_i+0x1bc>
 8007104:	8019      	strh	r1, [r3, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	4616      	mov	r6, r2
 800710c:	e7bc      	b.n	8007088 <_printf_i+0x148>
 800710e:	6833      	ldr	r3, [r6, #0]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	6032      	str	r2, [r6, #0]
 8007114:	681e      	ldr	r6, [r3, #0]
 8007116:	6862      	ldr	r2, [r4, #4]
 8007118:	2100      	movs	r1, #0
 800711a:	4630      	mov	r0, r6
 800711c:	f7f9 f8c0 	bl	80002a0 <memchr>
 8007120:	b108      	cbz	r0, 8007126 <_printf_i+0x1e6>
 8007122:	1b80      	subs	r0, r0, r6
 8007124:	6060      	str	r0, [r4, #4]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	2300      	movs	r3, #0
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007130:	e7aa      	b.n	8007088 <_printf_i+0x148>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d0ad      	beq.n	800709c <_printf_i+0x15c>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	079b      	lsls	r3, r3, #30
 8007144:	d413      	bmi.n	800716e <_printf_i+0x22e>
 8007146:	68e0      	ldr	r0, [r4, #12]
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	4298      	cmp	r0, r3
 800714c:	bfb8      	it	lt
 800714e:	4618      	movlt	r0, r3
 8007150:	e7a6      	b.n	80070a0 <_printf_i+0x160>
 8007152:	2301      	movs	r3, #1
 8007154:	4632      	mov	r2, r6
 8007156:	4649      	mov	r1, r9
 8007158:	4640      	mov	r0, r8
 800715a:	47d0      	blx	sl
 800715c:	3001      	adds	r0, #1
 800715e:	d09d      	beq.n	800709c <_printf_i+0x15c>
 8007160:	3501      	adds	r5, #1
 8007162:	68e3      	ldr	r3, [r4, #12]
 8007164:	9903      	ldr	r1, [sp, #12]
 8007166:	1a5b      	subs	r3, r3, r1
 8007168:	42ab      	cmp	r3, r5
 800716a:	dcf2      	bgt.n	8007152 <_printf_i+0x212>
 800716c:	e7eb      	b.n	8007146 <_printf_i+0x206>
 800716e:	2500      	movs	r5, #0
 8007170:	f104 0619 	add.w	r6, r4, #25
 8007174:	e7f5      	b.n	8007162 <_printf_i+0x222>
 8007176:	bf00      	nop
 8007178:	0801a7b9 	.word	0x0801a7b9
 800717c:	0801a7ca 	.word	0x0801a7ca

08007180 <memmove>:
 8007180:	4288      	cmp	r0, r1
 8007182:	b510      	push	{r4, lr}
 8007184:	eb01 0402 	add.w	r4, r1, r2
 8007188:	d902      	bls.n	8007190 <memmove+0x10>
 800718a:	4284      	cmp	r4, r0
 800718c:	4623      	mov	r3, r4
 800718e:	d807      	bhi.n	80071a0 <memmove+0x20>
 8007190:	1e43      	subs	r3, r0, #1
 8007192:	42a1      	cmp	r1, r4
 8007194:	d008      	beq.n	80071a8 <memmove+0x28>
 8007196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800719e:	e7f8      	b.n	8007192 <memmove+0x12>
 80071a0:	4402      	add	r2, r0
 80071a2:	4601      	mov	r1, r0
 80071a4:	428a      	cmp	r2, r1
 80071a6:	d100      	bne.n	80071aa <memmove+0x2a>
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071b2:	e7f7      	b.n	80071a4 <memmove+0x24>

080071b4 <_sbrk_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d06      	ldr	r5, [pc, #24]	@ (80071d0 <_sbrk_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7f9 ff38 	bl	8001034 <_sbrk>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_sbrk_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_sbrk_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20004798 	.word	0x20004798

080071d4 <memcpy>:
 80071d4:	440a      	add	r2, r1
 80071d6:	4291      	cmp	r1, r2
 80071d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071dc:	d100      	bne.n	80071e0 <memcpy+0xc>
 80071de:	4770      	bx	lr
 80071e0:	b510      	push	{r4, lr}
 80071e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ea:	4291      	cmp	r1, r2
 80071ec:	d1f9      	bne.n	80071e2 <memcpy+0xe>
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <_realloc_r>:
 80071f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f4:	4680      	mov	r8, r0
 80071f6:	4615      	mov	r5, r2
 80071f8:	460c      	mov	r4, r1
 80071fa:	b921      	cbnz	r1, 8007206 <_realloc_r+0x16>
 80071fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007200:	4611      	mov	r1, r2
 8007202:	f7ff bc4b 	b.w	8006a9c <_malloc_r>
 8007206:	b92a      	cbnz	r2, 8007214 <_realloc_r+0x24>
 8007208:	f7ff fbdc 	bl	80069c4 <_free_r>
 800720c:	2400      	movs	r4, #0
 800720e:	4620      	mov	r0, r4
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	f000 f81a 	bl	800724c <_malloc_usable_size_r>
 8007218:	4285      	cmp	r5, r0
 800721a:	4606      	mov	r6, r0
 800721c:	d802      	bhi.n	8007224 <_realloc_r+0x34>
 800721e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007222:	d8f4      	bhi.n	800720e <_realloc_r+0x1e>
 8007224:	4629      	mov	r1, r5
 8007226:	4640      	mov	r0, r8
 8007228:	f7ff fc38 	bl	8006a9c <_malloc_r>
 800722c:	4607      	mov	r7, r0
 800722e:	2800      	cmp	r0, #0
 8007230:	d0ec      	beq.n	800720c <_realloc_r+0x1c>
 8007232:	42b5      	cmp	r5, r6
 8007234:	462a      	mov	r2, r5
 8007236:	4621      	mov	r1, r4
 8007238:	bf28      	it	cs
 800723a:	4632      	movcs	r2, r6
 800723c:	f7ff ffca 	bl	80071d4 <memcpy>
 8007240:	4621      	mov	r1, r4
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fbbe 	bl	80069c4 <_free_r>
 8007248:	463c      	mov	r4, r7
 800724a:	e7e0      	b.n	800720e <_realloc_r+0x1e>

0800724c <_malloc_usable_size_r>:
 800724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007250:	1f18      	subs	r0, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfbc      	itt	lt
 8007256:	580b      	ldrlt	r3, [r1, r0]
 8007258:	18c0      	addlt	r0, r0, r3
 800725a:	4770      	bx	lr

0800725c <sqrtf>:
 800725c:	b508      	push	{r3, lr}
 800725e:	ed2d 8b02 	vpush	{d8}
 8007262:	eeb0 8a40 	vmov.f32	s16, s0
 8007266:	f000 f817 	bl	8007298 <__ieee754_sqrtf>
 800726a:	eeb4 8a48 	vcmp.f32	s16, s16
 800726e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007272:	d60c      	bvs.n	800728e <sqrtf+0x32>
 8007274:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007294 <sqrtf+0x38>
 8007278:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800727c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007280:	d505      	bpl.n	800728e <sqrtf+0x32>
 8007282:	f7ff fb73 	bl	800696c <__errno>
 8007286:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800728a:	2321      	movs	r3, #33	@ 0x21
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	ecbd 8b02 	vpop	{d8}
 8007292:	bd08      	pop	{r3, pc}
 8007294:	00000000 	.word	0x00000000

08007298 <__ieee754_sqrtf>:
 8007298:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800729c:	4770      	bx	lr
	...

080072a0 <_init>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

080072ac <_fini>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr
