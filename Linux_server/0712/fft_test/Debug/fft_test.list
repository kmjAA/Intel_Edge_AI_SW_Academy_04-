
fft_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008108  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ca8  080082a8  080082a8  000092a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bf50  0801bf50  0001d064  2**0
                  CONTENTS
  4 .ARM          00000008  0801bf50  0801bf50  0001cf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bf58  0801bf58  0001d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bf58  0801bf58  0001cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bf5c  0801bf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0801bf60  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ec  20000064  0801bfc4  0001d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004850  0801bfc4  0001d850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052d71  00000000  00000000  0001d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045d4  00000000  00000000  0006fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003cf0  00000000  00000000  000743e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002d68  00000000  00000000  000780d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a23e  00000000  00000000  0007ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026bfb  00000000  00000000  00095076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b68f3  00000000  00000000  000bbc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00172564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011060  00000000  00000000  00172618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00183678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003194  00000000  00000000  001836d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  0018686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008290 	.word	0x08008290

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08008290 	.word	0x08008290

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <I2C_CLCD_Delay_us>:
#include "I2C_CLCD.h"

I2C_HandleTypeDef *myHi2c;

void I2C_CLCD_Delay_us(uint8_t us)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i;

	for(i = 0; i < 19*us/10; i++);
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e004      	b.n	800064a <I2C_CLCD_Delay_us+0x1a>
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3301      	adds	r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	4613      	mov	r3, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <I2C_CLCD_Delay_us+0x4c>)
 800065e:	fb82 0203 	smull	r0, r2, r2, r3
 8000662:	1092      	asrs	r2, r2, #2
 8000664:	17db      	asrs	r3, r3, #31
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4299      	cmp	r1, r3
 800066a:	dbe9      	blt.n	8000640 <I2C_CLCD_Delay_us+0x10>
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	66666667 	.word	0x66666667

08000680 <I2C_CLCD_SendByte>:

void I2C_CLCD_SendByte(uint8_t RS_State, uint8_t Byte)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t buffer[4];

	// 데이터 상위 바이트 전송
	for(i = 0; i < 2; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e01c      	b.n	80006d0 <I2C_CLCD_SendByte+0x50>
	{
		buffer[i] = (Byte & 0xf0) |
 8000696:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800069a:	f023 030f 	bic.w	r3, r3, #15
 800069e:	b25b      	sxtb	r3, r3
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	b25b      	sxtb	r3, r3
				(1 << I2C_CLCD_LED) |
				(!i << I2C_CLCD_E) |
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d101      	bne.n	80006b0 <I2C_CLCD_SendByte+0x30>
 80006ac:	2204      	movs	r2, #4
 80006ae:	e000      	b.n	80006b2 <I2C_CLCD_SendByte+0x32>
 80006b0:	2200      	movs	r2, #0
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b25a      	sxtb	r2, r3
				(0 << I2C_CLCD_RW) |
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25a      	sxtb	r2, r3
		buffer[i] = (Byte & 0xf0) |
 80006be:	7bfb      	ldrb	r3, [r7, #15]
				(0 << I2C_CLCD_RW) |
 80006c0:	b2d2      	uxtb	r2, r2
		buffer[i] = (Byte & 0xf0) |
 80006c2:	3310      	adds	r3, #16
 80006c4:	443b      	add	r3, r7
 80006c6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i = 0; i < 2; i++)
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	3301      	adds	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d9df      	bls.n	8000696 <I2C_CLCD_SendByte+0x16>
				(RS_State << I2C_CLCD_RS);
	}
	// 데이터 하위 바이트 전송
	for(i = 0; i < 2; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e01b      	b.n	8000714 <I2C_CLCD_SendByte+0x94>
	{
		buffer[i+2] = (Byte << 4) |			// P4~P7
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	b25b      	sxtb	r3, r3
				(1 << I2C_CLCD_LED) |				// P3 LED 백라이트 신호
				(!i << I2C_CLCD_E) |				// P2	Enable 신호를 1, 0의 순서로 전송
 80006e8:	7bfa      	ldrb	r2, [r7, #15]
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	d101      	bne.n	80006f2 <I2C_CLCD_SendByte+0x72>
 80006ee:	2204      	movs	r2, #4
 80006f0:	e000      	b.n	80006f4 <I2C_CLCD_SendByte+0x74>
 80006f2:	2200      	movs	r2, #0
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b25a      	sxtb	r2, r3
				(0 << I2C_CLCD_RW) |				// P1 (R = busy check)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b25a      	sxtb	r2, r3
		buffer[i+2] = (Byte << 4) |			// P4~P7
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	3302      	adds	r3, #2
				(0 << I2C_CLCD_RW) |				// P1 (R = busy check)
 8000704:	b2d2      	uxtb	r2, r2
		buffer[i+2] = (Byte << 4) |			// P4~P7
 8000706:	3310      	adds	r3, #16
 8000708:	443b      	add	r3, r7
 800070a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i = 0; i < 2; i++)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	3301      	adds	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d9e0      	bls.n	80006dc <I2C_CLCD_SendByte+0x5c>
				(RS_State << I2C_CLCD_RS);	// P0
	}
	HAL_I2C_Master_Transmit(myHi2c, PCF8574_AD | WRITE, buffer, 4, 300);
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <I2C_CLCD_SendByte+0xc0>)
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	f107 0208 	add.w	r2, r7, #8
 8000722:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2304      	movs	r3, #4
 800072a:	214e      	movs	r1, #78	@ 0x4e
 800072c:	f003 fe28 	bl	8004380 <HAL_I2C_Master_Transmit>

	I2C_CLCD_Delay_us(40);
 8000730:	2028      	movs	r0, #40	@ 0x28
 8000732:	f7ff ff7d 	bl	8000630 <I2C_CLCD_Delay_us>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000080 	.word	0x20000080

08000744 <I2C_CLCD_init>:

void I2C_CLCD_init(I2C_HandleTypeDef *hi2c)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	myHi2c = hi2c;
 800074c:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <I2C_CLCD_init+0x60>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
	uint8_t i;
	uint8_t CLCD_Init_CMD[4] = {0x28, 0x0c, 0x01, 0x06};
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <I2C_CLCD_init+0x64>)
 8000754:	60bb      	str	r3, [r7, #8]

	HAL_Delay(100);
 8000756:	2064      	movs	r0, #100	@ 0x64
 8000758:	f002 fa88 	bl	8002c6c <HAL_Delay>

	I2C_CLCD_SendByte(0, 0x02);
 800075c:	2102      	movs	r1, #2
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff8e 	bl	8000680 <I2C_CLCD_SendByte>

	HAL_Delay(2);
 8000764:	2002      	movs	r0, #2
 8000766:	f002 fa81 	bl	8002c6c <HAL_Delay>

	for(i = 0; i < 4; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e011      	b.n	8000794 <I2C_CLCD_init+0x50>
	{
		I2C_CLCD_SendByte(0, CLCD_Init_CMD[i]);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3310      	adds	r3, #16
 8000774:	443b      	add	r3, r7
 8000776:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800077a:	4619      	mov	r1, r3
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff7f 	bl	8000680 <I2C_CLCD_SendByte>

		if(i == 2) HAL_Delay(2);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d102      	bne.n	800078e <I2C_CLCD_init+0x4a>
 8000788:	2002      	movs	r0, #2
 800078a:	f002 fa6f 	bl	8002c6c <HAL_Delay>
	for(i = 0; i < 4; i++)
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2b03      	cmp	r3, #3
 8000798:	d9ea      	bls.n	8000770 <I2C_CLCD_init+0x2c>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000080 	.word	0x20000080
 80007a8:	06010c28 	.word	0x06010c28

080007ac <I2C_CLCD_GotoXY>:

void I2C_CLCD_GotoXY(uint8_t X, uint8_t Y)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	4613      	mov	r3, r2
 80007ba:	71bb      	strb	r3, [r7, #6]
	I2C_CLCD_SendByte(0, 0x80 | (0x40 * Y + X));
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ff53 	bl	8000680 <I2C_CLCD_SendByte>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <I2C_CLCD_PutC>:

void I2C_CLCD_PutC(uint8_t C)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	if(C == '\f')
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b0c      	cmp	r3, #12
 80007f0:	d107      	bne.n	8000802 <I2C_CLCD_PutC+0x20>
	{
		I2C_CLCD_SendByte(0, 0x01);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff43 	bl	8000680 <I2C_CLCD_SendByte>
		HAL_Delay(2);
 80007fa:	2002      	movs	r0, #2
 80007fc:	f002 fa36 	bl	8002c6c <HAL_Delay>
	}
	else
	{
		I2C_CLCD_SendByte(1, C);
	}
}
 8000800:	e00c      	b.n	800081c <I2C_CLCD_PutC+0x3a>
	else if(C == '\n')
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b0a      	cmp	r3, #10
 8000806:	d104      	bne.n	8000812 <I2C_CLCD_PutC+0x30>
		I2C_CLCD_GotoXY(0, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ffce 	bl	80007ac <I2C_CLCD_GotoXY>
}
 8000810:	e004      	b.n	800081c <I2C_CLCD_PutC+0x3a>
		I2C_CLCD_SendByte(1, C);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4619      	mov	r1, r3
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff32 	bl	8000680 <I2C_CLCD_SendByte>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <I2C_CLCD_PutStr>:

void I2C_CLCD_PutStr(uint8_t *Str)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	while(*Str) I2C_CLCD_PutC(*Str++);
 800082c:	e006      	b.n	800083c <I2C_CLCD_PutStr+0x18>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd3 	bl	80007e2 <I2C_CLCD_PutC>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1f4      	bne.n	800082e <I2C_CLCD_PutStr+0xa>
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_TIM_PeriodElapsedCallback>:
#define SamplingRate 40000
uint16_t adValue[SamplesFft];
float32_t input[SamplesFft];
float32_t output[SamplesFft];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *hTim) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if (doConvert > 0)
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d004      	beq.n	800086a <HAL_TIM_PeriodElapsedCallback+0x1a>
		doConvert--;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000868:	6013      	str	r3, [r2, #0]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000000 	.word	0x20000000

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	f5ad 5d09 	sub.w	sp, sp, #8768	@ 0x2240
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f002 f97f 	bl	8002b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 fa57 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fc57 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000892:	f000 fc35 	bl	8001100 <MX_DMA_Init>
  MX_SPI1_Init();
 8000896:	f000 fb39 	bl	8000f0c <MX_SPI1_Init>
  MX_ADC1_Init();
 800089a:	f000 fab7 	bl	8000e0c <MX_ADC1_Init>
  MX_TIM2_Init();
 800089e:	f000 fb6b 	bl	8000f78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a2:	f000 fbb5 	bl	8001010 <MX_TIM3_Init>
  MX_I2C1_Init();
 80008a6:	f000 fb03 	bl	8000eb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint16_t adcValue[SamplesFft];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcValue, SamplesFft);
 80008aa:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80008ae:	f103 0310 	add.w	r3, r3, #16
 80008b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008b6:	4619      	mov	r1, r3
 80008b8:	4896      	ldr	r0, [pc, #600]	@ (8000b14 <main+0x298>)
 80008ba:	f002 fa3f 	bl	8002d3c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80008be:	4896      	ldr	r0, [pc, #600]	@ (8000b18 <main+0x29c>)
 80008c0:	f004 fff4 	bl	80058ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	4895      	ldr	r0, [pc, #596]	@ (8000b1c <main+0x2a0>)
 80008c8:	f005 f8ac 	bl	8005a24 <HAL_TIM_PWM_Start>
	//init CLCD
	I2C_CLCD_init(&hi2c1);
 80008cc:	4894      	ldr	r0, [pc, #592]	@ (8000b20 <main+0x2a4>)
 80008ce:	f7ff ff39 	bl	8000744 <I2C_CLCD_init>
	//setup ssd1306
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 80008d2:	4b94      	ldr	r3, [pc, #592]	@ (8000b24 <main+0x2a8>)
 80008d4:	4a94      	ldr	r2, [pc, #592]	@ (8000b28 <main+0x2ac>)
 80008d6:	4995      	ldr	r1, [pc, #596]	@ (8000b2c <main+0x2b0>)
 80008d8:	4895      	ldr	r0, [pc, #596]	@ (8000b30 <main+0x2b4>)
 80008da:	f001 f829 	bl	8001930 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);
	//init ssd1306
	u8g2_InitDisplay(&u8g2);
 80008de:	4894      	ldr	r0, [pc, #592]	@ (8000b30 <main+0x2b4>)
 80008e0:	f002 f88a 	bl	80029f8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	4892      	ldr	r0, [pc, #584]	@ (8000b30 <main+0x2b4>)
 80008e8:	f002 f895 	bl	8002a16 <u8x8_SetPowerSave>
//
  u8g2_ClearBuffer(&u8g2);
 80008ec:	4890      	ldr	r0, [pc, #576]	@ (8000b30 <main+0x2b4>)
 80008ee:	f000 ff8d 	bl	800180c <u8g2_ClearBuffer>
//  u8g2_SetDrawColor(&u8g2, 1);
	 u8g2_SetFont(&u8g2, u8g2_font_5x7_mf);
 80008f2:	4990      	ldr	r1, [pc, #576]	@ (8000b34 <main+0x2b8>)
 80008f4:	488e      	ldr	r0, [pc, #568]	@ (8000b30 <main+0x2b4>)
 80008f6:	f001 f9a5 	bl	8001c44 <u8g2_SetFont>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	u8g2_SetDrawColor(&u8g2, 1);
 80008fa:	2101      	movs	r1, #1
 80008fc:	488c      	ldr	r0, [pc, #560]	@ (8000b30 <main+0x2b4>)
 80008fe:	f001 fae8 	bl	8001ed2 <u8g2_SetDrawColor>
  u8g2_SendBuffer(&u8g2);
	while(1);
	//*/
	//initialize FFT
	arm_rfft_fast_instance_f32 fftInstance;
	arm_rfft_fast_init_f32(&fftInstance, SamplesFft);
 8000902:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000906:	f103 0310 	add.w	r3, r3, #16
 800090a:	3b18      	subs	r3, #24
 800090c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000910:	4618      	mov	r0, r3
 8000912:	f005 ff33 	bl	800677c <arm_rfft_fast_init_f32>
	while (1) {
			static int time;
			static int freq =1;
			if(HAL_GetTick() - time > 10){
 8000916:	f002 f99d 	bl	8002c54 <HAL_GetTick>
 800091a:	4603      	mov	r3, r0
 800091c:	4a86      	ldr	r2, [pc, #536]	@ (8000b38 <main+0x2bc>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d92d      	bls.n	8000982 <main+0x106>
				time =HAL_GetTick();
 8000926:	f002 f995 	bl	8002c54 <HAL_GetTick>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b82      	ldr	r3, [pc, #520]	@ (8000b38 <main+0x2bc>)
 8000930:	601a      	str	r2, [r3, #0]
				freq +=10;
 8000932:	4b82      	ldr	r3, [pc, #520]	@ (8000b3c <main+0x2c0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	330a      	adds	r3, #10
 8000938:	4a80      	ldr	r2, [pc, #512]	@ (8000b3c <main+0x2c0>)
 800093a:	6013      	str	r3, [r2, #0]
				freq %=20000;
 800093c:	4b7f      	ldr	r3, [pc, #508]	@ (8000b3c <main+0x2c0>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b7f      	ldr	r3, [pc, #508]	@ (8000b40 <main+0x2c4>)
 8000942:	fb83 1302 	smull	r1, r3, r3, r2
 8000946:	1359      	asrs	r1, r3, #13
 8000948:	17d3      	asrs	r3, r2, #31
 800094a:	1acb      	subs	r3, r1, r3
 800094c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000950:	fb01 f303 	mul.w	r3, r1, r3
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	4a79      	ldr	r2, [pc, #484]	@ (8000b3c <main+0x2c0>)
 8000958:	6013      	str	r3, [r2, #0]
				htim3.Instance->ARR = 1000000 /freq -1;
 800095a:	4b78      	ldr	r3, [pc, #480]	@ (8000b3c <main+0x2c0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a79      	ldr	r2, [pc, #484]	@ (8000b44 <main+0x2c8>)
 8000960:	fb92 f3f3 	sdiv	r3, r2, r3
 8000964:	1e5a      	subs	r2, r3, #1
 8000966:	4b6d      	ldr	r3, [pc, #436]	@ (8000b1c <main+0x2a0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
				htim3.Instance ->CNT = 0;
 800096c:	4b6b      	ldr	r3, [pc, #428]	@ (8000b1c <main+0x2a0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
				htim3.Instance->CCR1 = htim3.Instance->ARR/2;
 8000974:	4b69      	ldr	r3, [pc, #420]	@ (8000b1c <main+0x2a0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800097a:	4b68      	ldr	r3, [pc, #416]	@ (8000b1c <main+0x2a0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	0852      	lsrs	r2, r2, #1
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
			}
			if (doConvert==0){
 8000982:	4b71      	ldr	r3, [pc, #452]	@ (8000b48 <main+0x2cc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1c5      	bne.n	8000916 <main+0x9a>
			doConvert = SamplesFft;
 800098a:	4b6f      	ldr	r3, [pc, #444]	@ (8000b48 <main+0x2cc>)
 800098c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000990:	601a      	str	r2, [r3, #0]
			//date move
			for(int i=0; i<SamplesFft; i++){
 8000992:	2300      	movs	r3, #0
 8000994:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000998:	f102 020c 	add.w	r2, r2, #12
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e026      	b.n	80009ee <main+0x172>
				input[i] =(float32_t)adcValue[i];
 80009a0:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80009a4:	f103 0310 	add.w	r3, r3, #16
 80009a8:	461a      	mov	r2, r3
 80009aa:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80009ae:	f103 030c 	add.w	r3, r3, #12
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c4:	4a61      	ldr	r2, [pc, #388]	@ (8000b4c <main+0x2d0>)
 80009c6:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80009ca:	f103 030c 	add.w	r3, r3, #12
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<SamplesFft; i++){
 80009d8:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80009dc:	f103 030c 	add.w	r3, r3, #12
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 80009e8:	f102 020c 	add.w	r2, r2, #12
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80009f2:	f103 030c 	add.w	r3, r3, #12
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009fc:	dbd0      	blt.n	80009a0 <main+0x124>
			}
			//cal fft
			arm_rfft_fast_f32(&fftInstance,input,output,0);
 80009fe:	f507 5091 	add.w	r0, r7, #4640	@ 0x1220
 8000a02:	f100 0010 	add.w	r0, r0, #16
 8000a06:	3818      	subs	r0, #24
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4a51      	ldr	r2, [pc, #324]	@ (8000b50 <main+0x2d4>)
 8000a0c:	494f      	ldr	r1, [pc, #316]	@ (8000b4c <main+0x2d0>)
 8000a0e:	f005 ff37 	bl	8006880 <arm_rfft_fast_f32>
			//search frequency
			float32_t magnitude[SamplesFft /2];
			arm_cmplx_mag_f32(output, magnitude, SamplesFft/2);
 8000a12:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000a16:	3b0c      	subs	r3, #12
 8000a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	484c      	ldr	r0, [pc, #304]	@ (8000b50 <main+0x2d4>)
 8000a20:	f006 fb9a 	bl	8007158 <arm_cmplx_mag_f32>

			uint32_t maxIndex = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000a2a:	f102 0208 	add.w	r2, r2, #8
 8000a2e:	6013      	str	r3, [r2, #0]
			float32_t maxValue = 0;
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000a38:	f102 0204 	add.w	r2, r2, #4
 8000a3c:	6013      	str	r3, [r2, #0]
			for (int i =1; i<SamplesFft/2; i++){
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e033      	b.n	8000ab0 <main+0x234>
				if(magnitude[i]>maxValue){
 8000a48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	3b4c      	subs	r3, #76	@ 0x4c
 8000a5a:	edd3 7a00 	vldr	s15, [r3]
 8000a5e:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000a62:	f103 0304 	add.w	r3, r3, #4
 8000a66:	ed93 7a00 	vldr	s14, [r3]
 8000a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d516      	bpl.n	8000aa2 <main+0x226>
					maxValue = magnitude[i];
 8000a74:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b4c      	subs	r3, #76	@ 0x4c
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000a8c:	f102 0204 	add.w	r2, r2, #4
 8000a90:	6013      	str	r3, [r2, #0]
					maxIndex = i;
 8000a92:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000a9c:	f102 0208 	add.w	r2, r2, #8
 8000aa0:	6013      	str	r3, [r2, #0]
			for (int i =1; i<SamplesFft/2; i++){
 8000aa2:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f507 5209 	add.w	r2, r7, #8768	@ 0x2240
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000aba:	dbc5      	blt.n	8000a48 <main+0x1cc>
				}
			}
			float frequency = maxIndex *((float)SamplingRate/(float)SamplesFft);
 8000abc:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 8000ac0:	f103 0308 	add.w	r3, r3, #8
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ace:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000b54 <main+0x2d8>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000ada:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000ade:	edc3 7a00 	vstr	s15, [r3]
			//align data
			uint32_t showData[128] = {0, };
 8000ae2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ae6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000aea:	4618      	mov	r0, r3
 8000aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000af0:	461a      	mov	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f006 ff2a 	bl	800794c <memset>
			for(int i =0; i<128; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000afe:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e090      	b.n	8000c28 <main+0x3ac>
				for(int j =0; j<8; j++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000b0c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e05d      	b.n	8000bd0 <main+0x354>
 8000b14:	20000084 	.word	0x20000084
 8000b18:	200001d8 	.word	0x200001d8
 8000b1c:	20000220 	.word	0x20000220
 8000b20:	2000012c 	.word	0x2000012c
 8000b24:	08001655 	.word	0x08001655
 8000b28:	08001749 	.word	0x08001749
 8000b2c:	08008a40 	.word	0x08008a40
 8000b30:	20000268 	.word	0x20000268
 8000b34:	080082c8 	.word	0x080082c8
 8000b38:	200042fc 	.word	0x200042fc
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	68db8bad 	.word	0x68db8bad
 8000b44:	000f4240 	.word	0x000f4240
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200002fc 	.word	0x200002fc
 8000b50:	200022fc 	.word	0x200022fc
 8000b54:	419c4000 	.word	0x419c4000
					showData[i] += output[i*8+j];
 8000b58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000b5c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000b60:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000b64:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b76:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000b7a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000b86:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a67      	ldr	r2, [pc, #412]	@ (8000d2c <main+0x4b0>)
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba0:	ee17 1a90 	vmov	r1, s15
 8000ba4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ba8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000bac:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000bb0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j =0; j<8; j++){
 8000bba:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000bbe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000bca:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000bd4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	ddbc      	ble.n	8000b58 <main+0x2dc>
				}
				showData[i] /= 40000;
 8000bde:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000be2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000be6:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000bea:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d30 <main+0x4b4>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0bd9      	lsrs	r1, r3, #15
 8000bfc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000c00:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000c04:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000c08:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i =0; i<128; i++){
 8000c12:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000c16:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000c22:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000c2c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c34:	f77f af67 	ble.w	8000b06 <main+0x28a>
			}
			//show display
			u8g2_ClearBuffer(&u8g2);
 8000c38:	483e      	ldr	r0, [pc, #248]	@ (8000d34 <main+0x4b8>)
 8000c3a:	f000 fde7 	bl	800180c <u8g2_ClearBuffer>
			for (int x = 2; x < 128; x++) {
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000c44:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e044      	b.n	8000cd6 <main+0x45a>
				if(showData[x] > 63) showData[x] = 63;
 8000c4c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000c50:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000c54:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000c58:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c62:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c64:	d90b      	bls.n	8000c7e <main+0x402>
 8000c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000c6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000c6e:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000c72:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	213f      	movs	r1, #63	@ 0x3f
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				u8g2_DrawLine(&u8g2, x,63,x, 64-showData[x]);
 8000c7e:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000c82:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	b299      	uxth	r1, r3
 8000c8a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000c8e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b298      	uxth	r0, r3
 8000c96:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000c9a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000c9e:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000ca2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	223f      	movs	r2, #63	@ 0x3f
 8000cba:	481e      	ldr	r0, [pc, #120]	@ (8000d34 <main+0x4b8>)
 8000cbc:	f001 f97e 	bl	8001fbc <u8g2_DrawLine>
			for (int x = 2; x < 128; x++) {
 8000cc0:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000cc4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000cd0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000cda:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce2:	ddb3      	ble.n	8000c4c <main+0x3d0>
			}
			char str[20];
			sprintf(str, "%5dHz", (int)frequency);
 8000ce4:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8000ce8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf4:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000cf8:	f103 0310 	add.w	r3, r3, #16
 8000cfc:	3b0c      	subs	r3, #12
 8000cfe:	ee17 2a90 	vmov	r2, s15
 8000d02:	490d      	ldr	r1, [pc, #52]	@ (8000d38 <main+0x4bc>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fe01 	bl	800790c <siprintf>
			I2C_CLCD_GotoXY(0, 0);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fd4d 	bl	80007ac <I2C_CLCD_GotoXY>
			I2C_CLCD_PutStr(str);
 8000d12:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000d16:	f103 0310 	add.w	r3, r3, #16
 8000d1a:	3b0c      	subs	r3, #12
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fd81 	bl	8000824 <I2C_CLCD_PutStr>
			//u8g2_DrawStr(&u8g2,70,10,str);
			u8g2_SendBuffer(&u8g2);
 8000d22:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <main+0x4b8>)
 8000d24:	f000 fde5 	bl	80018f2 <u8g2_SendBuffer>
	while (1) {
 8000d28:	e5f5      	b.n	8000916 <main+0x9a>
 8000d2a:	bf00      	nop
 8000d2c:	200022fc 	.word	0x200022fc
 8000d30:	d1b71759 	.word	0xd1b71759
 8000d34:	20000268 	.word	0x20000268
 8000d38:	080082a8 	.word	0x080082a8

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	@ 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	@ 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f006 fdfe 	bl	800794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a26      	ldr	r2, [pc, #152]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fe37 	bl	8004a34 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dcc:	f000 fa0a 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2103      	movs	r1, #3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f899 	bl	8004f24 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000df8:	f000 f9f4 	bl	80011e4 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3750      	adds	r7, #80	@ 0x50
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e20:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <MX_ADC1_Init+0xa0>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e24:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e50:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e70:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e72:	f001 ff1f 	bl	8002cb4 <HAL_ADC_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e7c:	f000 f9b2 	bl	80011e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e92:	f002 f861 	bl	8002f58 <HAL_ADC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e9c:	f000 f9a2 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	40012000 	.word	0x40012000

08000eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000eb6:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <MX_I2C1_Init+0x54>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ebc:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <MX_I2C1_Init+0x58>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ece:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_I2C1_Init+0x50>)
 8000eee:	f003 f903 	bl	80040f8 <HAL_I2C_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ef8:	f000 f974 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000012c 	.word	0x2000012c
 8000f04:	40005400 	.word	0x40005400
 8000f08:	00061a80 	.word	0x00061a80

08000f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <MX_SPI1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f40:	2218      	movs	r2, #24
 8000f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f5e:	f004 f9ad 	bl	80052bc <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f68:	f000 f93c 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000180 	.word	0x20000180
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MX_TIM2_Init+0x94>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_TIM2_Init+0x94>)
 8000f9e:	2263      	movs	r2, #99	@ 0x63
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_TIM2_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25-1;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_TIM2_Init+0x94>)
 8000faa:	2218      	movs	r2, #24
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_TIM2_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_TIM2_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4814      	ldr	r0, [pc, #80]	@ (800100c <MX_TIM2_Init+0x94>)
 8000fbc:	f004 fc26 	bl	800580c <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 f90d 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	@ (800100c <MX_TIM2_Init+0x94>)
 8000fd8:	f004 ff86 	bl	8005ee8 <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f8ff 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <MX_TIM2_Init+0x94>)
 8000ff4:	f005 fb40 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ffe:	f000 f8f1 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001d8 	.word	0x200001d8

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	@ 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001042:	4a2e      	ldr	r2, [pc, #184]	@ (80010fc <MX_TIM3_Init+0xec>)
 8001044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001048:	2263      	movs	r2, #99	@ 0x63
 800104a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001054:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001058:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b27      	ldr	r3, [pc, #156]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001066:	4824      	ldr	r0, [pc, #144]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001068:	f004 fbd0 	bl	800580c <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001072:	f000 f8b7 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001080:	4619      	mov	r1, r3
 8001082:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001084:	f004 ff30 	bl	8005ee8 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800108e:	f000 f8a9 	bl	80011e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001092:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001094:	f004 fc6c 	bl	8005970 <HAL_TIM_PWM_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800109e:	f000 f8a1 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	4619      	mov	r1, r3
 80010b0:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 80010b2:	f005 fae1 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010bc:	f000 f892 	bl	80011e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	@ 0x60
 80010c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80010c4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80010c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 80010da:	f004 fe43 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010e4:	f000 f87e 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e8:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 80010ea:	f000 f9ed 	bl	80014c8 <HAL_TIM_MspPostInit>

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	@ 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000220 	.word	0x20000220
 80010fc:	40000400 	.word	0x40000400

08001100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_DMA_Init+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <MX_DMA_Init+0x3c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2038      	movs	r0, #56	@ 0x38
 8001128:	f002 faa1 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800112c:	2038      	movs	r0, #56	@ 0x38
 800112e:	f002 faba 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <MX_GPIO_Init+0x9c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <MX_GPIO_Init+0x9c>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <MX_GPIO_Init+0x9c>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_GPIO_Init+0x9c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <MX_GPIO_Init+0xa0>)
 80011b2:	f002 ff87 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin;
 80011b6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_GPIO_Init+0xa0>)
 80011d0:	f002 fdf4 	bl	8003dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <Error_Handler+0x8>

080011f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <HAL_ADC_MspInit+0xdc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d157      	bne.n	8001312 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a2d      	ldr	r2, [pc, #180]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a26      	ldr	r2, [pc, #152]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <HAL_ADC_MspInit+0xe0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129a:	2301      	movs	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	481d      	ldr	r0, [pc, #116]	@ (8001324 <HAL_ADC_MspInit+0xe4>)
 80012ae:	f002 fd85 	bl	8003dbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012b4:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <HAL_ADC_MspInit+0xec>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 80012f8:	f002 f9f0 	bl	80036dc <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001302:	f7ff ff6f 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 800130a:	639a      	str	r2, [r3, #56]	@ 0x38
 800130c:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <HAL_ADC_MspInit+0xe8>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40012000 	.word	0x40012000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	200000cc 	.word	0x200000cc
 800132c:	40026410 	.word	0x40026410

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_I2C_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136e:	23c0      	movs	r3, #192	@ 0xc0
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	2312      	movs	r3, #18
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137e:	2304      	movs	r3, #4
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <HAL_I2C_MspInit+0x8c>)
 800138a:	f002 fd17 	bl	8003dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40005400 	.word	0x40005400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <HAL_SPI_MspInit+0x84>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 80013ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_SPI_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_D0_Pin|OLED_D1_Pin;
 800141a:	23a0      	movs	r3, #160	@ 0xa0
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142a:	2305      	movs	r3, #5
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_SPI_MspInit+0x8c>)
 8001436:	f002 fcc1 	bl	8003dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001460:	d116      	bne.n	8001490 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	201c      	movs	r0, #28
 8001484:	f002 f8f3 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001488:	201c      	movs	r0, #28
 800148a:	f002 f90c 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800148e:	e012      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_TIM_Base_MspInit+0x74>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10d      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_TIM_Base_MspInit+0x70>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40000400 	.word	0x40000400

080014c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <HAL_TIM_MspPostInit+0x68>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11d      	bne.n	8001526 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001506:	2340      	movs	r3, #64	@ 0x40
 8001508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_TIM_MspPostInit+0x70>)
 8001522:	f002 fc4b 	bl	8003dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000400 	.word	0x40000400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f001 fb4b 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f004 faef 	bl	8005b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001d8 	.word	0x200001d8

080015b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <DMA2_Stream0_IRQHandler+0x10>)
 80015b6:	f002 f997 	bl	80038e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000cc 	.word	0x200000cc

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f006 f9b2 	bl	800795c <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	20004300 	.word	0x20004300
 800162c:	20004850 	.word	0x20004850

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi1;
//extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	72fb      	strb	r3, [r7, #11]
 8001662:	4613      	mov	r3, r2
 8001664:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	3b28      	subs	r3, #40	@ 0x28
 800166a:	2b23      	cmp	r3, #35	@ 0x23
 800166c:	d865      	bhi.n	800173a <u8x8_stm32_gpio_and_delay+0xe6>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <u8x8_stm32_gpio_and_delay+0x20>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	0800173b 	.word	0x0800173b
 8001678:	08001705 	.word	0x08001705
 800167c:	0800173b 	.word	0x0800173b
 8001680:	0800173b 	.word	0x0800173b
 8001684:	0800173b 	.word	0x0800173b
 8001688:	0800173b 	.word	0x0800173b
 800168c:	0800173b 	.word	0x0800173b
 8001690:	0800173b 	.word	0x0800173b
 8001694:	0800173b 	.word	0x0800173b
 8001698:	0800173b 	.word	0x0800173b
 800169c:	0800173b 	.word	0x0800173b
 80016a0:	0800173b 	.word	0x0800173b
 80016a4:	0800173b 	.word	0x0800173b
 80016a8:	0800173b 	.word	0x0800173b
 80016ac:	0800173b 	.word	0x0800173b
 80016b0:	0800173b 	.word	0x0800173b
 80016b4:	0800173b 	.word	0x0800173b
 80016b8:	0800173b 	.word	0x0800173b
 80016bc:	0800173b 	.word	0x0800173b
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	0800173b 	.word	0x0800173b
 80016c8:	0800173b 	.word	0x0800173b
 80016cc:	0800173b 	.word	0x0800173b
 80016d0:	0800173b 	.word	0x0800173b
 80016d4:	0800173b 	.word	0x0800173b
 80016d8:	0800173b 	.word	0x0800173b
 80016dc:	0800173b 	.word	0x0800173b
 80016e0:	0800173b 	.word	0x0800173b
 80016e4:	0800173b 	.word	0x0800173b
 80016e8:	0800173b 	.word	0x0800173b
 80016ec:	0800173b 	.word	0x0800173b
 80016f0:	0800173b 	.word	0x0800173b
 80016f4:	0800173b 	.word	0x0800173b
 80016f8:	0800170f 	.word	0x0800170f
 80016fc:	0800171d 	.word	0x0800171d
 8001700:	0800172b 	.word	0x0800172b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001704:	7abb      	ldrb	r3, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fab0 	bl	8002c6c <HAL_Delay>
		break;
 800170c:	e015      	b.n	800173a <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800170e:	7abb      	ldrb	r3, [r7, #10]
 8001710:	461a      	mov	r2, r3
 8001712:	2110      	movs	r1, #16
 8001714:	480b      	ldr	r0, [pc, #44]	@ (8001744 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001716:	f002 fcd5 	bl	80040c4 <HAL_GPIO_WritePin>
		break;
 800171a:	e00e      	b.n	800173a <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800171c:	7abb      	ldrb	r3, [r7, #10]
 800171e:	461a      	mov	r2, r3
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	4808      	ldr	r0, [pc, #32]	@ (8001744 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001724:	f002 fcce 	bl	80040c4 <HAL_GPIO_WritePin>
		break;
 8001728:	e007      	b.n	800173a <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 800172a:	7abb      	ldrb	r3, [r7, #10]
 800172c:	461a      	mov	r2, r3
 800172e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001732:	4804      	ldr	r0, [pc, #16]	@ (8001744 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001734:	f002 fcc6 	bl	80040c4 <HAL_GPIO_WritePin>
		break;
 8001738:	bf00      	nop
	}
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020000 	.word	0x40020000

08001748 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	72fb      	strb	r3, [r7, #11]
 8001756:	4613      	mov	r3, r2
 8001758:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	3b14      	subs	r3, #20
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d847      	bhi.n	80017f2 <u8x8_byte_stm32_hw_spi+0xaa>
 8001762:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <u8x8_byte_stm32_hw_spi+0x20>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017f7 	.word	0x080017f7
 800176c:	080017f3 	.word	0x080017f3
 8001770:	080017f3 	.word	0x080017f3
 8001774:	0800179d 	.word	0x0800179d
 8001778:	080017c3 	.word	0x080017c3
 800177c:	080017db 	.word	0x080017db
 8001780:	080017f3 	.word	0x080017f3
 8001784:	080017f3 	.word	0x080017f3
 8001788:	080017f3 	.word	0x080017f3
 800178c:	080017f3 	.word	0x080017f3
 8001790:	080017f3 	.word	0x080017f3
 8001794:	080017f3 	.word	0x080017f3
 8001798:	080017b5 	.word	0x080017b5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 800179c:	7abb      	ldrb	r3, [r7, #10]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4818      	ldr	r0, [pc, #96]	@ (8001808 <u8x8_byte_stm32_hw_spi+0xc0>)
 80017a6:	f003 fe12 	bl	80053ce <HAL_SPI_Transmit>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d024      	beq.n	80017fa <u8x8_byte_stm32_hw_spi+0xb2>
 80017b0:	2300      	movs	r3, #0
 80017b2:	e024      	b.n	80017fe <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80017b4:	7abb      	ldrb	r3, [r7, #10]
 80017b6:	461a      	mov	r2, r3
 80017b8:	214a      	movs	r1, #74	@ 0x4a
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f001 f94b 	bl	8002a56 <u8x8_gpio_call>
		break;
 80017c0:	e01c      	b.n	80017fc <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	2149      	movs	r1, #73	@ 0x49
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f001 f942 	bl	8002a56 <u8x8_gpio_call>
		HAL_Delay(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f001 fa4a 	bl	8002c6c <HAL_Delay>
		break;
 80017d8:	e010      	b.n	80017fc <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f001 fa46 	bl	8002c6c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	461a      	mov	r2, r3
 80017e8:	2149      	movs	r1, #73	@ 0x49
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f001 f933 	bl	8002a56 <u8x8_gpio_call>
		break;
 80017f0:	e004      	b.n	80017fc <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e003      	b.n	80017fe <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80017fa:	bf00      	nop
	}
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000180 	.word	0x20000180

0800180c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	7c1b      	ldrb	r3, [r3, #16]
 800181a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f006 f886 	bl	800794c <memset>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
 8001854:	4613      	mov	r3, r2
 8001856:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	7c1b      	ldrb	r3, [r3, #16]
 800185e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b29b      	uxth	r3, r3
 800186e:	89ba      	ldrh	r2, [r7, #12]
 8001870:	fb12 f303 	smulbb	r3, r2, r3
 8001874:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800187c:	89bb      	ldrh	r3, [r7, #12]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4413      	add	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001884:	7bf9      	ldrb	r1, [r7, #15]
 8001886:	78ba      	ldrb	r2, [r7, #2]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	460b      	mov	r3, r1
 800188e:	2100      	movs	r1, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 f880 	bl	8002996 <u8x8_DrawTile>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018b0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80018b8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	7c5b      	ldrb	r3, [r3, #17]
 80018c0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80018c2:	7bba      	ldrb	r2, [r7, #14]
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffbd 	bl	8001848 <u8g2_send_tile_row>
    src_row++;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	7b7b      	ldrb	r3, [r7, #13]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d203      	bcs.n	80018ea <u8g2_send_buffer+0x4c>
 80018e2:	7bba      	ldrb	r2, [r7, #14]
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3eb      	bcc.n	80018c2 <u8g2_send_buffer+0x24>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffcf 	bl	800189e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 f899 	bl	8002a38 <u8x8_RefreshDisplay>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2208      	movs	r2, #8
 800191c:	701a      	strb	r2, [r3, #0]
  return buf;
 800191e:	4b03      	ldr	r3, [pc, #12]	@ (800192c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20004304 	.word	0x20004304

08001930 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8001946:	490c      	ldr	r1, [pc, #48]	@ (8001978 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f001 f8d5 	bl	8002af8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800194e:	f107 0313 	add.w	r3, r7, #19
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffdc 	bl	8001910 <u8g2_m_16_8_f>
 8001958:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800195a:	7cfa      	ldrb	r2, [r7, #19]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fc82 	bl	800226e <u8g2_SetupBuffer>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	080026b9 	.word	0x080026b9
 8001978:	08002891 	.word	0x08002891
 800197c:	080020f1 	.word	0x080020f1

08001980 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	81fb      	strh	r3, [r7, #14]
    font++;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3301      	adds	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	4413      	add	r3, r2
 80019d4:	81fb      	strh	r3, [r7, #14]
    return pos;
 80019d6:	89fb      	ldrh	r3, [r7, #14]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	6838      	ldr	r0, [r7, #0]
 80019f2:	f7ff ffc5 	bl	8001980 <u8g2_font_get_byte>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80019fe:	2101      	movs	r1, #1
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f7ff ffbd 	bl	8001980 <u8g2_font_get_byte>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6838      	ldr	r0, [r7, #0]
 8001a12:	f7ff ffb5 	bl	8001980 <u8g2_font_get_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001a1e:	2103      	movs	r1, #3
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7ff ffad 	bl	8001980 <u8g2_font_get_byte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001a2e:	2104      	movs	r1, #4
 8001a30:	6838      	ldr	r0, [r7, #0]
 8001a32:	f7ff ffa5 	bl	8001980 <u8g2_font_get_byte>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001a3e:	2105      	movs	r1, #5
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f7ff ff9d 	bl	8001980 <u8g2_font_get_byte>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001a4e:	2106      	movs	r1, #6
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7ff ff95 	bl	8001980 <u8g2_font_get_byte>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001a5e:	2107      	movs	r1, #7
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f7ff ff8d 	bl	8001980 <u8g2_font_get_byte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001a6e:	2108      	movs	r1, #8
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	f7ff ff85 	bl	8001980 <u8g2_font_get_byte>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001a7e:	2109      	movs	r1, #9
 8001a80:	6838      	ldr	r0, [r7, #0]
 8001a82:	f7ff ff7d 	bl	8001980 <u8g2_font_get_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b25a      	sxtb	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001a8e:	210a      	movs	r1, #10
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f7ff ff75 	bl	8001980 <u8g2_font_get_byte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001a9e:	210b      	movs	r1, #11
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f7ff ff6d 	bl	8001980 <u8g2_font_get_byte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001aae:	210c      	movs	r1, #12
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7ff ff65 	bl	8001980 <u8g2_font_get_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001abe:	210d      	movs	r1, #13
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7ff ff5d 	bl	8001980 <u8g2_font_get_byte>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b25a      	sxtb	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001ace:	210e      	movs	r1, #14
 8001ad0:	6838      	ldr	r0, [r7, #0]
 8001ad2:	f7ff ff55 	bl	8001980 <u8g2_font_get_byte>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001ade:	210f      	movs	r1, #15
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f7ff ff4d 	bl	8001980 <u8g2_font_get_byte>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001aee:	2110      	movs	r1, #16
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f7ff ff45 	bl	8001980 <u8g2_font_get_byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b25a      	sxtb	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001afe:	2111      	movs	r1, #17
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f7ff ff4f 	bl	80019a4 <u8g2_font_get_word>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001b0e:	2113      	movs	r1, #19
 8001b10:	6838      	ldr	r0, [r7, #0]
 8001b12:	f7ff ff47 	bl	80019a4 <u8g2_font_get_word>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001b1e:	2115      	movs	r1, #21
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f7ff ff3f 	bl	80019a4 <u8g2_font_get_word>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	82da      	strh	r2, [r3, #22]
#endif
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d05d      	beq.n	8001c02 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d04d      	beq.n	8001c04 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d11c      	bne.n	8001bac <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	da05      	bge.n	8001b8e <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dd32      	ble.n	8001c04 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001baa:	e02b      	b.n	8001c04 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bc2:	440b      	add	r3, r1
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	da0d      	bge.n	8001be4 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dd07      	ble.n	8001c04 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001c00:	e000      	b.n	8001c04 <u8g2_UpdateRefHeight+0xce>
    return;
 8001c02:	bf00      	nop
  }  
}
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return 0;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <u8g2_SetFontPosBaseline+0x1c>)
 8001c30:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	08001c0f 	.word	0x08001c0f

08001c44 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d00b      	beq.n	8001c70 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3374      	adds	r3, #116	@ 0x74
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff febd 	bl	80019e4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff63 	bl	8001b36 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	460b      	mov	r3, r1
 8001c88:	80fb      	strh	r3, [r7, #6]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	8abb      	ldrh	r3, [r7, #20]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001ca2:	8afa      	ldrh	r2, [r7, #22]
 8001ca4:	8abb      	ldrh	r3, [r7, #20]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d90b      	bls.n	8001cc2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d205      	bcs.n	8001cbe <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001cb2:	88bb      	ldrh	r3, [r7, #4]
 8001cb4:	82bb      	strh	r3, [r7, #20]
      b--;
 8001cb6:	8abb      	ldrh	r3, [r7, #20]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	82bb      	strh	r3, [r7, #20]
 8001cbc:	e001      	b.n	8001cc2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001cc2:	8afa      	ldrh	r2, [r7, #22]
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d301      	bcc.n	8001cce <u8g2_clip_intersection2+0x56>
    return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e01c      	b.n	8001d08 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001cce:	8aba      	ldrh	r2, [r7, #20]
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d801      	bhi.n	8001cda <u8g2_clip_intersection2+0x62>
    return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e016      	b.n	8001d08 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001cda:	8afa      	ldrh	r2, [r7, #22]
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d201      	bcs.n	8001ce6 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001ce6:	8aba      	ldrh	r2, [r7, #20]
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d901      	bls.n	8001cf2 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001cee:	88bb      	ldrh	r3, [r7, #4]
 8001cf0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8afa      	ldrh	r2, [r7, #22]
 8001cf6:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001cf8:	8aba      	ldrh	r2, [r7, #20]
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	8aba      	ldrh	r2, [r7, #20]
 8001d04:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	460b      	mov	r3, r1
 8001d28:	813b      	strh	r3, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d32:	893a      	ldrh	r2, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4603      	mov	r3, r0
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	47a0      	blx	r4
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}

08001d56 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d56:	b590      	push	{r4, r7, lr}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af02      	add	r7, sp, #8
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	4608      	mov	r0, r1
 8001d60:	4611      	mov	r1, r2
 8001d62:	461a      	mov	r2, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	817b      	strh	r3, [r7, #10]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	813b      	strh	r3, [r7, #8]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d072      	beq.n	8001e66 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d91a      	bls.n	8001dbc <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d109      	bne.n	8001da2 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001d8e:	897a      	ldrh	r2, [r7, #10]
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	817b      	strh	r3, [r7, #10]
	  x++;
 8001d98:	897b      	ldrh	r3, [r7, #10]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	817b      	strh	r3, [r7, #10]
 8001da0:	e00c      	b.n	8001dbc <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001da2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d108      	bne.n	8001dbc <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001daa:	893a      	ldrh	r2, [r7, #8]
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	813b      	strh	r3, [r7, #8]
	  y++;
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001dbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001dc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11a      	bne.n	8001e06 <u8g2_DrawHVLine+0xb0>
      {	if ( y < u8g2->user_y0 )
	  return;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001dd6:	893b      	ldrh	r3, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d83b      	bhi.n	8001e54 <u8g2_DrawHVLine+0xfe>
	if ( y >= u8g2->user_y1 )
	  return;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d937      	bls.n	8001e58 <u8g2_DrawHVLine+0x102>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001df4:	1db9      	adds	r1, r7, #6
 8001df6:	f107 000a 	add.w	r0, r7, #10
 8001dfa:	f7ff ff3d 	bl	8001c78 <u8g2_clip_intersection2>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11a      	bne.n	8001e3a <u8g2_DrawHVLine+0xe4>
      }
 8001e04:	e02f      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
      else
      {
	if ( x < u8g2->user_x0 )
	  return;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d824      	bhi.n	8001e5c <u8g2_DrawHVLine+0x106>
	if ( x >= u8g2->user_x1 )
	  return;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d920      	bls.n	8001e60 <u8g2_DrawHVLine+0x10a>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e2a:	1db9      	adds	r1, r7, #6
 8001e2c:	f107 0008 	add.w	r0, r7, #8
 8001e30:	f7ff ff22 	bl	8001c78 <u8g2_clip_intersection2>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d014      	beq.n	8001e64 <u8g2_DrawHVLine+0x10e>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	689c      	ldr	r4, [r3, #8]
 8001e40:	8979      	ldrh	r1, [r7, #10]
 8001e42:	893a      	ldrh	r2, [r7, #8]
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	47a0      	blx	r4
 8001e52:	e008      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
	if ( y >= u8g2->user_y1 )
 8001e54:	bf00      	nop
 8001e56:	e006      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001e58:	bf00      	nop
 8001e5a:	e004      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
	if ( x >= u8g2->user_x1 )
 8001e5c:	bf00      	nop
 8001e5e:	e002      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e60:	bf00      	nop
 8001e62:	e000      	b.n	8001e66 <u8g2_DrawHVLine+0x110>
      }
 8001e64:	bf00      	nop
}

 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <u8g2_DrawPixel>:
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
#ifdef U8G2_WITH_INTERSECTION
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	803b      	strh	r3, [r7, #0]
  if ( y < u8g2->user_y0 )
    return;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001e82:	883a      	ldrh	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d31a      	bcc.n	8001ebe <u8g2_DrawPixel+0x52>
  if ( y >= u8g2->user_y1 )
    return;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001e8e:	883a      	ldrh	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d216      	bcs.n	8001ec2 <u8g2_DrawPixel+0x56>
  if ( x < u8g2->user_x0 )
    return;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d312      	bcc.n	8001ec6 <u8g2_DrawPixel+0x5a>
  if ( x >= u8g2->user_x1 )
    return;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d20e      	bcs.n	8001eca <u8g2_DrawPixel+0x5e>
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
 8001eac:	883a      	ldrh	r2, [r7, #0]
 8001eae:	8879      	ldrh	r1, [r7, #2]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff4d 	bl	8001d56 <u8g2_DrawHVLine>
 8001ebc:	e006      	b.n	8001ecc <u8g2_DrawPixel+0x60>
  if ( y >= u8g2->user_y1 )
 8001ebe:	bf00      	nop
 8001ec0:	e004      	b.n	8001ecc <u8g2_DrawPixel+0x60>
  if ( x < u8g2->user_x0 )
 8001ec2:	bf00      	nop
 8001ec4:	e002      	b.n	8001ecc <u8g2_DrawPixel+0x60>
  if ( x >= u8g2->user_x1 )
 8001ec6:	bf00      	nop
 8001ec8:	e000      	b.n	8001ecc <u8g2_DrawPixel+0x60>
#endif /* U8G2_WITH_INTERSECTION */
 8001eca:	bf00      	nop

 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <u8g2_SetDrawColor>:
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  if ( color >= 3 )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d903      	bls.n	8001ef4 <u8g2_SetDrawColor+0x22>
}
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92

 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001f00:	b490      	push	{r4, r7}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4623      	mov	r3, r4
 8001f10:	80fb      	strh	r3, [r7, #6]
 8001f12:	4603      	mov	r3, r0
 8001f14:	80bb      	strh	r3, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	807b      	strh	r3, [r7, #2]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d20d      	bcs.n	8001f42 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f26:	883a      	ldrh	r2, [r7, #0]
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d901      	bls.n	8001f32 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e014      	b.n	8001f5c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	883b      	ldrh	r3, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d901      	bls.n	8001f3e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e00c      	b.n	8001f5c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f42:	883a      	ldrh	r2, [r7, #0]
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d907      	bls.n	8001f5a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	883b      	ldrh	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d901      	bls.n	8001f56 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e002      	b.n	8001f5c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001f5a:	2300      	movs	r3, #0
    }
  }
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc90      	pop	{r4, r7}
 8001f64:	4770      	bx	lr

08001f66 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4611      	mov	r1, r2
 8001f72:	461a      	mov	r2, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	813b      	strh	r3, [r7, #8]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001f8c:	8b3b      	ldrh	r3, [r7, #24]
 8001f8e:	893a      	ldrh	r2, [r7, #8]
 8001f90:	f7ff ffb6 	bl	8001f00 <u8g2_is_intersection_decision_tree>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <u8g2_IsIntersection+0x38>
    return 0; 
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e00a      	b.n	8001fb4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	897a      	ldrh	r2, [r7, #10]
 8001fae:	f7ff ffa7 	bl	8001f00 <u8g2_is_intersection_decision_tree>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	817b      	strh	r3, [r7, #10]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	813b      	strh	r3, [r7, #8]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8001fda:	897a      	ldrh	r2, [r7, #10]
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d904      	bls.n	8001fec <u8g2_DrawLine+0x30>
 8001fe2:	897a      	ldrh	r2, [r7, #10]
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	837b      	strh	r3, [r7, #26]
 8001fea:	e003      	b.n	8001ff4 <u8g2_DrawLine+0x38>
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8001ff4:	893a      	ldrh	r2, [r7, #8]
 8001ff6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d904      	bls.n	8002006 <u8g2_DrawLine+0x4a>
 8001ffc:	893a      	ldrh	r2, [r7, #8]
 8001ffe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	833b      	strh	r3, [r7, #24]
 8002004:	e003      	b.n	800200e <u8g2_DrawLine+0x52>
 8002006:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 800200e:	8b3a      	ldrh	r2, [r7, #24]
 8002010:	8b7b      	ldrh	r3, [r7, #26]
 8002012:	429a      	cmp	r2, r3
 8002014:	d913      	bls.n	800203e <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 800201a:	8b7b      	ldrh	r3, [r7, #26]
 800201c:	823b      	strh	r3, [r7, #16]
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	837b      	strh	r3, [r7, #26]
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	823b      	strh	r3, [r7, #16]
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	8a3b      	ldrh	r3, [r7, #16]
 8002030:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	823b      	strh	r3, [r7, #16]
 8002036:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002038:	80fb      	strh	r3, [r7, #6]
 800203a:	8a3b      	ldrh	r3, [r7, #16]
 800203c:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  if ( x1 > x2 ) 
 800203e:	897a      	ldrh	r2, [r7, #10]
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	429a      	cmp	r2, r3
 8002044:	d90b      	bls.n	800205e <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8002046:	897b      	ldrh	r3, [r7, #10]
 8002048:	823b      	strh	r3, [r7, #16]
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	8a3b      	ldrh	r3, [r7, #16]
 8002050:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8002052:	893b      	ldrh	r3, [r7, #8]
 8002054:	823b      	strh	r3, [r7, #16]
 8002056:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002058:	813b      	strh	r3, [r7, #8]
 800205a:	8a3b      	ldrh	r3, [r7, #16]
 800205c:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  err = dx >> 1;
 800205e:	8b7b      	ldrh	r3, [r7, #26]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	b29b      	uxth	r3, r3
 8002064:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8002066:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002068:	893b      	ldrh	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <u8g2_DrawLine+0xb8>
 800206e:	2301      	movs	r3, #1
 8002070:	82bb      	strh	r3, [r7, #20]
 8002072:	e002      	b.n	800207a <u8g2_DrawLine+0xbe>
 8002074:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002078:	82bb      	strh	r3, [r7, #20]
  y = y1;
 800207a:	893b      	ldrh	r3, [r7, #8]
 800207c:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002084:	4293      	cmp	r3, r2
 8002086:	d102      	bne.n	800208e <u8g2_DrawLine+0xd2>
    x2--;
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	3b01      	subs	r3, #1
 800208c:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 800208e:	897b      	ldrh	r3, [r7, #10]
 8002090:	83fb      	strh	r3, [r7, #30]
 8002092:	e024      	b.n	80020de <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 800209a:	8bba      	ldrh	r2, [r7, #28]
 800209c:	8bfb      	ldrh	r3, [r7, #30]
 800209e:	4619      	mov	r1, r3
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fee3 	bl	8001e6c <u8g2_DrawPixel>
 80020a6:	e005      	b.n	80020b4 <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80020a8:	8bfa      	ldrh	r2, [r7, #30]
 80020aa:	8bbb      	ldrh	r3, [r7, #28]
 80020ac:	4619      	mov	r1, r3
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff fedc 	bl	8001e6c <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 80020b4:	8afa      	ldrh	r2, [r7, #22]
 80020b6:	8b3b      	ldrh	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 80020be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da08      	bge.n	80020d8 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 80020c6:	8aba      	ldrh	r2, [r7, #20]
 80020c8:	8bbb      	ldrh	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 80020ce:	8afa      	ldrh	r2, [r7, #22]
 80020d0:	8b7b      	ldrh	r3, [r7, #26]
 80020d2:	4413      	add	r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 80020d8:	8bfb      	ldrh	r3, [r7, #30]
 80020da:	3301      	adds	r3, #1
 80020dc:	83fb      	strh	r3, [r7, #30]
 80020de:	8bfa      	ldrh	r2, [r7, #30]
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d9d6      	bls.n	8002094 <u8g2_DrawLine+0xd8>
    }
  }
}
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800210a:	893b      	ldrh	r3, [r7, #8]
 800210c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800210e:	7efb      	ldrb	r3, [r7, #27]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800211a:	7e3a      	ldrb	r2, [r7, #24]
 800211c:	7efb      	ldrb	r3, [r7, #27]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002132:	2b01      	cmp	r3, #1
 8002134:	d801      	bhi.n	800213a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002136:	7e3b      	ldrb	r3, [r7, #24]
 8002138:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002144:	7e3b      	ldrb	r3, [r7, #24]
 8002146:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002148:	893b      	ldrh	r3, [r7, #8]
 800214a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800214c:	8afb      	ldrh	r3, [r7, #22]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	7c1b      	ldrb	r3, [r3, #16]
 800215a:	461a      	mov	r2, r3
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	fb13 f302 	smulbb	r3, r3, r2
 8002162:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002168:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800216a:	8afb      	ldrh	r3, [r7, #22]
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800217a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d117      	bne.n	80021b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	7ebb      	ldrb	r3, [r7, #26]
 8002188:	4313      	orrs	r3, r2
 800218a:	b2da      	uxtb	r2, r3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	7e7b      	ldrb	r3, [r7, #25]
 8002196:	4053      	eors	r3, r2
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
	len--;
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e8      	bne.n	8002182 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80021b0:	e038      	b.n	8002224 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	7ebb      	ldrb	r3, [r7, #26]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	7e7b      	ldrb	r3, [r7, #25]
 80021c6:	4053      	eors	r3, r2
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80021ce:	7efb      	ldrb	r3, [r7, #27]
 80021d0:	3301      	adds	r3, #1
 80021d2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80021d4:	7efb      	ldrb	r3, [r7, #27]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	76fb      	strb	r3, [r7, #27]
      len--;
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	3b01      	subs	r3, #1
 80021e0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80021e2:	7efb      	ldrb	r3, [r7, #27]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d114      	bne.n	8002212 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80021ec:	461a      	mov	r2, r3
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d801      	bhi.n	8002202 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002208:	2b01      	cmp	r3, #1
 800220a:	d008      	beq.n	800221e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	767b      	strb	r3, [r7, #25]
 8002210:	e005      	b.n	800221e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002212:	7ebb      	ldrb	r3, [r7, #26]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002218:	7e7b      	ldrb	r3, [r7, #25]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1c6      	bne.n	80021b2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002224:	bf00      	nop
 8002226:	3724      	adds	r7, #36	@ 0x24
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800224e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ffa9 	bl	8002230 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fca0 	bl	8001c24 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002308:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	89fa      	ldrh	r2, [r7, #14]
 8002314:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	7c1b      	ldrb	r3, [r3, #16]
 800231a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	89fa      	ldrh	r2, [r7, #14]
 8002326:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800232e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	89fa      	ldrh	r2, [r7, #14]
 800233a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002342:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 800234c:	4413      	add	r3, r2
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	7c52      	ldrb	r2, [r2, #17]
 8002352:	4293      	cmp	r3, r2
 8002354:	dd07      	ble.n	8002366 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	7c5b      	ldrb	r3, [r3, #17]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	4413      	add	r3, r2
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	8a9a      	ldrh	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	8ada      	ldrh	r2, [r3, #22]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4603      	mov	r3, r0
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fdc4 	bl	8001f66 <u8g2_IsIntersection>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80023ec:	e03b      	b.n	8002466 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002402:	429a      	cmp	r2, r3
 8002404:	d205      	bcs.n	8002412 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800241e:	429a      	cmp	r2, r3
 8002420:	d905      	bls.n	800242e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800243a:	429a      	cmp	r2, r3
 800243c:	d205      	bcs.n	800244a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002456:	429a      	cmp	r2, r3
 8002458:	d905      	bls.n	8002466 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff3c 	bl	80022f4 <u8g2_update_dimension_common>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff7b 	bl	80023b4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af02      	add	r7, sp, #8
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	4608      	mov	r0, r1
 80024d0:	4611      	mov	r1, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	817b      	strh	r3, [r7, #10]
 80024d8:	460b      	mov	r3, r1
 80024da:	813b      	strh	r3, [r7, #8]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80024e0:	88f8      	ldrh	r0, [r7, #6]
 80024e2:	893a      	ldrh	r2, [r7, #8]
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	7e3b      	ldrb	r3, [r7, #24]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4603      	mov	r3, r0
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff fc11 	bl	8001d14 <u8g2_draw_hv_line_2dir>
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80024fa:	b590      	push	{r4, r7, lr}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691c      	ldr	r4, [r3, #16]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	2300      	movs	r3, #0
 800250e:	2120      	movs	r1, #32
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	47a0      	blx	r4
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}

0800251e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	460b      	mov	r3, r1
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691c      	ldr	r4, [r3, #16]
 8002530:	7afa      	ldrb	r2, [r7, #11]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2117      	movs	r1, #23
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	47a0      	blx	r4
 800253a:	4603      	mov	r3, r0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002550:	1cfb      	adds	r3, r7, #3
 8002552:	461a      	mov	r2, r3
 8002554:	2101      	movs	r1, #1
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffe1 	bl	800251e <u8x8_byte_SendBytes>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002566:	b590      	push	{r4, r7, lr}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68dc      	ldr	r4, [r3, #12]
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	2300      	movs	r3, #0
 800257a:	2115      	movs	r1, #21
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	47a0      	blx	r4
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}

0800258a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800258a:	b590      	push	{r4, r7, lr}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68dc      	ldr	r4, [r3, #12]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	2300      	movs	r3, #0
 800259e:	2116      	movs	r1, #22
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	47a0      	blx	r4
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025ae:	b590      	push	{r4, r7, lr}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	460b      	mov	r3, r1
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68dc      	ldr	r4, [r3, #12]
 80025c0:	7afa      	ldrb	r2, [r7, #11]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2117      	movs	r1, #23
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	47a0      	blx	r4
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68dc      	ldr	r4, [r3, #12]
 80025e0:	2300      	movs	r3, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	2118      	movs	r1, #24
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	47a0      	blx	r4
 80025ea:	4603      	mov	r3, r0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68dc      	ldr	r4, [r3, #12]
 8002600:	2300      	movs	r3, #0
 8002602:	2200      	movs	r2, #0
 8002604:	2119      	movs	r1, #25
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	47a0      	blx	r4
 800260a:	4603      	mov	r3, r0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	73fb      	strb	r3, [r7, #15]
    data++;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2bfe      	cmp	r3, #254	@ 0xfe
 800262e:	d031      	beq.n	8002694 <u8x8_cad_SendSequence+0x80>
 8002630:	2bfe      	cmp	r3, #254	@ 0xfe
 8002632:	dc3d      	bgt.n	80026b0 <u8x8_cad_SendSequence+0x9c>
 8002634:	2b19      	cmp	r3, #25
 8002636:	dc3b      	bgt.n	80026b0 <u8x8_cad_SendSequence+0x9c>
 8002638:	2b18      	cmp	r3, #24
 800263a:	da23      	bge.n	8002684 <u8x8_cad_SendSequence+0x70>
 800263c:	2b16      	cmp	r3, #22
 800263e:	dc02      	bgt.n	8002646 <u8x8_cad_SendSequence+0x32>
 8002640:	2b15      	cmp	r3, #21
 8002642:	da03      	bge.n	800264c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002644:	e034      	b.n	80026b0 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002646:	2b17      	cmp	r3, #23
 8002648:	d00e      	beq.n	8002668 <u8x8_cad_SendSequence+0x54>
	return;
 800264a:	e031      	b.n	80026b0 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68dc      	ldr	r4, [r3, #12]
 8002656:	7bba      	ldrb	r2, [r7, #14]
 8002658:	7bf9      	ldrb	r1, [r7, #15]
 800265a:	2300      	movs	r3, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	47a0      	blx	r4
	  data++;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	603b      	str	r3, [r7, #0]
	  break;
 8002666:	e022      	b.n	80026ae <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800266e:	f107 030e 	add.w	r3, r7, #14
 8002672:	461a      	mov	r2, r3
 8002674:	2101      	movs	r1, #1
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff99 	bl	80025ae <u8x8_cad_SendData>
	  data++;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	603b      	str	r3, [r7, #0]
	  break;
 8002682:	e014      	b.n	80026ae <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68dc      	ldr	r4, [r3, #12]
 8002688:	7bf9      	ldrb	r1, [r7, #15]
 800268a:	2300      	movs	r3, #0
 800268c:	2200      	movs	r2, #0
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	47a0      	blx	r4
	  break;
 8002692:	e00c      	b.n	80026ae <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	461a      	mov	r2, r3
 800269e:	2129      	movs	r1, #41	@ 0x29
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f9d8 	bl	8002a56 <u8x8_gpio_call>
	  data++;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	603b      	str	r3, [r7, #0]
	  break;
 80026ac:	bf00      	nop
    cmd = *data;
 80026ae:	e7b6      	b.n	800261e <u8x8_cad_SendSequence+0xa>
	return;
 80026b0:	bf00      	nop
    }
  }
}
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}

080026b8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	72fb      	strb	r3, [r7, #11]
 80026c6:	4613      	mov	r3, r2
 80026c8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	3b14      	subs	r3, #20
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d82f      	bhi.n	8002732 <u8x8_cad_001+0x7a>
 80026d2:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <u8x8_cad_001+0x20>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	08002721 	.word	0x08002721
 80026dc:	080026f1 	.word	0x080026f1
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002719 	.word	0x08002719
 80026e8:	08002721 	.word	0x08002721
 80026ec:	08002721 	.word	0x08002721
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff01 	bl	80024fa <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80026f8:	7abb      	ldrb	r3, [r7, #10]
 80026fa:	4619      	mov	r1, r3
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff ff21 	bl	8002544 <u8x8_byte_SendByte>
      break;
 8002702:	e018      	b.n	8002736 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002704:	2100      	movs	r1, #0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fef7 	bl	80024fa <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800270c:	7abb      	ldrb	r3, [r7, #10]
 800270e:	4619      	mov	r1, r3
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ff17 	bl	8002544 <u8x8_byte_SendByte>
      break;
 8002716:	e00e      	b.n	8002736 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002718:	2101      	movs	r1, #1
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff feed 	bl	80024fa <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	691c      	ldr	r4, [r3, #16]
 8002724:	7aba      	ldrb	r2, [r7, #10]
 8002726:	7af9      	ldrb	r1, [r7, #11]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	47a0      	blx	r4
 800272e:	4603      	mov	r3, r0
 8002730:	e002      	b.n	8002738 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <u8x8_cad_001+0x80>
  }
  return 1;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}

08002740 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	72fb      	strb	r3, [r7, #11]
 800274e:	4613      	mov	r3, r2
 8002750:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	3b0b      	subs	r3, #11
 8002756:	2b04      	cmp	r3, #4
 8002758:	f200 808a 	bhi.w	8002870 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800275c:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002779 	.word	0x08002779
 8002768:	08002871 	.word	0x08002871
 800276c:	08002793 	.word	0x08002793
 8002770:	080027c5 	.word	0x080027c5
 8002774:	080027e5 	.word	0x080027e5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002778:	7abb      	ldrb	r3, [r7, #10]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800277e:	4940      	ldr	r1, [pc, #256]	@ (8002880 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff ff47 	bl	8002614 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002786:	e075      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002788:	493e      	ldr	r1, [pc, #248]	@ (8002884 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff ff42 	bl	8002614 <u8x8_cad_SendSequence>
      break;
 8002790:	e070      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002792:	7abb      	ldrb	r3, [r7, #10]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002798:	493b      	ldr	r1, [pc, #236]	@ (8002888 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff3a 	bl	8002614 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	7c9a      	ldrb	r2, [r3, #18]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80027ac:	e062      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80027ae:	4937      	ldr	r1, [pc, #220]	@ (800288c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff ff2f 	bl	8002614 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	7cda      	ldrb	r2, [r3, #19]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 80027c2:	e057      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff ff05 	bl	80025d4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80027ca:	2181      	movs	r1, #129	@ 0x81
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff feca 	bl	8002566 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80027d2:	7abb      	ldrb	r3, [r7, #10]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fed7 	bl	800258a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff ff09 	bl	80025f4 <u8x8_cad_EndTransfer>
      break;
 80027e2:	e047      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fef5 	bl	80025d4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	795b      	ldrb	r3, [r3, #5]
 80027ee:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	4413      	add	r3, r2
 8002800:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002802:	2140      	movs	r1, #64	@ 0x40
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff feae 	bl	8002566 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fea4 	bl	8002566 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4619      	mov	r1, r3
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff feae 	bl	800258a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	799b      	ldrb	r3, [r3, #6]
 8002832:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff fea5 	bl	800258a <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800284c:	7dbb      	ldrb	r3, [r7, #22]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4619      	mov	r1, r3
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fea9 	bl	80025ae <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800285c:	7abb      	ldrb	r3, [r7, #10]
 800285e:	3b01      	subs	r3, #1
 8002860:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002862:	7abb      	ldrb	r3, [r7, #10]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1eb      	bne.n	8002840 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fec3 	bl	80025f4 <u8x8_cad_EndTransfer>
      break;
 800286e:	e001      	b.n	8002874 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	08008a84 	.word	0x08008a84
 8002884:	08008a8c 	.word	0x08008a8c
 8002888:	08008a94 	.word	0x08008a94
 800288c:	08008a9c 	.word	0x08008a9c

08002890 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	72fb      	strb	r3, [r7, #11]
 800289e:	4613      	mov	r3, r2
 80028a0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80028a2:	7aba      	ldrb	r2, [r7, #10]
 80028a4:	7af9      	ldrb	r1, [r7, #11]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff ff49 	bl	8002740 <u8x8_d_ssd1306_sh1106_generic>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e014      	b.n	80028e2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	2b09      	cmp	r3, #9
 80028bc:	d009      	beq.n	80028d2 <u8x8_d_ssd1306_128x64_noname+0x42>
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d10c      	bne.n	80028dc <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f82a 	bl	800291c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80028c8:	4908      	ldr	r1, [pc, #32]	@ (80028ec <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fea2 	bl	8002614 <u8x8_cad_SendSequence>
      break;
 80028d0:	e006      	b.n	80028e0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80028d2:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f80d 	bl	80028f4 <u8x8_d_helper_display_setup_memory>
      break;
 80028da:	e001      	b.n	80028e0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08008a4c 	.word	0x08008a4c
 80028f0:	08008aa4 	.word	0x08008aa4

080028f4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	7c9a      	ldrb	r2, [r3, #18]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695c      	ldr	r4, [r3, #20]
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	2128      	movs	r1, #40	@ 0x28
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68dc      	ldr	r4, [r3, #12]
 8002936:	2300      	movs	r3, #0
 8002938:	2200      	movs	r2, #0
 800293a:	2114      	movs	r1, #20
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002940:	2201      	movs	r2, #1
 8002942:	214b      	movs	r1, #75	@ 0x4b
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f886 	bl	8002a56 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	791b      	ldrb	r3, [r3, #4]
 8002950:	461a      	mov	r2, r3
 8002952:	2129      	movs	r1, #41	@ 0x29
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f87e 	bl	8002a56 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	214b      	movs	r1, #75	@ 0x4b
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f879 	bl	8002a56 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	791b      	ldrb	r3, [r3, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	2129      	movs	r1, #41	@ 0x29
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f871 	bl	8002a56 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002974:	2201      	movs	r2, #1
 8002976:	214b      	movs	r1, #75	@ 0x4b
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f86c 	bl	8002a56 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	461a      	mov	r2, r3
 8002986:	2129      	movs	r1, #41	@ 0x29
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f864 	bl	8002a56 <u8x8_gpio_call>
}    
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}

08002996 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002996:	b590      	push	{r4, r7, lr}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	4608      	mov	r0, r1
 80029a0:	4611      	mov	r1, r2
 80029a2:	461a      	mov	r2, r3
 80029a4:	4603      	mov	r3, r0
 80029a6:	70fb      	strb	r3, [r7, #3]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70bb      	strb	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80029b4:	78bb      	ldrb	r3, [r7, #2]
 80029b6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689c      	ldr	r4, [r3, #8]
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	2201      	movs	r2, #1
 80029ca:	210f      	movs	r1, #15
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	47a0      	blx	r4
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}

080029da <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80029da:	b590      	push	{r4, r7, lr}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689c      	ldr	r4, [r3, #8]
 80029e6:	2300      	movs	r3, #0
 80029e8:	2200      	movs	r2, #0
 80029ea:	2109      	movs	r1, #9
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	47a0      	blx	r4
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689c      	ldr	r4, [r3, #8]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2200      	movs	r2, #0
 8002a08:	210a      	movs	r1, #10
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}

08002a16 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002a16:	b590      	push	{r4, r7, lr}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689c      	ldr	r4, [r3, #8]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	210b      	movs	r1, #11
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	47a0      	blx	r4
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd90      	pop	{r4, r7, pc}

08002a38 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689c      	ldr	r4, [r3, #8]
 8002a44:	2300      	movs	r3, #0
 8002a46:	2200      	movs	r2, #0
 8002a48:	2110      	movs	r1, #16
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	47a0      	blx	r4
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}

08002a56 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695c      	ldr	r4, [r3, #20]
 8002a6a:	78ba      	ldrb	r2, [r7, #2]
 8002a6c:	78f9      	ldrb	r1, [r7, #3]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	47a0      	blx	r4
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	72fb      	strb	r3, [r7, #11]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a11      	ldr	r2, [pc, #68]	@ (8002af4 <u8x8_SetupDefaults+0x58>)
 8002aae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <u8x8_SetupDefaults+0x58>)
 8002ab4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <u8x8_SetupDefaults+0x58>)
 8002aba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <u8x8_SetupDefaults+0x58>)
 8002ac0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	22ff      	movs	r2, #255	@ 0xff
 8002ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	08002a7d 	.word	0x08002a7d

08002af8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff ffc8 	bl	8002a9c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff ff58 	bl	80029da <u8x8_SetupMemory>
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b38:	f7fe fd7a 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b3c:	480c      	ldr	r0, [pc, #48]	@ (8002b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b3e:	490d      	ldr	r1, [pc, #52]	@ (8002b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b40:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b54:	4c0a      	ldr	r4, [pc, #40]	@ (8002b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b62:	f004 ff01 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7fd fe89 	bl	800087c <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002b78:	0801bf60 	.word	0x0801bf60
  ldr r2, =_sbss
 8002b7c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002b80:	20004850 	.word	0x20004850

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <HAL_Init+0x40>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <HAL_Init+0x40>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_Init+0x40>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 fd51 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7fe fb18 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd69 	bl	80036c2 <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 fd31 	bl	800366e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	@ (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000008 	.word	0x20000008
 8002c24:	20000010 	.word	0x20000010
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	20004704 	.word	0x20004704

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20004704 	.word	0x20004704

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000010 	.word	0x20000010

08002cb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e033      	b.n	8002d32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe fab4 	bl	8001240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cfa:	f023 0302 	bic.w	r3, r3, #2
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa58 	bl	80031bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d22:	e001      	b.n	8002d28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Start_DMA+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0ce      	b.n	8002ef8 <HAL_ADC_Start_DMA+0x1bc>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d018      	beq.n	8002da2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d80:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <HAL_ADC_Start_DMA+0x1c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a5f      	ldr	r2, [pc, #380]	@ (8002f04 <HAL_ADC_Start_DMA+0x1c8>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0c9a      	lsrs	r2, r3, #18
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f9      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db0:	d107      	bne.n	8002dc2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	f040 8086 	bne.w	8002ede <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dfc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f023 0206 	bic.w	r2, r3, #6
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e1e:	e002      	b.n	8002e26 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e2e:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_ADC_Start_DMA+0x1cc>)
 8002e30:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	4a35      	ldr	r2, [pc, #212]	@ (8002f0c <HAL_ADC_Start_DMA+0x1d0>)
 8002e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	4a34      	ldr	r2, [pc, #208]	@ (8002f10 <HAL_ADC_Start_DMA+0x1d4>)
 8002e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e46:	4a33      	ldr	r2, [pc, #204]	@ (8002f14 <HAL_ADC_Start_DMA+0x1d8>)
 8002e48:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e62:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e72:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	334c      	adds	r3, #76	@ 0x4c
 8002e7e:	4619      	mov	r1, r3
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f000 fcd8 	bl	8003838 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d129      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	e020      	b.n	8002ef6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <HAL_ADC_Start_DMA+0x1dc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x1ba>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d114      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	e00b      	b.n	8002ef6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000008 	.word	0x20000008
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	40012300 	.word	0x40012300
 8002f0c:	080033b5 	.word	0x080033b5
 8002f10:	0800346f 	.word	0x0800346f
 8002f14:	0800348b 	.word	0x0800348b
 8002f18:	40012000 	.word	0x40012000

08002f1c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1c>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e113      	b.n	800319c <HAL_ADC_ConfigChannel+0x244>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d925      	bls.n	8002fd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68d9      	ldr	r1, [r3, #12]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	3b1e      	subs	r3, #30
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68d9      	ldr	r1, [r3, #12]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4403      	add	r3, r0
 8002fc2:	3b1e      	subs	r3, #30
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	e022      	b.n	8003016 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6919      	ldr	r1, [r3, #16]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	4603      	mov	r3, r0
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4403      	add	r3, r0
 800300c:	409a      	lsls	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b06      	cmp	r3, #6
 800301c:	d824      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b05      	subs	r3, #5
 8003030:	221f      	movs	r2, #31
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	400a      	ands	r2, r1
 800303e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b05      	subs	r3, #5
 800305a:	fa00 f203 	lsl.w	r2, r0, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	@ 0x34
 8003066:	e04c      	b.n	8003102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	d824      	bhi.n	80030ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	3b23      	subs	r3, #35	@ 0x23
 8003082:	221f      	movs	r2, #31
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43da      	mvns	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	400a      	ands	r2, r1
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3b23      	subs	r3, #35	@ 0x23
 80030ac:	fa00 f203 	lsl.w	r2, r0, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030b8:	e023      	b.n	8003102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	3b41      	subs	r3, #65	@ 0x41
 80030cc:	221f      	movs	r2, #31
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	400a      	ands	r2, r1
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	4618      	mov	r0, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	3b41      	subs	r3, #65	@ 0x41
 80030f6:	fa00 f203 	lsl.w	r2, r0, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003102:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <HAL_ADC_ConfigChannel+0x250>)
 8003104:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <HAL_ADC_ConfigChannel+0x254>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d10f      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1d8>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b12      	cmp	r3, #18
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_ADC_ConfigChannel+0x254>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d12b      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x23a>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_ADC_ConfigChannel+0x258>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <HAL_ADC_ConfigChannel+0x1f4>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b11      	cmp	r3, #17
 800314a:	d122      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a11      	ldr	r2, [pc, #68]	@ (80031b0 <HAL_ADC_ConfigChannel+0x258>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_ADC_ConfigChannel+0x25c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <HAL_ADC_ConfigChannel+0x260>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	0c9a      	lsrs	r2, r3, #18
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b01      	subs	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012300 	.word	0x40012300
 80031ac:	40012000 	.word	0x40012000
 80031b0:	10000012 	.word	0x10000012
 80031b4:	20000008 	.word	0x20000008
 80031b8:	431bde83 	.word	0x431bde83

080031bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c4:	4b79      	ldr	r3, [pc, #484]	@ (80033ac <ADC_Init+0x1f0>)
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	021a      	lsls	r2, r3, #8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324e:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <ADC_Init+0x1f4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003262:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6899      	ldr	r1, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	e00f      	b.n	80032ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0202 	bic.w	r2, r2, #2
 80032c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7e1b      	ldrb	r3, [r3, #24]
 80032d4:	005a      	lsls	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003306:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	3b01      	subs	r3, #1
 8003314:	035a      	lsls	r2, r3, #13
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	e007      	b.n	8003330 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800333e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	3b01      	subs	r3, #1
 800334c:	051a      	lsls	r2, r3, #20
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6899      	ldr	r1, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003372:	025a      	lsls	r2, r3, #9
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	029a      	lsls	r2, r3, #10
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40012300 	.word	0x40012300
 80033b0:	0f000001 	.word	0x0f000001

080033b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d13c      	bne.n	8003448 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d12b      	bne.n	8003440 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d127      	bne.n	8003440 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003408:	2b00      	cmp	r3, #0
 800340a:	d119      	bne.n	8003440 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0220 	bic.w	r2, r2, #32
 800341a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fd6b 	bl	8002f1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003446:	e00e      	b.n	8003466 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff fd75 	bl	8002f44 <HAL_ADC_ErrorCallback>
}
 800345a:	e004      	b.n	8003466 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fd57 	bl	8002f30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2240      	movs	r2, #64	@ 0x40
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fd4a 	bl	8002f44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	@ (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff29 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff3e 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff31 	bl	800351c <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff fab4 	bl	8002c54 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e099      	b.n	800382c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003718:	e00f      	b.n	800373a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371a:	f7ff fa9b 	bl	8002c54 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b05      	cmp	r3, #5
 8003726:	d908      	bls.n	800373a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e078      	b.n	800382c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e8      	bne.n	800371a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4b38      	ldr	r3, [pc, #224]	@ (8003834 <HAL_DMA_Init+0x158>)
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	2b04      	cmp	r3, #4
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	4313      	orrs	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d117      	bne.n	80037fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa6f 	bl	8003cc4 <DMA_CheckFifoParam>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037fa:	2301      	movs	r3, #1
 80037fc:	e016      	b.n	800382c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa26 	bl	8003c58 <DMA_CalcBaseAndBitshift>
 800380c:	4603      	mov	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	223f      	movs	r2, #63	@ 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	f010803f 	.word	0xf010803f

08003838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_DMA_Start_IT+0x26>
 800385a:	2302      	movs	r3, #2
 800385c:	e040      	b.n	80038e0 <HAL_DMA_Start_IT+0xa8>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d12f      	bne.n	80038d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f9b8 	bl	8003bfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	223f      	movs	r2, #63	@ 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0216 	orr.w	r2, r2, #22
 80038a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e005      	b.n	80038de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b30 <HAL_DMA_IRQHandler+0x248>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003b34 <HAL_DMA_IRQHandler+0x24c>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a9b      	lsrs	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	2208      	movs	r2, #8
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01a      	beq.n	8003954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	2208      	movs	r2, #8
 8003942:	409a      	lsls	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f043 0201 	orr.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	2201      	movs	r2, #1
 800395a:	409a      	lsls	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	2201      	movs	r2, #1
 8003978:	409a      	lsls	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	f043 0202 	orr.w	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398e:	2204      	movs	r2, #4
 8003990:	409a      	lsls	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	2204      	movs	r2, #4
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	2210      	movs	r2, #16
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d043      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d03c      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	2210      	movs	r2, #16
 80039e4:	409a      	lsls	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d024      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
 8003a16:	e01f      	b.n	8003a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01b      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
 8003a28:	e016      	b.n	8003a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0208 	bic.w	r2, r2, #8
 8003a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 808f 	beq.w	8003b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8087 	beq.w	8003b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7e:	2220      	movs	r2, #32
 8003a80:	409a      	lsls	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d136      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0216 	bic.w	r2, r2, #22
 8003aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x1da>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0208 	bic.w	r2, r2, #8
 8003ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad6:	223f      	movs	r2, #63	@ 0x3f
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d07e      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
        }
        return;
 8003afe:	e079      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10d      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
 8003b2c:	e02c      	b.n	8003b88 <HAL_DMA_IRQHandler+0x2a0>
 8003b2e:	bf00      	nop
 8003b30:	20000008 	.word	0x20000008
 8003b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d023      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
 8003b48:	e01e      	b.n	8003b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10f      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0210 	bic.w	r2, r2, #16
 8003b66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d032      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d022      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d307      	bcc.n	8003bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f2      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x2cc>
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bf4:	bf00      	nop
    }
  }
}
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b40      	cmp	r3, #64	@ 0x40
 8003c28:	d108      	bne.n	8003c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c3a:	e007      	b.n	8003c4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	3b10      	subs	r3, #16
 8003c68:	4a14      	ldr	r2, [pc, #80]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x64>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c72:	4a13      	ldr	r2, [pc, #76]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d909      	bls.n	8003c9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c98:	e007      	b.n	8003caa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	aaaaaaab 	.word	0xaaaaaaab
 8003cc0:	08008abc 	.word	0x08008abc

08003cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11f      	bne.n	8003d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d856      	bhi.n	8003d92 <DMA_CheckFifoParam+0xce>
 8003ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <DMA_CheckFifoParam+0x28>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d0f 	.word	0x08003d0f
 8003cf4:	08003cfd 	.word	0x08003cfd
 8003cf8:	08003d93 	.word	0x08003d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d046      	beq.n	8003d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e043      	b.n	8003d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d16:	d140      	bne.n	8003d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1c:	e03d      	b.n	8003d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d26:	d121      	bne.n	8003d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d837      	bhi.n	8003d9e <DMA_CheckFifoParam+0xda>
 8003d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <DMA_CheckFifoParam+0x70>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d4b 	.word	0x08003d4b
 8003d3c:	08003d45 	.word	0x08003d45
 8003d40:	08003d5d 	.word	0x08003d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e030      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d025      	beq.n	8003da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5a:	e022      	b.n	8003da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d6a:	e01c      	b.n	8003da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d903      	bls.n	8003d7a <DMA_CheckFifoParam+0xb6>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d003      	beq.n	8003d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d78:	e018      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7e:	e015      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e00b      	b.n	8003daa <DMA_CheckFifoParam+0xe6>
      break;
 8003d92:	bf00      	nop
 8003d94:	e00a      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e008      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e006      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e004      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e002      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;   
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <DMA_CheckFifoParam+0xe8>
      break;
 8003daa:	bf00      	nop
    }
  } 
  
  return status; 
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e159      	b.n	800408c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	f040 8148 	bne.w	8004086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d005      	beq.n	8003e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d130      	bne.n	8003e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e44:	2201      	movs	r2, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 0201 	and.w	r2, r3, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d017      	beq.n	8003eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d123      	bne.n	8003f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	08da      	lsrs	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3208      	adds	r2, #8
 8003ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	220f      	movs	r2, #15
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	69b9      	ldr	r1, [r7, #24]
 8003efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80a2 	beq.w	8004086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	4b57      	ldr	r3, [pc, #348]	@ (80040a4 <HAL_GPIO_Init+0x2e8>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	4a56      	ldr	r2, [pc, #344]	@ (80040a4 <HAL_GPIO_Init+0x2e8>)
 8003f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f52:	4b54      	ldr	r3, [pc, #336]	@ (80040a4 <HAL_GPIO_Init+0x2e8>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5e:	4a52      	ldr	r2, [pc, #328]	@ (80040a8 <HAL_GPIO_Init+0x2ec>)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a49      	ldr	r2, [pc, #292]	@ (80040ac <HAL_GPIO_Init+0x2f0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d019      	beq.n	8003fbe <HAL_GPIO_Init+0x202>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a48      	ldr	r2, [pc, #288]	@ (80040b0 <HAL_GPIO_Init+0x2f4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x1fe>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a47      	ldr	r2, [pc, #284]	@ (80040b4 <HAL_GPIO_Init+0x2f8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x1fa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a46      	ldr	r2, [pc, #280]	@ (80040b8 <HAL_GPIO_Init+0x2fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x1f6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a45      	ldr	r2, [pc, #276]	@ (80040bc <HAL_GPIO_Init+0x300>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x1f2>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e008      	b.n	8003fc0 <HAL_GPIO_Init+0x204>
 8003fae:	2307      	movs	r3, #7
 8003fb0:	e006      	b.n	8003fc0 <HAL_GPIO_Init+0x204>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e004      	b.n	8003fc0 <HAL_GPIO_Init+0x204>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_Init+0x204>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_GPIO_Init+0x204>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f002 0203 	and.w	r2, r2, #3
 8003fc6:	0092      	lsls	r2, r2, #2
 8003fc8:	4093      	lsls	r3, r2
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd0:	4935      	ldr	r1, [pc, #212]	@ (80040a8 <HAL_GPIO_Init+0x2ec>)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fde:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004002:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004008:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800402c:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004032:	4b23      	ldr	r3, [pc, #140]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004056:	4a1a      	ldr	r2, [pc, #104]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800405c:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004080:	4a0f      	ldr	r2, [pc, #60]	@ (80040c0 <HAL_GPIO_Init+0x304>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	f67f aea2 	bls.w	8003dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3724      	adds	r7, #36	@ 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40020400 	.word	0x40020400
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40013c00 	.word	0x40013c00

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040e0:	e003      	b.n	80040ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	041a      	lsls	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e12b      	b.n	8004362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd f906 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	@ 0x24
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800414a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800415a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800415c:	f001 f89a 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8004160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4a81      	ldr	r2, [pc, #516]	@ (800436c <HAL_I2C_Init+0x274>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d807      	bhi.n	800417c <HAL_I2C_Init+0x84>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a80      	ldr	r2, [pc, #512]	@ (8004370 <HAL_I2C_Init+0x278>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e006      	b.n	800418a <HAL_I2C_Init+0x92>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a7d      	ldr	r2, [pc, #500]	@ (8004374 <HAL_I2C_Init+0x27c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	bf94      	ite	ls
 8004184:	2301      	movls	r3, #1
 8004186:	2300      	movhi	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0e7      	b.n	8004362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a78      	ldr	r2, [pc, #480]	@ (8004378 <HAL_I2C_Init+0x280>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0c9b      	lsrs	r3, r3, #18
 800419c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a6a      	ldr	r2, [pc, #424]	@ (800436c <HAL_I2C_Init+0x274>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <HAL_I2C_Init+0xd4>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3301      	adds	r3, #1
 80041ca:	e009      	b.n	80041e0 <HAL_I2C_Init+0xe8>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	4a69      	ldr	r2, [pc, #420]	@ (800437c <HAL_I2C_Init+0x284>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	3301      	adds	r3, #1
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	495c      	ldr	r1, [pc, #368]	@ (800436c <HAL_I2C_Init+0x274>)
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d819      	bhi.n	8004234 <HAL_I2C_Init+0x13c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1e59      	subs	r1, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fbb1 f3f3 	udiv	r3, r1, r3
 800420e:	1c59      	adds	r1, r3, #1
 8004210:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004214:	400b      	ands	r3, r1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_I2C_Init+0x138>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e59      	subs	r1, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fbb1 f3f3 	udiv	r3, r1, r3
 8004228:	3301      	adds	r3, #1
 800422a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422e:	e051      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 8004230:	2304      	movs	r3, #4
 8004232:	e04f      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d111      	bne.n	8004260 <HAL_I2C_Init+0x168>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e58      	subs	r0, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	440b      	add	r3, r1
 800424a:	fbb0 f3f3 	udiv	r3, r0, r3
 800424e:	3301      	adds	r3, #1
 8004250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e012      	b.n	8004286 <HAL_I2C_Init+0x18e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1e58      	subs	r0, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	0099      	lsls	r1, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	fbb0 f3f3 	udiv	r3, r0, r3
 8004276:	3301      	adds	r3, #1
 8004278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427c:	2b00      	cmp	r3, #0
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Init+0x196>
 800428a:	2301      	movs	r3, #1
 800428c:	e022      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10e      	bne.n	80042b4 <HAL_I2C_Init+0x1bc>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e58      	subs	r0, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	440b      	add	r3, r1
 80042a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b2:	e00f      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	0099      	lsls	r1, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	6809      	ldr	r1, [r1, #0]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6911      	ldr	r1, [r2, #16]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	000186a0 	.word	0x000186a0
 8004370:	001e847f 	.word	0x001e847f
 8004374:	003d08ff 	.word	0x003d08ff
 8004378:	431bde83 	.word	0x431bde83
 800437c:	10624dd3 	.word	0x10624dd3

08004380 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	461a      	mov	r2, r3
 800438c:	460b      	mov	r3, r1
 800438e:	817b      	strh	r3, [r7, #10]
 8004390:	4613      	mov	r3, r2
 8004392:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7fe fc5e 	bl	8002c54 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	f040 80e0 	bne.w	8004568 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2319      	movs	r3, #25
 80043ae:	2201      	movs	r2, #1
 80043b0:	4970      	ldr	r1, [pc, #448]	@ (8004574 <HAL_I2C_Master_Transmit+0x1f4>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f964 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	e0d3      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_I2C_Master_Transmit+0x50>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e0cc      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d007      	beq.n	80043f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004404:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	@ 0x21
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2210      	movs	r2, #16
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	893a      	ldrh	r2, [r7, #8]
 8004426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a50      	ldr	r2, [pc, #320]	@ (8004578 <HAL_I2C_Master_Transmit+0x1f8>)
 8004436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004438:	8979      	ldrh	r1, [r7, #10]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f89c 	bl	800457c <I2C_MasterRequestWrite>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e08d      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004464:	e066      	b.n	8004534 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6a39      	ldr	r1, [r7, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa22 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b04      	cmp	r3, #4
 800447c:	d107      	bne.n	800448e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e06b      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11b      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x188>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	6a39      	ldr	r1, [r7, #32]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fa19 	bl	8004944 <I2C_WaitOnBTFFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	2b04      	cmp	r3, #4
 800451e:	d107      	bne.n	8004530 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e01a      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d194      	bne.n	8004466 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	00100002 	.word	0x00100002
 8004578:	ffff0000 	.word	0xffff0000

0800457c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	460b      	mov	r3, r1
 800458a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d006      	beq.n	80045a6 <I2C_MasterRequestWrite+0x2a>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d003      	beq.n	80045a6 <I2C_MasterRequestWrite+0x2a>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045a4:	d108      	bne.n	80045b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e00b      	b.n	80045d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	2b12      	cmp	r3, #18
 80045be:	d107      	bne.n	80045d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f84f 	bl	8004680 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f6:	d103      	bne.n	8004600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e035      	b.n	8004670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800460c:	d108      	bne.n	8004620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e01b      	b.n	8004658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	11db      	asrs	r3, r3, #7
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f063 030f 	orn	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	490e      	ldr	r1, [pc, #56]	@ (8004678 <I2C_MasterRequestWrite+0xfc>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f898 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e010      	b.n	8004670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4907      	ldr	r1, [pc, #28]	@ (800467c <I2C_MasterRequestWrite+0x100>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f888 	bl	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010008 	.word	0x00010008
 800467c:	00010002 	.word	0x00010002

08004680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004690:	e048      	b.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d044      	beq.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fe fadb 	bl	8002c54 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d139      	bne.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10d      	bne.n	80046d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	43da      	mvns	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	e00c      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	43da      	mvns	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d116      	bne.n	8004724 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e023      	b.n	800476c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10d      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0xca>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	e00c      	b.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d093      	beq.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004782:	e071      	b.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004792:	d123      	bne.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f043 0204 	orr.w	r2, r3, #4
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e067      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d041      	beq.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fe fa36 	bl	8002c54 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d136      	bne.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10c      	bne.n	800481e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4013      	ands	r3, r2
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e00b      	b.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e021      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10c      	bne.n	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e00b      	b.n	80048a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	43da      	mvns	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f af6d 	bne.w	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c0:	e034      	b.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f886 	bl	80049d4 <I2C_IsAcknowledgeFailed>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e034      	b.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d028      	beq.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe f9bb 	bl	8002c54 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11d      	bne.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d016      	beq.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e007      	b.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d1c3      	bne.n	80048c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004950:	e034      	b.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f83e 	bl	80049d4 <I2C_IsAcknowledgeFailed>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e034      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d028      	beq.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fe f973 	bl	8002c54 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11d      	bne.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d016      	beq.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e007      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d1c3      	bne.n	8004952 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ea:	d11b      	bne.n	8004a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e267      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d075      	beq.n	8004b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a52:	4b88      	ldr	r3, [pc, #544]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d00c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5e:	4b85      	ldr	r3, [pc, #532]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d112      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4b82      	ldr	r3, [pc, #520]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	4b7e      	ldr	r3, [pc, #504]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d05b      	beq.n	8004b3c <HAL_RCC_OscConfig+0x108>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d157      	bne.n	8004b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e242      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x74>
 8004a9a:	4b76      	ldr	r3, [pc, #472]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a75      	ldr	r2, [pc, #468]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e01d      	b.n	8004ae4 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x98>
 8004ab2:	4b70      	ldr	r3, [pc, #448]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b6d      	ldr	r3, [pc, #436]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0xb0>
 8004acc:	4b69      	ldr	r3, [pc, #420]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a68      	ldr	r2, [pc, #416]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b66      	ldr	r3, [pc, #408]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a65      	ldr	r2, [pc, #404]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fe f8b2 	bl	8002c54 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fe f8ae 	bl	8002c54 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	@ 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e207      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b5b      	ldr	r3, [pc, #364]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0xc0>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fe f89e 	bl	8002c54 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fe f89a 	bl	8002c54 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	@ 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1f3      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	4b51      	ldr	r3, [pc, #324]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0xe8>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d063      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b56:	4b47      	ldr	r3, [pc, #284]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d11c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b44      	ldr	r3, [pc, #272]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6e:	4b41      	ldr	r3, [pc, #260]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x152>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1c7      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b3b      	ldr	r3, [pc, #236]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4937      	ldr	r1, [pc, #220]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <HAL_RCC_OscConfig+0x244>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fe f853 	bl	8002c54 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fe f84f 	bl	8002c54 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1a8      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4925      	ldr	r1, [pc, #148]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCC_OscConfig+0x244>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fe f832 	bl	8002c54 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fe f82e 	bl	8002c54 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e187      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	4b1b      	ldr	r3, [pc, #108]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d036      	beq.n	8004c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b15      	ldr	r3, [pc, #84]	@ (8004c7c <HAL_RCC_OscConfig+0x248>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fe f812 	bl	8002c54 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fe f80e 	bl	8002c54 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e167      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <HAL_RCC_OscConfig+0x240>)
 8004c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x200>
 8004c52:	e01b      	b.n	8004c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_OscConfig+0x248>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fffb 	bl	8002c54 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	e00e      	b.n	8004c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fd fff7 	bl	8002c54 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d907      	bls.n	8004c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e150      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
 8004c74:	40023800 	.word	0x40023800
 8004c78:	42470000 	.word	0x42470000
 8004c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b88      	ldr	r3, [pc, #544]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8097 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b81      	ldr	r3, [pc, #516]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cba:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b77      	ldr	r3, [pc, #476]	@ (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d118      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b74      	ldr	r3, [pc, #464]	@ (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	@ (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd ffb7 	bl	8002c54 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cea:	f7fd ffb3 	bl	8002c54 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e10c      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea8 <HAL_RCC_OscConfig+0x474>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2ea>
 8004d10:	4b64      	ldr	r3, [pc, #400]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d14:	4a63      	ldr	r2, [pc, #396]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1c:	e01c      	b.n	8004d58 <HAL_RCC_OscConfig+0x324>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x30c>
 8004d26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d32:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0x324>
 8004d40:	4b58      	ldr	r3, [pc, #352]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d44:	4a57      	ldr	r2, [pc, #348]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	4a54      	ldr	r2, [pc, #336]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	f023 0304 	bic.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fd ff78 	bl	8002c54 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd ff74 	bl	8002c54 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0cb      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b49      	ldr	r3, [pc, #292]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCC_OscConfig+0x334>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd ff62 	bl	8002c54 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd ff5e 	bl	8002c54 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0b5      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004daa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ee      	bne.n	8004d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	4a38      	ldr	r2, [pc, #224]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a1 	beq.w	8004f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd2:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d05c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d141      	bne.n	8004e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <HAL_RCC_OscConfig+0x478>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fd ff32 	bl	8002c54 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd ff2e 	bl	8002c54 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e087      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	491b      	ldr	r1, [pc, #108]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <HAL_RCC_OscConfig+0x478>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd ff07 	bl	8002c54 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd ff03 	bl	8002c54 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e05c      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x416>
 8004e68:	e054      	b.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <HAL_RCC_OscConfig+0x478>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fef0 	bl	8002c54 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fd feec 	bl	8002c54 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e045      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x444>
 8004e96:	e03d      	b.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e038      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCC_OscConfig+0x4ec>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d028      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d121      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11a      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800

08004f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0cc      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f38:	4b68      	ldr	r3, [pc, #416]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90c      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b65      	ldr	r3, [pc, #404]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b63      	ldr	r3, [pc, #396]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0b8      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f78:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a58      	ldr	r2, [pc, #352]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f90:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a52      	ldr	r2, [pc, #328]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	494d      	ldr	r1, [pc, #308]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d044      	beq.n	8005044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	4b47      	ldr	r3, [pc, #284]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d119      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e07f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d107      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e067      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f023 0203 	bic.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4934      	ldr	r1, [pc, #208]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005014:	f7fd fe1e 	bl	8002c54 <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	e00a      	b.n	8005032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501c:	f7fd fe1a 	bl	8002c54 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e04f      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 020c 	and.w	r2, r3, #12
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d1eb      	bne.n	800501c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b25      	ldr	r3, [pc, #148]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d20c      	bcs.n	800506c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b22      	ldr	r3, [pc, #136]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <HAL_RCC_ClockConfig+0x1b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e032      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005078:	4b19      	ldr	r3, [pc, #100]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4916      	ldr	r1, [pc, #88]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005096:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	490e      	ldr	r1, [pc, #56]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050aa:	f000 f821 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	490a      	ldr	r1, [pc, #40]	@ (80050e4 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	5ccb      	ldrb	r3, [r1, r3]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	4a09      	ldr	r2, [pc, #36]	@ (80050e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050c6:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fd7e 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00
 80050e0:	40023800 	.word	0x40023800
 80050e4:	080082b0 	.word	0x080082b0
 80050e8:	20000008 	.word	0x20000008
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050f4:	b090      	sub	sp, #64	@ 0x40
 80050f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fc:	2300      	movs	r3, #0
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005100:	2300      	movs	r3, #0
 8005102:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005108:	4b59      	ldr	r3, [pc, #356]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b08      	cmp	r3, #8
 8005112:	d00d      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x40>
 8005114:	2b08      	cmp	r3, #8
 8005116:	f200 80a1 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x16c>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x34>
 800511e:	2b04      	cmp	r3, #4
 8005120:	d003      	beq.n	800512a <HAL_RCC_GetSysClockFreq+0x3a>
 8005122:	e09b      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b53      	ldr	r3, [pc, #332]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x184>)
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005128:	e09b      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512a:	4b53      	ldr	r3, [pc, #332]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x188>)
 800512c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800512e:	e098      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005130:	4b4f      	ldr	r3, [pc, #316]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513a:	4b4d      	ldr	r3, [pc, #308]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d028      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005146:	4b4a      	ldr	r3, [pc, #296]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	2200      	movs	r2, #0
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	627a      	str	r2, [r7, #36]	@ 0x24
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005158:	2100      	movs	r1, #0
 800515a:	4b47      	ldr	r3, [pc, #284]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x188>)
 800515c:	fb03 f201 	mul.w	r2, r3, r1
 8005160:	2300      	movs	r3, #0
 8005162:	fb00 f303 	mul.w	r3, r0, r3
 8005166:	4413      	add	r3, r2
 8005168:	4a43      	ldr	r2, [pc, #268]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x188>)
 800516a:	fba0 1202 	umull	r1, r2, r0, r2
 800516e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005170:	460a      	mov	r2, r1
 8005172:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005176:	4413      	add	r3, r2
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	2200      	movs	r2, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005186:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800518a:	f7fb f8d9 	bl	8000340 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4613      	mov	r3, r2
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005196:	e053      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005198:	4b35      	ldr	r3, [pc, #212]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	2200      	movs	r2, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	617a      	str	r2, [r7, #20]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	4652      	mov	r2, sl
 80051b0:	465b      	mov	r3, fp
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c0:	0150      	lsls	r0, r2, #5
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	ebb2 080a 	subs.w	r8, r2, sl
 80051ca:	eb63 090b 	sbc.w	r9, r3, fp
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051e2:	ebb2 0408 	subs.w	r4, r2, r8
 80051e6:	eb63 0509 	sbc.w	r5, r3, r9
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	00eb      	lsls	r3, r5, #3
 80051f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f8:	00e2      	lsls	r2, r4, #3
 80051fa:	4614      	mov	r4, r2
 80051fc:	461d      	mov	r5, r3
 80051fe:	eb14 030a 	adds.w	r3, r4, sl
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	eb45 030b 	adc.w	r3, r5, fp
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005216:	4629      	mov	r1, r5
 8005218:	028b      	lsls	r3, r1, #10
 800521a:	4621      	mov	r1, r4
 800521c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005220:	4621      	mov	r1, r4
 8005222:	028a      	lsls	r2, r1, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522a:	2200      	movs	r2, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	60fa      	str	r2, [r7, #12]
 8005230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005234:	f7fb f884 	bl	8000340 <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x180>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x184>)
 800525e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005264:	4618      	mov	r0, r3
 8005266:	3740      	adds	r7, #64	@ 0x40
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	017d7840 	.word	0x017d7840

0800527c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000008 	.word	0x20000008

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	@ (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	080082c0 	.word	0x080082c0

080052bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e07b      	b.n	80053c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052de:	d009      	beq.n	80052f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
 80052e6:	e005      	b.n	80052f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc f856 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800532a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005378:	ea42 0103 	orr.w	r1, r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0104 	and.w	r1, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0210 	and.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_SPI_Transmit+0x22>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e12d      	b.n	800564c <HAL_SPI_Transmit+0x27e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053f8:	f7fd fc2c 	bl	8002c54 <HAL_GetTick>
 80053fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	d002      	beq.n	8005414 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800540e:	2302      	movs	r3, #2
 8005410:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005412:	e116      	b.n	8005642 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Transmit+0x52>
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005424:	e10d      	b.n	8005642 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2203      	movs	r2, #3
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800546c:	d10f      	bne.n	800548e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800547c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800548c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d007      	beq.n	80054ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b4:	d14f      	bne.n	8005556 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_SPI_Transmit+0xf6>
 80054be:	8afb      	ldrh	r3, [r7, #22]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d142      	bne.n	800554a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d4:	1c9a      	adds	r2, r3, #2
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054e8:	e02f      	b.n	800554a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d112      	bne.n	800551e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	881a      	ldrh	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800551c:	e015      	b.n	800554a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551e:	f7fd fb99 	bl	8002c54 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d803      	bhi.n	8005536 <HAL_SPI_Transmit+0x168>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d102      	bne.n	800553c <HAL_SPI_Transmit+0x16e>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005548:	e07b      	b.n	8005642 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ca      	bne.n	80054ea <HAL_SPI_Transmit+0x11c>
 8005554:	e050      	b.n	80055f8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0x196>
 800555e:	8afb      	ldrh	r3, [r7, #22]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d144      	bne.n	80055ee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	7812      	ldrb	r2, [r2, #0]
 8005570:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800558a:	e030      	b.n	80055ee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d113      	bne.n	80055c2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055c0:	e015      	b.n	80055ee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c2:	f7fd fb47 	bl	8002c54 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d803      	bhi.n	80055da <HAL_SPI_Transmit+0x20c>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_Transmit+0x212>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80055ec:	e029      	b.n	8005642 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1c9      	bne.n	800558c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f8b1 	bl	8005764 <SPI_EndRxTxTransaction>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e003      	b.n	8005642 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800564a:	7ffb      	ldrb	r3, [r7, #31]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005664:	f7fd faf6 	bl	8002c54 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4413      	add	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005674:	f7fd faee 	bl	8002c54 <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800567a:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	015b      	lsls	r3, r3, #5
 8005680:	0d1b      	lsrs	r3, r3, #20
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568a:	e054      	b.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d050      	beq.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005694:	f7fd fade 	bl	8002c54 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d902      	bls.n	80056aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d13d      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c2:	d111      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056cc:	d004      	beq.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d6:	d107      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f0:	d10f      	bne.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e017      	b.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3b01      	subs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d19b      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000008 	.word	0x20000008

08005764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2201      	movs	r2, #1
 8005778:	2102      	movs	r1, #2
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff ff6a 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e032      	b.n	80057fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005796:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <SPI_EndRxTxTransaction+0xa0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1b      	ldr	r2, [pc, #108]	@ (8005808 <SPI_EndRxTxTransaction+0xa4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	0d5b      	lsrs	r3, r3, #21
 80057a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b4:	d112      	bne.n	80057dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff ff47 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e00f      	b.n	80057fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f2:	2b80      	cmp	r3, #128	@ 0x80
 80057f4:	d0f2      	beq.n	80057dc <SPI_EndRxTxTransaction+0x78>
 80057f6:	e000      	b.n	80057fa <SPI_EndRxTxTransaction+0x96>
        break;
 80057f8:	bf00      	nop
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000008 	.word	0x20000008
 8005808:	165e9f81 	.word	0x165e9f81

0800580c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e041      	b.n	80058a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb fe0c 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f000 fc3c 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e044      	b.n	800594e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1e      	ldr	r2, [pc, #120]	@ (800595c <HAL_TIM_Base_Start_IT+0xb0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x6c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d013      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x6c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <HAL_TIM_Base_Start_IT+0xb4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x6c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_TIM_Base_Start_IT+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x6c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a17      	ldr	r2, [pc, #92]	@ (8005968 <HAL_TIM_Base_Start_IT+0xbc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x6c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a16      	ldr	r2, [pc, #88]	@ (800596c <HAL_TIM_Base_Start_IT+0xc0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d111      	bne.n	800593c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b06      	cmp	r3, #6
 8005928:	d010      	beq.n	800594c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	e007      	b.n	800594c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40014000 	.word	0x40014000

08005970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e041      	b.n	8005a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f839 	bl	8005a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 fb8a 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start+0x24>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e022      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d109      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x3e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e015      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x58>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e008      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e068      	b.n	8005b68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x82>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aa4:	e013      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x92>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab4:	e00b      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac4:	e003      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fda8 	bl	800662c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	@ (8005b70 <HAL_TIM_PWM_Start+0x14c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d107      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <HAL_TIM_PWM_Start+0x14c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x10e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b08:	d013      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x10e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a19      	ldr	r2, [pc, #100]	@ (8005b74 <HAL_TIM_PWM_Start+0x150>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x10e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <HAL_TIM_PWM_Start+0x154>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x10e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <HAL_TIM_PWM_Start+0x158>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_TIM_PWM_Start+0x10e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a14      	ldr	r2, [pc, #80]	@ (8005b80 <HAL_TIM_PWM_Start+0x15c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d111      	bne.n	8005b56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d010      	beq.n	8005b66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	e007      	b.n	8005b66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40014000 	.word	0x40014000

08005b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0202 	mvn.w	r2, #2
 8005bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa5b 	bl	800608a <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa4d 	bl	8006076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa5e 	bl	800609e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d020      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01b      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0204 	mvn.w	r2, #4
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fa35 	bl	800608a <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa27 	bl	8006076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fa38 	bl	800609e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0208 	mvn.w	r2, #8
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa0f 	bl	800608a <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa01 	bl	8006076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa12 	bl	800609e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d020      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9e9 	bl	800608a <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9db 	bl	8006076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9ec 	bl	800609e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0201 	mvn.w	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fa fdb0 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fd2a 	bl	8006768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00c      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9bd 	bl	80060b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0220 	mvn.w	r2, #32
 8005d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fcfc 	bl	8006754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0ae      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	f200 809f 	bhi.w	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d92:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dcd 	.word	0x08005dcd
 8005d9c:	08005ed1 	.word	0x08005ed1
 8005da0:	08005ed1 	.word	0x08005ed1
 8005da4:	08005ed1 	.word	0x08005ed1
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005ed1 	.word	0x08005ed1
 8005db0:	08005ed1 	.word	0x08005ed1
 8005db4:	08005ed1 	.word	0x08005ed1
 8005db8:	08005e4f 	.word	0x08005e4f
 8005dbc:	08005ed1 	.word	0x08005ed1
 8005dc0:	08005ed1 	.word	0x08005ed1
 8005dc4:	08005ed1 	.word	0x08005ed1
 8005dc8:	08005e8f 	.word	0x08005e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa04 	bl	80061e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0208 	orr.w	r2, r2, #8
 8005de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0204 	bic.w	r2, r2, #4
 8005df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	619a      	str	r2, [r3, #24]
      break;
 8005e0a:	e064      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fa4a 	bl	80062ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	619a      	str	r2, [r3, #24]
      break;
 8005e4c:	e043      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fa95 	bl	8006384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0208 	orr.w	r2, r2, #8
 8005e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0204 	bic.w	r2, r2, #4
 8005e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	61da      	str	r2, [r3, #28]
      break;
 8005e8c:	e023      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fadf 	bl	8006458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69d9      	ldr	r1, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	021a      	lsls	r2, r3, #8
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	61da      	str	r2, [r3, #28]
      break;
 8005ece:	e002      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e0b4      	b.n	800606e <HAL_TIM_ConfigClockSource+0x186>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3c:	d03e      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0xd4>
 8005f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f42:	f200 8087 	bhi.w	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4a:	f000 8086 	beq.w	800605a <HAL_TIM_ConfigClockSource+0x172>
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f52:	d87f      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b70      	cmp	r3, #112	@ 0x70
 8005f56:	d01a      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0xa6>
 8005f58:	2b70      	cmp	r3, #112	@ 0x70
 8005f5a:	d87b      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b60      	cmp	r3, #96	@ 0x60
 8005f5e:	d050      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0x11a>
 8005f60:	2b60      	cmp	r3, #96	@ 0x60
 8005f62:	d877      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b50      	cmp	r3, #80	@ 0x50
 8005f66:	d03c      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8005f68:	2b50      	cmp	r3, #80	@ 0x50
 8005f6a:	d873      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d058      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x13a>
 8005f70:	2b40      	cmp	r3, #64	@ 0x40
 8005f72:	d86f      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b30      	cmp	r3, #48	@ 0x30
 8005f76:	d064      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b30      	cmp	r3, #48	@ 0x30
 8005f7a:	d86b      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d060      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d867      	bhi.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05c      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x15a>
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d05a      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x15a>
 8005f8c:	e062      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f9e:	f000 fb25 	bl	80065ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	609a      	str	r2, [r3, #8]
      break;
 8005fba:	e04f      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fcc:	f000 fb0e 	bl	80065ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fde:	609a      	str	r2, [r3, #8]
      break;
 8005fe0:	e03c      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f000 fa82 	bl	80064f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2150      	movs	r1, #80	@ 0x50
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fadb 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006000:	e02c      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600e:	461a      	mov	r2, r3
 8006010:	f000 faa1 	bl	8006556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2160      	movs	r1, #96	@ 0x60
 800601a:	4618      	mov	r0, r3
 800601c:	f000 facb 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006020:	e01c      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	461a      	mov	r2, r3
 8006030:	f000 fa62 	bl	80064f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2140      	movs	r1, #64	@ 0x40
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fabb 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006040:	e00c      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f000 fab2 	bl	80065b6 <TIM_ITRx_SetConfig>
      break;
 8006052:	e003      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
      break;
 8006058:	e000      	b.n	800605c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800605a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3a      	ldr	r2, [pc, #232]	@ (80061c4 <TIM_Base_SetConfig+0xfc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00f      	beq.n	8006100 <TIM_Base_SetConfig+0x38>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e6:	d00b      	beq.n	8006100 <TIM_Base_SetConfig+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a37      	ldr	r2, [pc, #220]	@ (80061c8 <TIM_Base_SetConfig+0x100>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0x38>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a36      	ldr	r2, [pc, #216]	@ (80061cc <TIM_Base_SetConfig+0x104>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x38>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a35      	ldr	r2, [pc, #212]	@ (80061d0 <TIM_Base_SetConfig+0x108>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2b      	ldr	r2, [pc, #172]	@ (80061c4 <TIM_Base_SetConfig+0xfc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006120:	d017      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a28      	ldr	r2, [pc, #160]	@ (80061c8 <TIM_Base_SetConfig+0x100>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a27      	ldr	r2, [pc, #156]	@ (80061cc <TIM_Base_SetConfig+0x104>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a26      	ldr	r2, [pc, #152]	@ (80061d0 <TIM_Base_SetConfig+0x108>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a25      	ldr	r2, [pc, #148]	@ (80061d4 <TIM_Base_SetConfig+0x10c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a24      	ldr	r2, [pc, #144]	@ (80061d8 <TIM_Base_SetConfig+0x110>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a23      	ldr	r2, [pc, #140]	@ (80061dc <TIM_Base_SetConfig+0x114>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0e      	ldr	r2, [pc, #56]	@ (80061c4 <TIM_Base_SetConfig+0xfc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d105      	bne.n	80061b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	611a      	str	r2, [r3, #16]
  }
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800

080061e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f023 0201 	bic.w	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <TIM_OC1_SetConfig+0xc8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10c      	bne.n	8006256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0308 	bic.w	r3, r3, #8
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a13      	ldr	r2, [pc, #76]	@ (80062a8 <TIM_OC1_SetConfig+0xc8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d111      	bne.n	8006282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800626c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40010000 	.word	0x40010000

080062ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f023 0210 	bic.w	r2, r3, #16
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0320 	bic.w	r3, r3, #32
 80062f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1e      	ldr	r2, [pc, #120]	@ (8006380 <TIM_OC2_SetConfig+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10d      	bne.n	8006328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a15      	ldr	r2, [pc, #84]	@ (8006380 <TIM_OC2_SetConfig+0xd4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d113      	bne.n	8006358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000

08006384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <TIM_OC3_SetConfig+0xd0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10d      	bne.n	80063fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a14      	ldr	r2, [pc, #80]	@ (8006454 <TIM_OC3_SetConfig+0xd0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40010000 	.word	0x40010000

08006458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a10      	ldr	r2, [pc, #64]	@ (80064f4 <TIM_OC4_SetConfig+0x9c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d109      	bne.n	80064cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000

080064f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 030a 	bic.w	r3, r3, #10
 8006534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006556:	b480      	push	{r7}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f023 0210 	bic.w	r2, r3, #16
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f043 0307 	orr.w	r3, r3, #7
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	609a      	str	r2, [r3, #8]
}
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	431a      	orrs	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2201      	movs	r2, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	43db      	mvns	r3, r3
 800664e:	401a      	ands	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e050      	b.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066dc:	d013      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a15      	ldr	r2, [pc, #84]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a13      	ldr	r2, [pc, #76]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10c      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000

08006754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <arm_rfft_fast_init_f32>:
 800677c:	084b      	lsrs	r3, r1, #1
 800677e:	2b80      	cmp	r3, #128	@ 0x80
 8006780:	b410      	push	{r4}
 8006782:	8201      	strh	r1, [r0, #16]
 8006784:	8003      	strh	r3, [r0, #0]
 8006786:	d046      	beq.n	8006816 <arm_rfft_fast_init_f32+0x9a>
 8006788:	d916      	bls.n	80067b8 <arm_rfft_fast_init_f32+0x3c>
 800678a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800678e:	d03c      	beq.n	800680a <arm_rfft_fast_init_f32+0x8e>
 8006790:	d928      	bls.n	80067e4 <arm_rfft_fast_init_f32+0x68>
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006796:	d01f      	beq.n	80067d8 <arm_rfft_fast_init_f32+0x5c>
 8006798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800679c:	d112      	bne.n	80067c4 <arm_rfft_fast_init_f32+0x48>
 800679e:	4920      	ldr	r1, [pc, #128]	@ (8006820 <arm_rfft_fast_init_f32+0xa4>)
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <arm_rfft_fast_init_f32+0xa8>)
 80067a2:	4b21      	ldr	r3, [pc, #132]	@ (8006828 <arm_rfft_fast_init_f32+0xac>)
 80067a4:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80067a8:	8184      	strh	r4, [r0, #12]
 80067aa:	6081      	str	r1, [r0, #8]
 80067ac:	6042      	str	r2, [r0, #4]
 80067ae:	6143      	str	r3, [r0, #20]
 80067b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b4:	2000      	movs	r0, #0
 80067b6:	4770      	bx	lr
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d01c      	beq.n	80067f6 <arm_rfft_fast_init_f32+0x7a>
 80067bc:	2b40      	cmp	r3, #64	@ 0x40
 80067be:	d006      	beq.n	80067ce <arm_rfft_fast_init_f32+0x52>
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d01d      	beq.n	8006800 <arm_rfft_fast_init_f32+0x84>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	2438      	movs	r4, #56	@ 0x38
 80067d0:	4916      	ldr	r1, [pc, #88]	@ (800682c <arm_rfft_fast_init_f32+0xb0>)
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <arm_rfft_fast_init_f32+0xb4>)
 80067d4:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <arm_rfft_fast_init_f32+0xb8>)
 80067d6:	e7e7      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 80067d8:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80067dc:	4916      	ldr	r1, [pc, #88]	@ (8006838 <arm_rfft_fast_init_f32+0xbc>)
 80067de:	4a17      	ldr	r2, [pc, #92]	@ (800683c <arm_rfft_fast_init_f32+0xc0>)
 80067e0:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <arm_rfft_fast_init_f32+0xc4>)
 80067e2:	e7e1      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 80067e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e8:	d1ec      	bne.n	80067c4 <arm_rfft_fast_init_f32+0x48>
 80067ea:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80067ee:	4915      	ldr	r1, [pc, #84]	@ (8006844 <arm_rfft_fast_init_f32+0xc8>)
 80067f0:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <arm_rfft_fast_init_f32+0xcc>)
 80067f2:	4b16      	ldr	r3, [pc, #88]	@ (800684c <arm_rfft_fast_init_f32+0xd0>)
 80067f4:	e7d8      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 80067f6:	2430      	movs	r4, #48	@ 0x30
 80067f8:	4915      	ldr	r1, [pc, #84]	@ (8006850 <arm_rfft_fast_init_f32+0xd4>)
 80067fa:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <arm_rfft_fast_init_f32+0xd8>)
 80067fc:	4b16      	ldr	r3, [pc, #88]	@ (8006858 <arm_rfft_fast_init_f32+0xdc>)
 80067fe:	e7d3      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 8006800:	2414      	movs	r4, #20
 8006802:	4916      	ldr	r1, [pc, #88]	@ (800685c <arm_rfft_fast_init_f32+0xe0>)
 8006804:	4a16      	ldr	r2, [pc, #88]	@ (8006860 <arm_rfft_fast_init_f32+0xe4>)
 8006806:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <arm_rfft_fast_init_f32+0xe8>)
 8006808:	e7ce      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 800680a:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800680e:	4916      	ldr	r1, [pc, #88]	@ (8006868 <arm_rfft_fast_init_f32+0xec>)
 8006810:	4a16      	ldr	r2, [pc, #88]	@ (800686c <arm_rfft_fast_init_f32+0xf0>)
 8006812:	4b17      	ldr	r3, [pc, #92]	@ (8006870 <arm_rfft_fast_init_f32+0xf4>)
 8006814:	e7c8      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 8006816:	24d0      	movs	r4, #208	@ 0xd0
 8006818:	4916      	ldr	r1, [pc, #88]	@ (8006874 <arm_rfft_fast_init_f32+0xf8>)
 800681a:	4a17      	ldr	r2, [pc, #92]	@ (8006878 <arm_rfft_fast_init_f32+0xfc>)
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <arm_rfft_fast_init_f32+0x100>)
 800681e:	e7c3      	b.n	80067a8 <arm_rfft_fast_init_f32+0x2c>
 8006820:	080178cc 	.word	0x080178cc
 8006824:	08008ac4 	.word	0x08008ac4
 8006828:	0800ec34 	.word	0x0800ec34
 800682c:	0800cbc4 	.word	0x0800cbc4
 8006830:	0801968c 	.word	0x0801968c
 8006834:	0801bb7c 	.word	0x0801bb7c
 8006838:	080155b4 	.word	0x080155b4
 800683c:	080134b4 	.word	0x080134b4
 8006840:	0800cc34 	.word	0x0800cc34
 8006844:	0801b80c 	.word	0x0801b80c
 8006848:	08012c34 	.word	0x08012c34
 800684c:	0801988c 	.word	0x0801988c
 8006850:	0801646c 	.word	0x0801646c
 8006854:	080154b4 	.word	0x080154b4
 8006858:	0800cac4 	.word	0x0800cac4
 800685c:	080163c4 	.word	0x080163c4
 8006860:	08013434 	.word	0x08013434
 8006864:	080163ec 	.word	0x080163ec
 8006868:	0801a08c 	.word	0x0801a08c
 800686c:	080168cc 	.word	0x080168cc
 8006870:	0801a40c 	.word	0x0801a40c
 8006874:	0801bd7c 	.word	0x0801bd7c
 8006878:	080164cc 	.word	0x080164cc
 800687c:	0801b40c 	.word	0x0801b40c

08006880 <arm_rfft_fast_f32>:
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	8a06      	ldrh	r6, [r0, #16]
 8006886:	0876      	lsrs	r6, r6, #1
 8006888:	4607      	mov	r7, r0
 800688a:	4615      	mov	r5, r2
 800688c:	8006      	strh	r6, [r0, #0]
 800688e:	460c      	mov	r4, r1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d15c      	bne.n	800694e <arm_rfft_fast_f32+0xce>
 8006894:	461a      	mov	r2, r3
 8006896:	2301      	movs	r3, #1
 8006898:	f000 fbe4 	bl	8007064 <arm_cfft_f32>
 800689c:	edd4 7a00 	vldr	s15, [r4]
 80068a0:	ed94 7a01 	vldr	s14, [r4, #4]
 80068a4:	883e      	ldrh	r6, [r7, #0]
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80068ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068b0:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 80068b4:	ee77 6a87 	vadd.f32	s13, s15, s14
 80068b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068bc:	3e01      	subs	r6, #1
 80068be:	ee26 7a83 	vmul.f32	s14, s13, s6
 80068c2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80068c6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80068ca:	ed85 7a00 	vstr	s14, [r5]
 80068ce:	edc5 7a01 	vstr	s15, [r5, #4]
 80068d2:	3010      	adds	r0, #16
 80068d4:	f105 0210 	add.w	r2, r5, #16
 80068d8:	3b08      	subs	r3, #8
 80068da:	f104 0110 	add.w	r1, r4, #16
 80068de:	ed93 7a02 	vldr	s14, [r3, #8]
 80068e2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80068e6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80068ea:	edd3 3a03 	vldr	s7, [r3, #12]
 80068ee:	ed11 5a01 	vldr	s10, [r1, #-4]
 80068f2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80068f6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80068fa:	ee77 4a26 	vadd.f32	s9, s14, s13
 80068fe:	ee33 4a85 	vadd.f32	s8, s7, s10
 8006902:	ee66 6a27 	vmul.f32	s13, s12, s15
 8006906:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800690a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800690e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006912:	ee77 7a05 	vadd.f32	s15, s14, s10
 8006916:	ee26 6a04 	vmul.f32	s12, s12, s8
 800691a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800691e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006922:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8006926:	ee67 7a83 	vmul.f32	s15, s15, s6
 800692a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800692e:	3e01      	subs	r6, #1
 8006930:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006934:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006938:	f1a3 0308 	sub.w	r3, r3, #8
 800693c:	f101 0108 	add.w	r1, r1, #8
 8006940:	f100 0008 	add.w	r0, r0, #8
 8006944:	f102 0208 	add.w	r2, r2, #8
 8006948:	d1c9      	bne.n	80068de <arm_rfft_fast_f32+0x5e>
 800694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694e:	edd1 7a00 	vldr	s15, [r1]
 8006952:	edd1 6a01 	vldr	s13, [r1, #4]
 8006956:	6941      	ldr	r1, [r0, #20]
 8006958:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800695c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006960:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8006964:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006968:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800696c:	3e01      	subs	r6, #1
 800696e:	ed82 7a00 	vstr	s14, [r2]
 8006972:	edc2 7a01 	vstr	s15, [r2, #4]
 8006976:	00f0      	lsls	r0, r6, #3
 8006978:	b3ee      	cbz	r6, 80069f6 <arm_rfft_fast_f32+0x176>
 800697a:	3808      	subs	r0, #8
 800697c:	f101 0e10 	add.w	lr, r1, #16
 8006980:	4420      	add	r0, r4
 8006982:	f104 0110 	add.w	r1, r4, #16
 8006986:	f102 0c10 	add.w	ip, r2, #16
 800698a:	ed90 7a02 	vldr	s14, [r0, #8]
 800698e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8006992:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8006996:	ed90 4a03 	vldr	s8, [r0, #12]
 800699a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800699e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80069a2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80069a6:	ee74 4a05 	vadd.f32	s9, s8, s10
 80069aa:	ee26 3a27 	vmul.f32	s6, s12, s15
 80069ae:	ee77 6a26 	vadd.f32	s13, s14, s13
 80069b2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80069b6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80069ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80069be:	ee77 7a05 	vadd.f32	s15, s14, s10
 80069c2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80069c6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80069ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80069ce:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80069d2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80069d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80069da:	3e01      	subs	r6, #1
 80069dc:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80069e0:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80069e4:	f1a0 0008 	sub.w	r0, r0, #8
 80069e8:	f101 0108 	add.w	r1, r1, #8
 80069ec:	f10e 0e08 	add.w	lr, lr, #8
 80069f0:	f10c 0c08 	add.w	ip, ip, #8
 80069f4:	d1c9      	bne.n	800698a <arm_rfft_fast_f32+0x10a>
 80069f6:	461a      	mov	r2, r3
 80069f8:	4629      	mov	r1, r5
 80069fa:	4638      	mov	r0, r7
 80069fc:	2301      	movs	r3, #1
 80069fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	f000 bb2f 	b.w	8007064 <arm_cfft_f32>
 8006a06:	bf00      	nop

08006a08 <arm_cfft_radix8by2_f32>:
 8006a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	ed2d 8b08 	vpush	{d8-d11}
 8006a10:	4607      	mov	r7, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	f8b7 e000 	ldrh.w	lr, [r7]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8006a1e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8006a22:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006a26:	f000 80b0 	beq.w	8006b8a <arm_cfft_radix8by2_f32+0x182>
 8006a2a:	008b      	lsls	r3, r1, #2
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	18c6      	adds	r6, r0, r3
 8006a30:	3210      	adds	r2, #16
 8006a32:	4443      	add	r3, r8
 8006a34:	f100 0510 	add.w	r5, r0, #16
 8006a38:	f108 0410 	add.w	r4, r8, #16
 8006a3c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8006a40:	ed54 6a03 	vldr	s13, [r4, #-12]
 8006a44:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006a48:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006a4c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006a50:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006a54:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006a58:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006a5c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006a60:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006a64:	ed15 6a03 	vldr	s12, [r5, #-12]
 8006a68:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006a6c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006a70:	ed56 0a02 	vldr	s1, [r6, #-8]
 8006a74:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006a78:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006a7c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8006a80:	ee36 ba26 	vadd.f32	s22, s12, s13
 8006a84:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006a88:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006a8c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8006a90:	ee31 8a05 	vadd.f32	s16, s2, s10
 8006a94:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006a98:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006a9c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8006aa0:	ed05 ba03 	vstr	s22, [r5, #-12]
 8006aa4:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006aa8:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006aac:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006ab0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006ab4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006ab8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006abc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006ac0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006ac4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006ac8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006acc:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006ad0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006ad4:	ee26 8a86 	vmul.f32	s16, s13, s12
 8006ad8:	ee24 2a06 	vmul.f32	s4, s8, s12
 8006adc:	ee63 1a22 	vmul.f32	s3, s6, s5
 8006ae0:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006ae4:	ee23 3a06 	vmul.f32	s6, s6, s12
 8006ae8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8006aec:	ee23 6a86 	vmul.f32	s12, s7, s12
 8006af0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8006af4:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006af8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006afc:	ee72 3a63 	vsub.f32	s7, s4, s7
 8006b00:	ee71 2a88 	vadd.f32	s5, s3, s16
 8006b04:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006b08:	ed44 2a04 	vstr	s5, [r4, #-16]
 8006b0c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8006b10:	ed03 6a03 	vstr	s12, [r3, #-12]
 8006b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b18:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8006b1c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006b20:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006b24:	ee35 6a41 	vsub.f32	s12, s10, s2
 8006b28:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006b2c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006b30:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006b34:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8006b38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b3c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8006b40:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006b44:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006b48:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006b4c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006b50:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006b54:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006b58:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006b5c:	f1be 0e01 	subs.w	lr, lr, #1
 8006b60:	ed44 5a02 	vstr	s11, [r4, #-8]
 8006b64:	f105 0510 	add.w	r5, r5, #16
 8006b68:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006b6c:	f106 0610 	add.w	r6, r6, #16
 8006b70:	ed03 6a02 	vstr	s12, [r3, #-8]
 8006b74:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006b78:	f102 0210 	add.w	r2, r2, #16
 8006b7c:	f104 0410 	add.w	r4, r4, #16
 8006b80:	f103 0310 	add.w	r3, r3, #16
 8006b84:	f47f af5a 	bne.w	8006a3c <arm_cfft_radix8by2_f32+0x34>
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	b28c      	uxth	r4, r1
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	2302      	movs	r3, #2
 8006b90:	f000 fbca 	bl	8007328 <arm_radix8_butterfly_f32>
 8006b94:	ecbd 8b08 	vpop	{d8-d11}
 8006b98:	4621      	mov	r1, r4
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	f000 bbc0 	b.w	8007328 <arm_radix8_butterfly_f32>

08006ba8 <arm_cfft_radix8by4_f32>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	ed2d 8b0a 	vpush	{d8-d12}
 8006bb0:	8802      	ldrh	r2, [r0, #0]
 8006bb2:	ed91 6a00 	vldr	s12, [r1]
 8006bb6:	b08f      	sub	sp, #60	@ 0x3c
 8006bb8:	460f      	mov	r7, r1
 8006bba:	0852      	lsrs	r2, r2, #1
 8006bbc:	6841      	ldr	r1, [r0, #4]
 8006bbe:	900c      	str	r0, [sp, #48]	@ 0x30
 8006bc0:	0093      	lsls	r3, r2, #2
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	4418      	add	r0, r3
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bca:	4418      	add	r0, r3
 8006bcc:	edd0 6a00 	vldr	s13, [r0]
 8006bd0:	ed96 4a00 	vldr	s8, [r6]
 8006bd4:	edd6 2a01 	vldr	s5, [r6, #4]
 8006bd8:	edd0 7a01 	vldr	s15, [r0, #4]
 8006bdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bde:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006be2:	4604      	mov	r4, r0
 8006be4:	4625      	mov	r5, r4
 8006be6:	441c      	add	r4, r3
 8006be8:	edd4 4a00 	vldr	s9, [r4]
 8006bec:	ed97 7a01 	vldr	s14, [r7, #4]
 8006bf0:	ed94 3a01 	vldr	s6, [r4, #4]
 8006bf4:	9401      	str	r4, [sp, #4]
 8006bf6:	ee35 5a84 	vadd.f32	s10, s11, s8
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006c00:	463e      	mov	r6, r7
 8006c02:	ee15 ea10 	vmov	lr, s10
 8006c06:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006c0a:	f846 eb08 	str.w	lr, [r6], #8
 8006c0e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006c12:	ed90 5a01 	vldr	s10, [r0, #4]
 8006c16:	9605      	str	r6, [sp, #20]
 8006c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c1c:	9e01      	ldr	r6, [sp, #4]
 8006c1e:	9707      	str	r7, [sp, #28]
 8006c20:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8006c24:	ed96 2a01 	vldr	s4, [r6, #4]
 8006c28:	ee36 7a05 	vadd.f32	s14, s12, s10
 8006c2c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006c30:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8006c34:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006c38:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	46a3      	mov	fp, r4
 8006c40:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006c44:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006c48:	ee14 8a10 	vmov	r8, s8
 8006c4c:	46a4      	mov	ip, r4
 8006c4e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8006c52:	ed87 7a01 	vstr	s14, [r7, #4]
 8006c56:	f84b 8b08 	str.w	r8, [fp], #8
 8006c5a:	f1ac 0704 	sub.w	r7, ip, #4
 8006c5e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006c62:	f101 0c08 	add.w	ip, r1, #8
 8006c66:	462c      	mov	r4, r5
 8006c68:	f8cd c010 	str.w	ip, [sp, #16]
 8006c6c:	ee15 ca90 	vmov	ip, s11
 8006c70:	ee36 6a62 	vsub.f32	s12, s12, s5
 8006c74:	f844 cb08 	str.w	ip, [r4], #8
 8006c78:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006c7c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006c80:	9406      	str	r4, [sp, #24]
 8006c82:	ee76 6a83 	vadd.f32	s13, s13, s6
 8006c86:	f101 0410 	add.w	r4, r1, #16
 8006c8a:	0852      	lsrs	r2, r2, #1
 8006c8c:	9402      	str	r4, [sp, #8]
 8006c8e:	ed85 6a01 	vstr	s12, [r5, #4]
 8006c92:	462c      	mov	r4, r5
 8006c94:	f101 0518 	add.w	r5, r1, #24
 8006c98:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006c9a:	46b2      	mov	sl, r6
 8006c9c:	9503      	str	r5, [sp, #12]
 8006c9e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006ca2:	3a02      	subs	r2, #2
 8006ca4:	ee16 5a90 	vmov	r5, s13
 8006ca8:	46b6      	mov	lr, r6
 8006caa:	4630      	mov	r0, r6
 8006cac:	0852      	lsrs	r2, r2, #1
 8006cae:	f84a 5b08 	str.w	r5, [sl], #8
 8006cb2:	f1a0 0604 	sub.w	r6, r0, #4
 8006cb6:	edce 7a01 	vstr	s15, [lr, #4]
 8006cba:	9208      	str	r2, [sp, #32]
 8006cbc:	f000 8130 	beq.w	8006f20 <arm_cfft_radix8by4_f32+0x378>
 8006cc0:	4691      	mov	r9, r2
 8006cc2:	9a07      	ldr	r2, [sp, #28]
 8006cc4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006cc8:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8006ccc:	3b08      	subs	r3, #8
 8006cce:	f102 0510 	add.w	r5, r2, #16
 8006cd2:	f101 0c20 	add.w	ip, r1, #32
 8006cd6:	f1a4 020c 	sub.w	r2, r4, #12
 8006cda:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8006cde:	4433      	add	r3, r6
 8006ce0:	3410      	adds	r4, #16
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	ed55 3a02 	vldr	s7, [r5, #-8]
 8006cea:	ed14 5a02 	vldr	s10, [r4, #-8]
 8006cee:	ed91 7a00 	vldr	s14, [r1]
 8006cf2:	edd0 7a00 	vldr	s15, [r0]
 8006cf6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006cfa:	ed15 4a01 	vldr	s8, [r5, #-4]
 8006cfe:	edd0 6a01 	vldr	s13, [r0, #4]
 8006d02:	ed91 6a01 	vldr	s12, [r1, #4]
 8006d06:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006d0a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8006d0e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8006d12:	ee74 5a65 	vsub.f32	s11, s8, s11
 8006d16:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8006d1a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8006d1e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8006d22:	edd1 4a01 	vldr	s9, [r1, #4]
 8006d26:	ed90 4a01 	vldr	s8, [r0, #4]
 8006d2a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8006d2e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8006d32:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006d36:	ee35 aac7 	vsub.f32	s20, s11, s14
 8006d3a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8006d3e:	edd6 1a00 	vldr	s3, [r6]
 8006d42:	edd7 0a00 	vldr	s1, [r7]
 8006d46:	ed92 4a02 	vldr	s8, [r2, #8]
 8006d4a:	edd3 3a02 	vldr	s7, [r3, #8]
 8006d4e:	ed93 2a01 	vldr	s4, [r3, #4]
 8006d52:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006d56:	edd2 2a01 	vldr	s5, [r2, #4]
 8006d5a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8006d5e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8006d62:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006d66:	ee74 8a84 	vadd.f32	s17, s9, s8
 8006d6a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8006d6e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8006d72:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006d76:	ee18 aa90 	vmov	sl, s17
 8006d7a:	f847 a908 	str.w	sl, [r7], #-8
 8006d7e:	edd2 8a01 	vldr	s17, [r2, #4]
 8006d82:	ed93 9a01 	vldr	s18, [r3, #4]
 8006d86:	ee73 8a28 	vadd.f32	s17, s6, s17
 8006d8a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8006d8e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006d92:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006d96:	edc7 8a01 	vstr	s17, [r7, #4]
 8006d9a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8006d9e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8006da2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006da6:	ee6a ba28 	vmul.f32	s23, s20, s17
 8006daa:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8006dae:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8006db2:	ee31 9a20 	vadd.f32	s18, s2, s1
 8006db6:	ee79 9a82 	vadd.f32	s19, s19, s4
 8006dba:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8006dbe:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8006dc2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006dc6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8006dca:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8006dce:	ee69 8a28 	vmul.f32	s17, s18, s17
 8006dd2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8006dd6:	ee1c aa10 	vmov	sl, s24
 8006dda:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006dde:	f841 ab08 	str.w	sl, [r1], #8
 8006de2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8006de6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8006dea:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8006dee:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006df2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8006df6:	edc2 8a01 	vstr	s17, [r2, #4]
 8006dfa:	ed82 ba02 	vstr	s22, [r2, #8]
 8006dfe:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8006e02:	ee74 3a63 	vsub.f32	s7, s8, s7
 8006e06:	ee38 8a47 	vsub.f32	s16, s16, s14
 8006e0a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8006e0e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8006e12:	ee33 3a42 	vsub.f32	s6, s6, s4
 8006e16:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006e1a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006e1e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8006e22:	ee63 8a04 	vmul.f32	s17, s6, s8
 8006e26:	ee28 aa24 	vmul.f32	s20, s16, s9
 8006e2a:	ee60 9a04 	vmul.f32	s19, s0, s8
 8006e2e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8006e32:	ee20 0a24 	vmul.f32	s0, s0, s9
 8006e36:	ee63 3a84 	vmul.f32	s7, s7, s8
 8006e3a:	ee39 4a68 	vsub.f32	s8, s18, s17
 8006e3e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8006e42:	ee14 aa10 	vmov	sl, s8
 8006e46:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006e4a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8006e4e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8006e52:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006e56:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006e5a:	f846 a908 	str.w	sl, [r6], #-8
 8006e5e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006e62:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006e66:	edc6 3a01 	vstr	s7, [r6, #4]
 8006e6a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8006e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e72:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8006e76:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8006e7a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8006e7e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006e82:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006e86:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006e8a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8006e8e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006e92:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006e96:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e9e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8006ea2:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006ea6:	ee21 1a07 	vmul.f32	s2, s2, s14
 8006eaa:	ee15 aa90 	vmov	sl, s11
 8006eae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006eb2:	f840 ab08 	str.w	sl, [r0], #8
 8006eb6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006eba:	ee76 2a22 	vadd.f32	s5, s12, s5
 8006ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec2:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006ec6:	f105 0508 	add.w	r5, r5, #8
 8006eca:	ed83 1a02 	vstr	s2, [r3, #8]
 8006ece:	edc3 2a01 	vstr	s5, [r3, #4]
 8006ed2:	f108 0808 	add.w	r8, r8, #8
 8006ed6:	f1a2 0208 	sub.w	r2, r2, #8
 8006eda:	f10c 0c10 	add.w	ip, ip, #16
 8006ede:	f104 0408 	add.w	r4, r4, #8
 8006ee2:	f10e 0e18 	add.w	lr, lr, #24
 8006ee6:	f1a3 0308 	sub.w	r3, r3, #8
 8006eea:	f47f aefc 	bne.w	8006ce6 <arm_cfft_radix8by4_f32+0x13e>
 8006eee:	9908      	ldr	r1, [sp, #32]
 8006ef0:	9802      	ldr	r0, [sp, #8]
 8006ef2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8006ef6:	00cb      	lsls	r3, r1, #3
 8006ef8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006efc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006f00:	9102      	str	r1, [sp, #8]
 8006f02:	9905      	ldr	r1, [sp, #20]
 8006f04:	4419      	add	r1, r3
 8006f06:	9105      	str	r1, [sp, #20]
 8006f08:	9904      	ldr	r1, [sp, #16]
 8006f0a:	4419      	add	r1, r3
 8006f0c:	9104      	str	r1, [sp, #16]
 8006f0e:	9906      	ldr	r1, [sp, #24]
 8006f10:	449b      	add	fp, r3
 8006f12:	4419      	add	r1, r3
 8006f14:	449a      	add	sl, r3
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	9106      	str	r1, [sp, #24]
 8006f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	9a05      	ldr	r2, [sp, #20]
 8006f22:	9806      	ldr	r0, [sp, #24]
 8006f24:	ed92 4a00 	vldr	s8, [r2]
 8006f28:	ed90 7a00 	vldr	s14, [r0]
 8006f2c:	ed9b 3a00 	vldr	s6, [fp]
 8006f30:	edda 3a00 	vldr	s7, [sl]
 8006f34:	edd2 4a01 	vldr	s9, [r2, #4]
 8006f38:	edd0 6a01 	vldr	s13, [r0, #4]
 8006f3c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8006f40:	eddb 7a01 	vldr	s15, [fp, #4]
 8006f44:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f4a:	ee34 6a07 	vadd.f32	s12, s8, s14
 8006f4e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8006f52:	ee36 5a03 	vadd.f32	s10, s12, s6
 8006f56:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006f5a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006f5e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8006f62:	ed82 5a00 	vstr	s10, [r2]
 8006f66:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006f6a:	edda 4a01 	vldr	s9, [sl, #4]
 8006f6e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006f72:	ee37 4a27 	vadd.f32	s8, s14, s15
 8006f76:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006f7a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8006f7e:	ed82 5a01 	vstr	s10, [r2, #4]
 8006f82:	9a04      	ldr	r2, [sp, #16]
 8006f84:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8006f88:	edd2 1a00 	vldr	s3, [r2]
 8006f8c:	edd2 2a01 	vldr	s5, [r2, #4]
 8006f90:	9a02      	ldr	r2, [sp, #8]
 8006f92:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006f96:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006f9a:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006f9e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006fa2:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006fa6:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006faa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006fae:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006fb2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006fb6:	edcb 2a00 	vstr	s5, [fp]
 8006fba:	ed8b 5a01 	vstr	s10, [fp, #4]
 8006fbe:	ed92 4a01 	vldr	s8, [r2, #4]
 8006fc2:	ed92 5a00 	vldr	s10, [r2]
 8006fc6:	9a03      	ldr	r2, [sp, #12]
 8006fc8:	ee36 6a63 	vsub.f32	s12, s12, s7
 8006fcc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006fd0:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006fd4:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006fd8:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006fdc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006fe0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006fe4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006fe8:	ee76 6a83 	vadd.f32	s13, s13, s6
 8006fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ff0:	ed80 6a01 	vstr	s12, [r0, #4]
 8006ff4:	edc0 5a00 	vstr	s11, [r0]
 8006ff8:	edd2 5a01 	vldr	s11, [r2, #4]
 8006ffc:	9807      	ldr	r0, [sp, #28]
 8006ffe:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007002:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8007006:	edd2 6a00 	vldr	s13, [r2]
 800700a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800700e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007012:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007016:	ee27 7a25 	vmul.f32	s14, s14, s11
 800701a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800701e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007022:	edca 7a01 	vstr	s15, [sl, #4]
 8007026:	ed8a 7a00 	vstr	s14, [sl]
 800702a:	6872      	ldr	r2, [r6, #4]
 800702c:	4621      	mov	r1, r4
 800702e:	2304      	movs	r3, #4
 8007030:	f000 f97a 	bl	8007328 <arm_radix8_butterfly_f32>
 8007034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007036:	6872      	ldr	r2, [r6, #4]
 8007038:	4621      	mov	r1, r4
 800703a:	2304      	movs	r3, #4
 800703c:	f000 f974 	bl	8007328 <arm_radix8_butterfly_f32>
 8007040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007042:	6872      	ldr	r2, [r6, #4]
 8007044:	4621      	mov	r1, r4
 8007046:	2304      	movs	r3, #4
 8007048:	f000 f96e 	bl	8007328 <arm_radix8_butterfly_f32>
 800704c:	6872      	ldr	r2, [r6, #4]
 800704e:	9801      	ldr	r0, [sp, #4]
 8007050:	4621      	mov	r1, r4
 8007052:	2304      	movs	r3, #4
 8007054:	b00f      	add	sp, #60	@ 0x3c
 8007056:	ecbd 8b0a 	vpop	{d8-d12}
 800705a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705e:	f000 b963 	b.w	8007328 <arm_radix8_butterfly_f32>
 8007062:	bf00      	nop

08007064 <arm_cfft_f32>:
 8007064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007068:	2a01      	cmp	r2, #1
 800706a:	4606      	mov	r6, r0
 800706c:	4617      	mov	r7, r2
 800706e:	460c      	mov	r4, r1
 8007070:	4698      	mov	r8, r3
 8007072:	8805      	ldrh	r5, [r0, #0]
 8007074:	d054      	beq.n	8007120 <arm_cfft_f32+0xbc>
 8007076:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800707a:	d04c      	beq.n	8007116 <arm_cfft_f32+0xb2>
 800707c:	d916      	bls.n	80070ac <arm_cfft_f32+0x48>
 800707e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007082:	d01a      	beq.n	80070ba <arm_cfft_f32+0x56>
 8007084:	d95c      	bls.n	8007140 <arm_cfft_f32+0xdc>
 8007086:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800708a:	d044      	beq.n	8007116 <arm_cfft_f32+0xb2>
 800708c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007090:	d105      	bne.n	800709e <arm_cfft_f32+0x3a>
 8007092:	2301      	movs	r3, #1
 8007094:	6872      	ldr	r2, [r6, #4]
 8007096:	4629      	mov	r1, r5
 8007098:	4620      	mov	r0, r4
 800709a:	f000 f945 	bl	8007328 <arm_radix8_butterfly_f32>
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	d111      	bne.n	80070c8 <arm_cfft_f32+0x64>
 80070a4:	2f01      	cmp	r7, #1
 80070a6:	d016      	beq.n	80070d6 <arm_cfft_f32+0x72>
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	2d20      	cmp	r5, #32
 80070ae:	d032      	beq.n	8007116 <arm_cfft_f32+0xb2>
 80070b0:	d94a      	bls.n	8007148 <arm_cfft_f32+0xe4>
 80070b2:	2d40      	cmp	r5, #64	@ 0x40
 80070b4:	d0ed      	beq.n	8007092 <arm_cfft_f32+0x2e>
 80070b6:	2d80      	cmp	r5, #128	@ 0x80
 80070b8:	d1f1      	bne.n	800709e <arm_cfft_f32+0x3a>
 80070ba:	4621      	mov	r1, r4
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff fca3 	bl	8006a08 <arm_cfft_radix8by2_f32>
 80070c2:	f1b8 0f00 	cmp.w	r8, #0
 80070c6:	d0ed      	beq.n	80070a4 <arm_cfft_f32+0x40>
 80070c8:	68b2      	ldr	r2, [r6, #8]
 80070ca:	89b1      	ldrh	r1, [r6, #12]
 80070cc:	4620      	mov	r0, r4
 80070ce:	f7f9 f887 	bl	80001e0 <arm_bitreversal_32>
 80070d2:	2f01      	cmp	r7, #1
 80070d4:	d1e8      	bne.n	80070a8 <arm_cfft_f32+0x44>
 80070d6:	ee07 5a90 	vmov	s15, r5
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	d0de      	beq.n	80070a8 <arm_cfft_f32+0x44>
 80070ea:	f104 0108 	add.w	r1, r4, #8
 80070ee:	2300      	movs	r3, #0
 80070f0:	3301      	adds	r3, #1
 80070f2:	429d      	cmp	r5, r3
 80070f4:	f101 0108 	add.w	r1, r1, #8
 80070f8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80070fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007100:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007104:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007108:	ed01 7a04 	vstr	s14, [r1, #-16]
 800710c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007110:	d1ee      	bne.n	80070f0 <arm_cfft_f32+0x8c>
 8007112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007116:	4621      	mov	r1, r4
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff fd45 	bl	8006ba8 <arm_cfft_radix8by4_f32>
 800711e:	e7be      	b.n	800709e <arm_cfft_f32+0x3a>
 8007120:	b1ad      	cbz	r5, 800714e <arm_cfft_f32+0xea>
 8007122:	f101 030c 	add.w	r3, r1, #12
 8007126:	2200      	movs	r2, #0
 8007128:	ed53 7a02 	vldr	s15, [r3, #-8]
 800712c:	3201      	adds	r2, #1
 800712e:	eef1 7a67 	vneg.f32	s15, s15
 8007132:	4295      	cmp	r5, r2
 8007134:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007138:	f103 0308 	add.w	r3, r3, #8
 800713c:	d1f4      	bne.n	8007128 <arm_cfft_f32+0xc4>
 800713e:	e79a      	b.n	8007076 <arm_cfft_f32+0x12>
 8007140:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007144:	d0a5      	beq.n	8007092 <arm_cfft_f32+0x2e>
 8007146:	e7aa      	b.n	800709e <arm_cfft_f32+0x3a>
 8007148:	2d10      	cmp	r5, #16
 800714a:	d0b6      	beq.n	80070ba <arm_cfft_f32+0x56>
 800714c:	e7a7      	b.n	800709e <arm_cfft_f32+0x3a>
 800714e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007152:	d894      	bhi.n	800707e <arm_cfft_f32+0x1a>
 8007154:	e7aa      	b.n	80070ac <arm_cfft_f32+0x48>
 8007156:	bf00      	nop

08007158 <arm_cmplx_mag_f32>:
 8007158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8007160:	b084      	sub	sp, #16
 8007162:	d07f      	beq.n	8007264 <arm_cmplx_mag_f32+0x10c>
 8007164:	2700      	movs	r7, #0
 8007166:	f100 0420 	add.w	r4, r0, #32
 800716a:	f101 0510 	add.w	r5, r1, #16
 800716e:	4646      	mov	r6, r8
 8007170:	e05a      	b.n	8007228 <arm_cmplx_mag_f32+0xd0>
 8007172:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007176:	eeb4 0a40 	vcmp.f32	s0, s0
 800717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717e:	f040 80a4 	bne.w	80072ca <arm_cmplx_mag_f32+0x172>
 8007182:	ed05 0a04 	vstr	s0, [r5, #-16]
 8007186:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800718a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800718e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007192:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007196:	ee77 7a80 	vadd.f32	s15, s15, s0
 800719a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	f2c0 808f 	blt.w	80072c4 <arm_cmplx_mag_f32+0x16c>
 80071a6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80071aa:	eeb4 0a40 	vcmp.f32	s0, s0
 80071ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b2:	f040 80af 	bne.w	8007314 <arm_cmplx_mag_f32+0x1bc>
 80071b6:	ed05 0a03 	vstr	s0, [r5, #-12]
 80071ba:	ed54 7a04 	vldr	s15, [r4, #-16]
 80071be:	ed14 0a03 	vldr	s0, [r4, #-12]
 80071c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80071ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80071ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d6:	db72      	blt.n	80072be <arm_cmplx_mag_f32+0x166>
 80071d8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80071dc:	eeb4 0a40 	vcmp.f32	s0, s0
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	f040 808c 	bne.w	8007300 <arm_cmplx_mag_f32+0x1a8>
 80071e8:	ed05 0a02 	vstr	s0, [r5, #-8]
 80071ec:	ed54 7a02 	vldr	s15, [r4, #-8]
 80071f0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80071f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80071fc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007208:	db20      	blt.n	800724c <arm_cmplx_mag_f32+0xf4>
 800720a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800720e:	eeb4 0a40 	vcmp.f32	s0, s0
 8007212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007216:	d169      	bne.n	80072ec <arm_cmplx_mag_f32+0x194>
 8007218:	3e01      	subs	r6, #1
 800721a:	ed05 0a01 	vstr	s0, [r5, #-4]
 800721e:	f104 0420 	add.w	r4, r4, #32
 8007222:	f105 0510 	add.w	r5, r5, #16
 8007226:	d019      	beq.n	800725c <arm_cmplx_mag_f32+0x104>
 8007228:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800722c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8007230:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007234:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007238:	ee77 7a80 	vadd.f32	s15, s15, s0
 800723c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007244:	da95      	bge.n	8007172 <arm_cmplx_mag_f32+0x1a>
 8007246:	f845 7c10 	str.w	r7, [r5, #-16]
 800724a:	e79c      	b.n	8007186 <arm_cmplx_mag_f32+0x2e>
 800724c:	3e01      	subs	r6, #1
 800724e:	f845 7c04 	str.w	r7, [r5, #-4]
 8007252:	f104 0420 	add.w	r4, r4, #32
 8007256:	f105 0510 	add.w	r5, r5, #16
 800725a:	d1e5      	bne.n	8007228 <arm_cmplx_mag_f32+0xd0>
 800725c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8007260:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8007264:	f012 0503 	ands.w	r5, r2, #3
 8007268:	d026      	beq.n	80072b8 <arm_cmplx_mag_f32+0x160>
 800726a:	2600      	movs	r6, #0
 800726c:	f100 0408 	add.w	r4, r0, #8
 8007270:	e00c      	b.n	800728c <arm_cmplx_mag_f32+0x134>
 8007272:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007276:	eeb4 0a40 	vcmp.f32	s0, s0
 800727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727e:	d12e      	bne.n	80072de <arm_cmplx_mag_f32+0x186>
 8007280:	3d01      	subs	r5, #1
 8007282:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007286:	f104 0408 	add.w	r4, r4, #8
 800728a:	d015      	beq.n	80072b8 <arm_cmplx_mag_f32+0x160>
 800728c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007290:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007294:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007298:	ee20 0a00 	vmul.f32	s0, s0, s0
 800729c:	3104      	adds	r1, #4
 800729e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072aa:	dae2      	bge.n	8007272 <arm_cmplx_mag_f32+0x11a>
 80072ac:	3d01      	subs	r5, #1
 80072ae:	f841 6c04 	str.w	r6, [r1, #-4]
 80072b2:	f104 0408 	add.w	r4, r4, #8
 80072b6:	d1e9      	bne.n	800728c <arm_cmplx_mag_f32+0x134>
 80072b8:	b004      	add	sp, #16
 80072ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072be:	f845 7c08 	str.w	r7, [r5, #-8]
 80072c2:	e793      	b.n	80071ec <arm_cmplx_mag_f32+0x94>
 80072c4:	f845 7c0c 	str.w	r7, [r5, #-12]
 80072c8:	e777      	b.n	80071ba <arm_cmplx_mag_f32+0x62>
 80072ca:	eeb0 0a67 	vmov.f32	s0, s15
 80072ce:	9203      	str	r2, [sp, #12]
 80072d0:	9102      	str	r1, [sp, #8]
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	f000 ffba 	bl	800824c <sqrtf>
 80072d8:	a801      	add	r0, sp, #4
 80072da:	c807      	ldmia	r0, {r0, r1, r2}
 80072dc:	e751      	b.n	8007182 <arm_cmplx_mag_f32+0x2a>
 80072de:	eeb0 0a67 	vmov.f32	s0, s15
 80072e2:	9101      	str	r1, [sp, #4]
 80072e4:	f000 ffb2 	bl	800824c <sqrtf>
 80072e8:	9901      	ldr	r1, [sp, #4]
 80072ea:	e7c9      	b.n	8007280 <arm_cmplx_mag_f32+0x128>
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	9203      	str	r2, [sp, #12]
 80072f2:	9102      	str	r1, [sp, #8]
 80072f4:	9001      	str	r0, [sp, #4]
 80072f6:	f000 ffa9 	bl	800824c <sqrtf>
 80072fa:	a801      	add	r0, sp, #4
 80072fc:	c807      	ldmia	r0, {r0, r1, r2}
 80072fe:	e78b      	b.n	8007218 <arm_cmplx_mag_f32+0xc0>
 8007300:	eeb0 0a67 	vmov.f32	s0, s15
 8007304:	9203      	str	r2, [sp, #12]
 8007306:	9102      	str	r1, [sp, #8]
 8007308:	9001      	str	r0, [sp, #4]
 800730a:	f000 ff9f 	bl	800824c <sqrtf>
 800730e:	a801      	add	r0, sp, #4
 8007310:	c807      	ldmia	r0, {r0, r1, r2}
 8007312:	e769      	b.n	80071e8 <arm_cmplx_mag_f32+0x90>
 8007314:	eeb0 0a67 	vmov.f32	s0, s15
 8007318:	9203      	str	r2, [sp, #12]
 800731a:	9102      	str	r1, [sp, #8]
 800731c:	9001      	str	r0, [sp, #4]
 800731e:	f000 ff95 	bl	800824c <sqrtf>
 8007322:	a801      	add	r0, sp, #4
 8007324:	c807      	ldmia	r0, {r0, r1, r2}
 8007326:	e746      	b.n	80071b6 <arm_cmplx_mag_f32+0x5e>

08007328 <arm_radix8_butterfly_f32>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	ed2d 8b10 	vpush	{d8-d15}
 8007330:	461c      	mov	r4, r3
 8007332:	b09d      	sub	sp, #116	@ 0x74
 8007334:	4603      	mov	r3, r0
 8007336:	3304      	adds	r3, #4
 8007338:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800764c <arm_radix8_butterfly_f32+0x324>
 800733c:	9019      	str	r0, [sp, #100]	@ 0x64
 800733e:	921a      	str	r2, [sp, #104]	@ 0x68
 8007340:	468b      	mov	fp, r1
 8007342:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007344:	468a      	mov	sl, r1
 8007346:	46a1      	mov	r9, r4
 8007348:	4607      	mov	r7, r0
 800734a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800734e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007352:	eb03 0508 	add.w	r5, r3, r8
 8007356:	195c      	adds	r4, r3, r5
 8007358:	00de      	lsls	r6, r3, #3
 800735a:	191a      	adds	r2, r3, r4
 800735c:	9600      	str	r6, [sp, #0]
 800735e:	1898      	adds	r0, r3, r2
 8007360:	4619      	mov	r1, r3
 8007362:	9e00      	ldr	r6, [sp, #0]
 8007364:	9311      	str	r3, [sp, #68]	@ 0x44
 8007366:	4401      	add	r1, r0
 8007368:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800736c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007370:	19be      	adds	r6, r7, r6
 8007372:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8007376:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800737a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800737e:	9f00      	ldr	r7, [sp, #0]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	eb06 0e07 	add.w	lr, r6, r7
 8007386:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007388:	9302      	str	r3, [sp, #8]
 800738a:	3204      	adds	r2, #4
 800738c:	3104      	adds	r1, #4
 800738e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007392:	f04f 0c00 	mov.w	ip, #0
 8007396:	edde 7a00 	vldr	s15, [lr]
 800739a:	edd6 6a00 	vldr	s13, [r6]
 800739e:	ed95 2a00 	vldr	s4, [r5]
 80073a2:	ed17 aa01 	vldr	s20, [r7, #-4]
 80073a6:	edd4 4a00 	vldr	s9, [r4]
 80073aa:	ed90 5a00 	vldr	s10, [r0]
 80073ae:	ed12 7a01 	vldr	s14, [r2, #-4]
 80073b2:	ed51 0a01 	vldr	s1, [r1, #-4]
 80073b6:	ee77 8a85 	vadd.f32	s17, s15, s10
 80073ba:	ee76 3a87 	vadd.f32	s7, s13, s14
 80073be:	ee32 4a20 	vadd.f32	s8, s4, s1
 80073c2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80073c6:	ee33 6a84 	vadd.f32	s12, s7, s8
 80073ca:	ee73 5a28 	vadd.f32	s11, s6, s17
 80073ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80073d2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80073d6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80073da:	ed47 6a01 	vstr	s13, [r7, #-4]
 80073de:	edc4 5a00 	vstr	s11, [r4]
 80073e2:	ed92 9a00 	vldr	s18, [r2]
 80073e6:	ed95 1a01 	vldr	s2, [r5, #4]
 80073ea:	edd6 5a01 	vldr	s11, [r6, #4]
 80073ee:	ed91 6a00 	vldr	s12, [r1]
 80073f2:	edd7 2a00 	vldr	s5, [r7]
 80073f6:	edd4 1a01 	vldr	s3, [r4, #4]
 80073fa:	edde 6a01 	vldr	s13, [lr, #4]
 80073fe:	edd0 9a01 	vldr	s19, [r0, #4]
 8007402:	ee72 0a60 	vsub.f32	s1, s4, s1
 8007406:	ee71 aa46 	vsub.f32	s21, s2, s12
 800740a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800740e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007412:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8007416:	ee37 7a20 	vadd.f32	s14, s14, s1
 800741a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800741e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8007422:	ee75 5a89 	vadd.f32	s11, s11, s18
 8007426:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800742a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800742e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007432:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8007436:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800743a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800743e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8007442:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8007446:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800744a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800744e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007452:	ee36 0a88 	vadd.f32	s0, s13, s16
 8007456:	ee75 8a86 	vadd.f32	s17, s11, s12
 800745a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800745e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007462:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8007466:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800746a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800746e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8007472:	ee71 5a49 	vsub.f32	s11, s2, s18
 8007476:	ee31 2a09 	vadd.f32	s4, s2, s18
 800747a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800747e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8007482:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8007486:	ee73 0a06 	vadd.f32	s1, s6, s12
 800748a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800748e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007492:	ee32 8a28 	vadd.f32	s16, s4, s17
 8007496:	ee33 6a46 	vsub.f32	s12, s6, s12
 800749a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800749e:	ee33 3a80 	vadd.f32	s6, s7, s0
 80074a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80074a6:	ee71 5a64 	vsub.f32	s11, s2, s9
 80074aa:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80074ae:	ee32 2a68 	vsub.f32	s4, s4, s17
 80074b2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80074b6:	ee74 4a81 	vadd.f32	s9, s9, s2
 80074ba:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80074be:	44dc      	add	ip, fp
 80074c0:	45e2      	cmp	sl, ip
 80074c2:	ed87 8a00 	vstr	s16, [r7]
 80074c6:	ed84 2a01 	vstr	s4, [r4, #4]
 80074ca:	441f      	add	r7, r3
 80074cc:	edce 0a00 	vstr	s1, [lr]
 80074d0:	441c      	add	r4, r3
 80074d2:	ed80 6a00 	vstr	s12, [r0]
 80074d6:	edce 1a01 	vstr	s3, [lr, #4]
 80074da:	ed80 4a01 	vstr	s8, [r0, #4]
 80074de:	449e      	add	lr, r3
 80074e0:	ed86 3a00 	vstr	s6, [r6]
 80074e4:	4418      	add	r0, r3
 80074e6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80074ea:	ed02 5a01 	vstr	s10, [r2, #-4]
 80074ee:	ed85 7a00 	vstr	s14, [r5]
 80074f2:	edc6 5a01 	vstr	s11, [r6, #4]
 80074f6:	edc1 4a00 	vstr	s9, [r1]
 80074fa:	441e      	add	r6, r3
 80074fc:	edc2 6a00 	vstr	s13, [r2]
 8007500:	4419      	add	r1, r3
 8007502:	edc5 7a01 	vstr	s15, [r5, #4]
 8007506:	441a      	add	r2, r3
 8007508:	441d      	add	r5, r3
 800750a:	f63f af44 	bhi.w	8007396 <arm_radix8_butterfly_f32+0x6e>
 800750e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007510:	2a07      	cmp	r2, #7
 8007512:	f240 81f5 	bls.w	8007900 <arm_radix8_butterfly_f32+0x5d8>
 8007516:	f108 0101 	add.w	r1, r8, #1
 800751a:	188f      	adds	r7, r1, r2
 800751c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8007520:	19d6      	adds	r6, r2, r7
 8007522:	eb08 0c09 	add.w	ip, r8, r9
 8007526:	1994      	adds	r4, r2, r6
 8007528:	eb0c 0e09 	add.w	lr, ip, r9
 800752c:	4610      	mov	r0, r2
 800752e:	9701      	str	r7, [sp, #4]
 8007530:	4420      	add	r0, r4
 8007532:	eb0e 0709 	add.w	r7, lr, r9
 8007536:	1815      	adds	r5, r2, r0
 8007538:	eb07 0209 	add.w	r2, r7, r9
 800753c:	9203      	str	r2, [sp, #12]
 800753e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007544:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007546:	440a      	add	r2, r1
 8007548:	9900      	ldr	r1, [sp, #0]
 800754a:	3108      	adds	r1, #8
 800754c:	9100      	str	r1, [sp, #0]
 800754e:	9902      	ldr	r1, [sp, #8]
 8007550:	3108      	adds	r1, #8
 8007552:	9102      	str	r1, [sp, #8]
 8007554:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007556:	00ff      	lsls	r7, r7, #3
 8007558:	9715      	str	r7, [sp, #84]	@ 0x54
 800755a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800755e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007562:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8007566:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	19d7      	adds	r7, r2, r7
 800756c:	00c9      	lsls	r1, r1, #3
 800756e:	9114      	str	r1, [sp, #80]	@ 0x50
 8007570:	9710      	str	r7, [sp, #64]	@ 0x40
 8007572:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007574:	9f00      	ldr	r7, [sp, #0]
 8007576:	19cf      	adds	r7, r1, r7
 8007578:	970d      	str	r7, [sp, #52]	@ 0x34
 800757a:	9f02      	ldr	r7, [sp, #8]
 800757c:	19cf      	adds	r7, r1, r7
 800757e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8007582:	970c      	str	r7, [sp, #48]	@ 0x30
 8007584:	9f01      	ldr	r7, [sp, #4]
 8007586:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800758a:	3504      	adds	r5, #4
 800758c:	3004      	adds	r0, #4
 800758e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8007592:	9508      	str	r5, [sp, #32]
 8007594:	9009      	str	r0, [sp, #36]	@ 0x24
 8007596:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8007598:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800759a:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800759e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80075a2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80075a6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80075a8:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 80075ac:	1945      	adds	r5, r0, r5
 80075ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80075b2:	460f      	mov	r7, r1
 80075b4:	3404      	adds	r4, #4
 80075b6:	4641      	mov	r1, r8
 80075b8:	1841      	adds	r1, r0, r1
 80075ba:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 80075be:	940a      	str	r4, [sp, #40]	@ 0x28
 80075c0:	eb00 0c06 	add.w	ip, r0, r6
 80075c4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80075c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80075ca:	9506      	str	r5, [sp, #24]
 80075cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80075ce:	9105      	str	r1, [sp, #20]
 80075d0:	4639      	mov	r1, r7
 80075d2:	1905      	adds	r5, r0, r4
 80075d4:	3108      	adds	r1, #8
 80075d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80075d8:	9507      	str	r5, [sp, #28]
 80075da:	910f      	str	r1, [sp, #60]	@ 0x3c
 80075dc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80075e0:	2101      	movs	r1, #1
 80075e2:	eb00 0e06 	add.w	lr, r0, r6
 80075e6:	9518      	str	r5, [sp, #96]	@ 0x60
 80075e8:	9404      	str	r4, [sp, #16]
 80075ea:	9103      	str	r1, [sp, #12]
 80075ec:	4620      	mov	r0, r4
 80075ee:	4689      	mov	r9, r1
 80075f0:	9e06      	ldr	r6, [sp, #24]
 80075f2:	ed90 fa00 	vldr	s30, [r0]
 80075f6:	edd6 7a01 	vldr	s15, [r6, #4]
 80075fa:	edd0 ba01 	vldr	s23, [r0, #4]
 80075fe:	edcd 7a00 	vstr	s15, [sp]
 8007602:	a80d      	add	r0, sp, #52	@ 0x34
 8007604:	edde 7a01 	vldr	s15, [lr, #4]
 8007608:	9c05      	ldr	r4, [sp, #20]
 800760a:	9d07      	ldr	r5, [sp, #28]
 800760c:	edd2 fa00 	vldr	s31, [r2]
 8007610:	ed92 ca01 	vldr	s24, [r2, #4]
 8007614:	edcd 7a01 	vstr	s15, [sp, #4]
 8007618:	c807      	ldmia	r0, {r0, r1, r2}
 800761a:	eddc 7a01 	vldr	s15, [ip, #4]
 800761e:	edd4 ea00 	vldr	s29, [r4]
 8007622:	ed95 ea00 	vldr	s28, [r5]
 8007626:	edd6 da00 	vldr	s27, [r6]
 800762a:	edd4 aa01 	vldr	s21, [r4, #4]
 800762e:	ed95 aa01 	vldr	s20, [r5, #4]
 8007632:	ed9e da00 	vldr	s26, [lr]
 8007636:	eddc ca00 	vldr	s25, [ip]
 800763a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800763e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007640:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007642:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007644:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007646:	edcd 7a02 	vstr	s15, [sp, #8]
 800764a:	e001      	b.n	8007650 <arm_radix8_butterfly_f32+0x328>
 800764c:	3f3504f3 	.word	0x3f3504f3
 8007650:	ed16 6a01 	vldr	s12, [r6, #-4]
 8007654:	ed91 5a00 	vldr	s10, [r1]
 8007658:	ed57 9a01 	vldr	s19, [r7, #-4]
 800765c:	edd5 7a00 	vldr	s15, [r5]
 8007660:	ed18 7a01 	vldr	s14, [r8, #-4]
 8007664:	edd2 3a00 	vldr	s7, [r2]
 8007668:	ed94 3a00 	vldr	s6, [r4]
 800766c:	ed90 2a00 	vldr	s4, [r0]
 8007670:	ed92 0a01 	vldr	s0, [r2, #4]
 8007674:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007678:	ee32 1a06 	vadd.f32	s2, s4, s12
 800767c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8007680:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007684:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007688:	ee71 6a24 	vadd.f32	s13, s2, s9
 800768c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007690:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007698:	ed82 6a00 	vstr	s12, [r2]
 800769c:	edd5 8a01 	vldr	s17, [r5, #4]
 80076a0:	ed90 9a01 	vldr	s18, [r0, #4]
 80076a4:	edd6 2a00 	vldr	s5, [r6]
 80076a8:	ed98 7a00 	vldr	s14, [r8]
 80076ac:	edd4 0a01 	vldr	s1, [r4, #4]
 80076b0:	ed91 6a01 	vldr	s12, [r1, #4]
 80076b4:	edd7 5a00 	vldr	s11, [r7]
 80076b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80076bc:	ee33 3a69 	vsub.f32	s6, s6, s19
 80076c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80076c4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80076c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80076cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80076d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80076d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80076d8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80076dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80076e0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80076e4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80076e8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80076ec:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80076f0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80076f4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80076f8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80076fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007700:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007704:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007708:	ee32 1a87 	vadd.f32	s2, s5, s14
 800770c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007710:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007714:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007718:	ee73 0a29 	vadd.f32	s1, s6, s19
 800771c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007720:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007724:	ee32 7a64 	vsub.f32	s14, s4, s9
 8007728:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800772c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007730:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007734:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007738:	ee74 3a22 	vadd.f32	s7, s8, s5
 800773c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8007740:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007744:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007748:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800774c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8007750:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007754:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007758:	ee30 4a60 	vsub.f32	s8, s0, s1
 800775c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8007760:	ee30 0a80 	vadd.f32	s0, s1, s0
 8007764:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007768:	ee33 6a06 	vadd.f32	s12, s6, s12
 800776c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007770:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8007774:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007778:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800777c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8007780:	ee39 1a01 	vadd.f32	s2, s18, s2
 8007784:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007788:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800778c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8007790:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8007794:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007798:	ee35 3a03 	vadd.f32	s6, s10, s6
 800779c:	ee72 6a66 	vsub.f32	s13, s4, s13
 80077a0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80077a4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80077a8:	ed9d 4a02 	vldr	s8, [sp, #8]
 80077ac:	ed82 1a01 	vstr	s2, [r2, #4]
 80077b0:	ee77 3a63 	vsub.f32	s7, s14, s7
 80077b4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80077b8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80077bc:	ed81 3a00 	vstr	s6, [r1]
 80077c0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80077c4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80077c8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80077cc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80077d0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80077d4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80077d8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80077dc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80077e0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80077e4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80077e8:	ed9d 4a00 	vldr	s8, [sp]
 80077ec:	edc1 6a01 	vstr	s13, [r1, #4]
 80077f0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80077f4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80077f8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80077fc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8007800:	ee30 7a87 	vadd.f32	s14, s1, s14
 8007804:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007808:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800780c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8007810:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8007814:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8007818:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800781c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8007820:	ee75 1a21 	vadd.f32	s3, s10, s3
 8007824:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007828:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800782c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8007830:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007834:	44d9      	add	r9, fp
 8007836:	45ca      	cmp	sl, r9
 8007838:	ed84 9a00 	vstr	s18, [r4]
 800783c:	edc4 3a01 	vstr	s7, [r4, #4]
 8007840:	441a      	add	r2, r3
 8007842:	ed07 7a01 	vstr	s14, [r7, #-4]
 8007846:	edc7 2a00 	vstr	s5, [r7]
 800784a:	4419      	add	r1, r3
 800784c:	ed80 2a00 	vstr	s4, [r0]
 8007850:	ed80 8a01 	vstr	s16, [r0, #4]
 8007854:	441c      	add	r4, r3
 8007856:	ed48 1a01 	vstr	s3, [r8, #-4]
 800785a:	ed88 0a00 	vstr	s0, [r8]
 800785e:	441f      	add	r7, r3
 8007860:	ed46 4a01 	vstr	s9, [r6, #-4]
 8007864:	4418      	add	r0, r3
 8007866:	edc6 9a00 	vstr	s19, [r6]
 800786a:	4498      	add	r8, r3
 800786c:	edc5 0a00 	vstr	s1, [r5]
 8007870:	ed85 6a01 	vstr	s12, [r5, #4]
 8007874:	441e      	add	r6, r3
 8007876:	441d      	add	r5, r3
 8007878:	f63f aeea 	bhi.w	8007650 <arm_radix8_butterfly_f32+0x328>
 800787c:	9a03      	ldr	r2, [sp, #12]
 800787e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007880:	3201      	adds	r2, #1
 8007882:	4611      	mov	r1, r2
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	4402      	add	r2, r0
 800788a:	9204      	str	r2, [sp, #16]
 800788c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	4402      	add	r2, r0
 8007892:	9205      	str	r2, [sp, #20]
 8007894:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007896:	9a07      	ldr	r2, [sp, #28]
 8007898:	4402      	add	r2, r0
 800789a:	9207      	str	r2, [sp, #28]
 800789c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800789e:	9a06      	ldr	r2, [sp, #24]
 80078a0:	4402      	add	r2, r0
 80078a2:	9206      	str	r2, [sp, #24]
 80078a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80078a6:	4496      	add	lr, r2
 80078a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078aa:	4494      	add	ip, r2
 80078ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078ae:	3208      	adds	r2, #8
 80078b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80078b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078b4:	3208      	adds	r2, #8
 80078b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80078b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078ba:	3208      	adds	r2, #8
 80078bc:	920d      	str	r2, [sp, #52]	@ 0x34
 80078be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078c0:	3208      	adds	r2, #8
 80078c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80078c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078c6:	3208      	adds	r2, #8
 80078c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078cc:	3208      	adds	r2, #8
 80078ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80078d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d2:	3208      	adds	r2, #8
 80078d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	3208      	adds	r2, #8
 80078da:	9208      	str	r2, [sp, #32]
 80078dc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80078de:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80078e0:	4288      	cmp	r0, r1
 80078e2:	4622      	mov	r2, r4
 80078e4:	d007      	beq.n	80078f6 <arm_radix8_butterfly_f32+0x5ce>
 80078e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80078e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80078ec:	4621      	mov	r1, r4
 80078ee:	4401      	add	r1, r0
 80078f0:	9110      	str	r1, [sp, #64]	@ 0x40
 80078f2:	9804      	ldr	r0, [sp, #16]
 80078f4:	e67c      	b.n	80075f0 <arm_radix8_butterfly_f32+0x2c8>
 80078f6:	4683      	mov	fp, r0
 80078f8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 80078fc:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80078fe:	e524      	b.n	800734a <arm_radix8_butterfly_f32+0x22>
 8007900:	b01d      	add	sp, #116	@ 0x74
 8007902:	ecbd 8b10 	vpop	{d8-d15}
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790a:	bf00      	nop

0800790c <siprintf>:
 800790c:	b40e      	push	{r1, r2, r3}
 800790e:	b500      	push	{lr}
 8007910:	b09c      	sub	sp, #112	@ 0x70
 8007912:	ab1d      	add	r3, sp, #116	@ 0x74
 8007914:	9002      	str	r0, [sp, #8]
 8007916:	9006      	str	r0, [sp, #24]
 8007918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800791c:	4809      	ldr	r0, [pc, #36]	@ (8007944 <siprintf+0x38>)
 800791e:	9107      	str	r1, [sp, #28]
 8007920:	9104      	str	r1, [sp, #16]
 8007922:	4909      	ldr	r1, [pc, #36]	@ (8007948 <siprintf+0x3c>)
 8007924:	f853 2b04 	ldr.w	r2, [r3], #4
 8007928:	9105      	str	r1, [sp, #20]
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	a902      	add	r1, sp, #8
 8007930:	f000 f994 	bl	8007c5c <_svfiprintf_r>
 8007934:	9b02      	ldr	r3, [sp, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	b01c      	add	sp, #112	@ 0x70
 800793c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007940:	b003      	add	sp, #12
 8007942:	4770      	bx	lr
 8007944:	20000014 	.word	0x20000014
 8007948:	ffff0208 	.word	0xffff0208

0800794c <memset>:
 800794c:	4402      	add	r2, r0
 800794e:	4603      	mov	r3, r0
 8007950:	4293      	cmp	r3, r2
 8007952:	d100      	bne.n	8007956 <memset+0xa>
 8007954:	4770      	bx	lr
 8007956:	f803 1b01 	strb.w	r1, [r3], #1
 800795a:	e7f9      	b.n	8007950 <memset+0x4>

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	@ (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000014 	.word	0x20000014

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	@ (80079a0 <__libc_init_array+0x38>)
 800796c:	4c0d      	ldr	r4, [pc, #52]	@ (80079a4 <__libc_init_array+0x3c>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	2600      	movs	r6, #0
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	@ (80079a8 <__libc_init_array+0x40>)
 800797a:	4c0c      	ldr	r4, [pc, #48]	@ (80079ac <__libc_init_array+0x44>)
 800797c:	f000 fc88 	bl	8008290 <_init>
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	2600      	movs	r6, #0
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	4798      	blx	r3
 8007992:	3601      	adds	r6, #1
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	4798      	blx	r3
 800799c:	3601      	adds	r6, #1
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	0801bf58 	.word	0x0801bf58
 80079a4:	0801bf58 	.word	0x0801bf58
 80079a8:	0801bf58 	.word	0x0801bf58
 80079ac:	0801bf5c 	.word	0x0801bf5c

080079b0 <__retarget_lock_acquire_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_release_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <_free_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4605      	mov	r5, r0
 80079b8:	2900      	cmp	r1, #0
 80079ba:	d041      	beq.n	8007a40 <_free_r+0x8c>
 80079bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c0:	1f0c      	subs	r4, r1, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfb8      	it	lt
 80079c6:	18e4      	addlt	r4, r4, r3
 80079c8:	f000 f8e0 	bl	8007b8c <__malloc_lock>
 80079cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a44 <_free_r+0x90>)
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	b933      	cbnz	r3, 80079e0 <_free_r+0x2c>
 80079d2:	6063      	str	r3, [r4, #4]
 80079d4:	6014      	str	r4, [r2, #0]
 80079d6:	4628      	mov	r0, r5
 80079d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079dc:	f000 b8dc 	b.w	8007b98 <__malloc_unlock>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d908      	bls.n	80079f6 <_free_r+0x42>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	1821      	adds	r1, r4, r0
 80079e8:	428b      	cmp	r3, r1
 80079ea:	bf01      	itttt	eq
 80079ec:	6819      	ldreq	r1, [r3, #0]
 80079ee:	685b      	ldreq	r3, [r3, #4]
 80079f0:	1809      	addeq	r1, r1, r0
 80079f2:	6021      	streq	r1, [r4, #0]
 80079f4:	e7ed      	b.n	80079d2 <_free_r+0x1e>
 80079f6:	461a      	mov	r2, r3
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b10b      	cbz	r3, 8007a00 <_free_r+0x4c>
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d9fa      	bls.n	80079f6 <_free_r+0x42>
 8007a00:	6811      	ldr	r1, [r2, #0]
 8007a02:	1850      	adds	r0, r2, r1
 8007a04:	42a0      	cmp	r0, r4
 8007a06:	d10b      	bne.n	8007a20 <_free_r+0x6c>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	1850      	adds	r0, r2, r1
 8007a0e:	4283      	cmp	r3, r0
 8007a10:	6011      	str	r1, [r2, #0]
 8007a12:	d1e0      	bne.n	80079d6 <_free_r+0x22>
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	6053      	str	r3, [r2, #4]
 8007a1a:	4408      	add	r0, r1
 8007a1c:	6010      	str	r0, [r2, #0]
 8007a1e:	e7da      	b.n	80079d6 <_free_r+0x22>
 8007a20:	d902      	bls.n	8007a28 <_free_r+0x74>
 8007a22:	230c      	movs	r3, #12
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	e7d6      	b.n	80079d6 <_free_r+0x22>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	1821      	adds	r1, r4, r0
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	bf04      	itt	eq
 8007a30:	6819      	ldreq	r1, [r3, #0]
 8007a32:	685b      	ldreq	r3, [r3, #4]
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	bf04      	itt	eq
 8007a38:	1809      	addeq	r1, r1, r0
 8007a3a:	6021      	streq	r1, [r4, #0]
 8007a3c:	6054      	str	r4, [r2, #4]
 8007a3e:	e7ca      	b.n	80079d6 <_free_r+0x22>
 8007a40:	bd38      	pop	{r3, r4, r5, pc}
 8007a42:	bf00      	nop
 8007a44:	2000484c 	.word	0x2000484c

08007a48 <sbrk_aligned>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8007a88 <sbrk_aligned+0x40>)
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	6831      	ldr	r1, [r6, #0]
 8007a50:	4605      	mov	r5, r0
 8007a52:	b911      	cbnz	r1, 8007a5a <sbrk_aligned+0x12>
 8007a54:	f000 fba6 	bl	80081a4 <_sbrk_r>
 8007a58:	6030      	str	r0, [r6, #0]
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f000 fba1 	bl	80081a4 <_sbrk_r>
 8007a62:	1c43      	adds	r3, r0, #1
 8007a64:	d103      	bne.n	8007a6e <sbrk_aligned+0x26>
 8007a66:	f04f 34ff 	mov.w	r4, #4294967295
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	1cc4      	adds	r4, r0, #3
 8007a70:	f024 0403 	bic.w	r4, r4, #3
 8007a74:	42a0      	cmp	r0, r4
 8007a76:	d0f8      	beq.n	8007a6a <sbrk_aligned+0x22>
 8007a78:	1a21      	subs	r1, r4, r0
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 fb92 	bl	80081a4 <_sbrk_r>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d1f2      	bne.n	8007a6a <sbrk_aligned+0x22>
 8007a84:	e7ef      	b.n	8007a66 <sbrk_aligned+0x1e>
 8007a86:	bf00      	nop
 8007a88:	20004848 	.word	0x20004848

08007a8c <_malloc_r>:
 8007a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	1ccd      	adds	r5, r1, #3
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	db01      	blt.n	8007aa8 <_malloc_r+0x1c>
 8007aa4:	42a9      	cmp	r1, r5
 8007aa6:	d904      	bls.n	8007ab2 <_malloc_r+0x26>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	6033      	str	r3, [r6, #0]
 8007aac:	2000      	movs	r0, #0
 8007aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b88 <_malloc_r+0xfc>
 8007ab6:	f000 f869 	bl	8007b8c <__malloc_lock>
 8007aba:	f8d8 3000 	ldr.w	r3, [r8]
 8007abe:	461c      	mov	r4, r3
 8007ac0:	bb44      	cbnz	r4, 8007b14 <_malloc_r+0x88>
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f7ff ffbf 	bl	8007a48 <sbrk_aligned>
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	4604      	mov	r4, r0
 8007ace:	d158      	bne.n	8007b82 <_malloc_r+0xf6>
 8007ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ad4:	4627      	mov	r7, r4
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	d143      	bne.n	8007b62 <_malloc_r+0xd6>
 8007ada:	2c00      	cmp	r4, #0
 8007adc:	d04b      	beq.n	8007b76 <_malloc_r+0xea>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	eb04 0903 	add.w	r9, r4, r3
 8007ae8:	f000 fb5c 	bl	80081a4 <_sbrk_r>
 8007aec:	4581      	cmp	r9, r0
 8007aee:	d142      	bne.n	8007b76 <_malloc_r+0xea>
 8007af0:	6821      	ldr	r1, [r4, #0]
 8007af2:	1a6d      	subs	r5, r5, r1
 8007af4:	4629      	mov	r1, r5
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7ff ffa6 	bl	8007a48 <sbrk_aligned>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d03a      	beq.n	8007b76 <_malloc_r+0xea>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	442b      	add	r3, r5
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	bb62      	cbnz	r2, 8007b68 <_malloc_r+0xdc>
 8007b0e:	f8c8 7000 	str.w	r7, [r8]
 8007b12:	e00f      	b.n	8007b34 <_malloc_r+0xa8>
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	1b52      	subs	r2, r2, r5
 8007b18:	d420      	bmi.n	8007b5c <_malloc_r+0xd0>
 8007b1a:	2a0b      	cmp	r2, #11
 8007b1c:	d917      	bls.n	8007b4e <_malloc_r+0xc2>
 8007b1e:	1961      	adds	r1, r4, r5
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	6025      	str	r5, [r4, #0]
 8007b24:	bf18      	it	ne
 8007b26:	6059      	strne	r1, [r3, #4]
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	bf08      	it	eq
 8007b2c:	f8c8 1000 	streq.w	r1, [r8]
 8007b30:	5162      	str	r2, [r4, r5]
 8007b32:	604b      	str	r3, [r1, #4]
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f82f 	bl	8007b98 <__malloc_unlock>
 8007b3a:	f104 000b 	add.w	r0, r4, #11
 8007b3e:	1d23      	adds	r3, r4, #4
 8007b40:	f020 0007 	bic.w	r0, r0, #7
 8007b44:	1ac2      	subs	r2, r0, r3
 8007b46:	bf1c      	itt	ne
 8007b48:	1a1b      	subne	r3, r3, r0
 8007b4a:	50a3      	strne	r3, [r4, r2]
 8007b4c:	e7af      	b.n	8007aae <_malloc_r+0x22>
 8007b4e:	6862      	ldr	r2, [r4, #4]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	bf0c      	ite	eq
 8007b54:	f8c8 2000 	streq.w	r2, [r8]
 8007b58:	605a      	strne	r2, [r3, #4]
 8007b5a:	e7eb      	b.n	8007b34 <_malloc_r+0xa8>
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	6864      	ldr	r4, [r4, #4]
 8007b60:	e7ae      	b.n	8007ac0 <_malloc_r+0x34>
 8007b62:	463c      	mov	r4, r7
 8007b64:	687f      	ldr	r7, [r7, #4]
 8007b66:	e7b6      	b.n	8007ad6 <_malloc_r+0x4a>
 8007b68:	461a      	mov	r2, r3
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d1fb      	bne.n	8007b68 <_malloc_r+0xdc>
 8007b70:	2300      	movs	r3, #0
 8007b72:	6053      	str	r3, [r2, #4]
 8007b74:	e7de      	b.n	8007b34 <_malloc_r+0xa8>
 8007b76:	230c      	movs	r3, #12
 8007b78:	6033      	str	r3, [r6, #0]
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f000 f80c 	bl	8007b98 <__malloc_unlock>
 8007b80:	e794      	b.n	8007aac <_malloc_r+0x20>
 8007b82:	6005      	str	r5, [r0, #0]
 8007b84:	e7d6      	b.n	8007b34 <_malloc_r+0xa8>
 8007b86:	bf00      	nop
 8007b88:	2000484c 	.word	0x2000484c

08007b8c <__malloc_lock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	@ (8007b94 <__malloc_lock+0x8>)
 8007b8e:	f7ff bf0f 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	20004844 	.word	0x20004844

08007b98 <__malloc_unlock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	@ (8007ba0 <__malloc_unlock+0x8>)
 8007b9a:	f7ff bf0a 	b.w	80079b2 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	20004844 	.word	0x20004844

08007ba4 <__ssputs_r>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	688e      	ldr	r6, [r1, #8]
 8007baa:	461f      	mov	r7, r3
 8007bac:	42be      	cmp	r6, r7
 8007bae:	680b      	ldr	r3, [r1, #0]
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	4690      	mov	r8, r2
 8007bb6:	d82d      	bhi.n	8007c14 <__ssputs_r+0x70>
 8007bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007bc0:	d026      	beq.n	8007c10 <__ssputs_r+0x6c>
 8007bc2:	6965      	ldr	r5, [r4, #20]
 8007bc4:	6909      	ldr	r1, [r1, #16]
 8007bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bca:	eba3 0901 	sub.w	r9, r3, r1
 8007bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd2:	1c7b      	adds	r3, r7, #1
 8007bd4:	444b      	add	r3, r9
 8007bd6:	106d      	asrs	r5, r5, #1
 8007bd8:	429d      	cmp	r5, r3
 8007bda:	bf38      	it	cc
 8007bdc:	461d      	movcc	r5, r3
 8007bde:	0553      	lsls	r3, r2, #21
 8007be0:	d527      	bpl.n	8007c32 <__ssputs_r+0x8e>
 8007be2:	4629      	mov	r1, r5
 8007be4:	f7ff ff52 	bl	8007a8c <_malloc_r>
 8007be8:	4606      	mov	r6, r0
 8007bea:	b360      	cbz	r0, 8007c46 <__ssputs_r+0xa2>
 8007bec:	6921      	ldr	r1, [r4, #16]
 8007bee:	464a      	mov	r2, r9
 8007bf0:	f000 fae8 	bl	80081c4 <memcpy>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	6126      	str	r6, [r4, #16]
 8007c02:	6165      	str	r5, [r4, #20]
 8007c04:	444e      	add	r6, r9
 8007c06:	eba5 0509 	sub.w	r5, r5, r9
 8007c0a:	6026      	str	r6, [r4, #0]
 8007c0c:	60a5      	str	r5, [r4, #8]
 8007c0e:	463e      	mov	r6, r7
 8007c10:	42be      	cmp	r6, r7
 8007c12:	d900      	bls.n	8007c16 <__ssputs_r+0x72>
 8007c14:	463e      	mov	r6, r7
 8007c16:	6820      	ldr	r0, [r4, #0]
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	f000 faa8 	bl	8008170 <memmove>
 8007c20:	68a3      	ldr	r3, [r4, #8]
 8007c22:	1b9b      	subs	r3, r3, r6
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	4433      	add	r3, r6
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c32:	462a      	mov	r2, r5
 8007c34:	f000 fad4 	bl	80081e0 <_realloc_r>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d1e0      	bne.n	8007c00 <__ssputs_r+0x5c>
 8007c3e:	6921      	ldr	r1, [r4, #16]
 8007c40:	4650      	mov	r0, sl
 8007c42:	f7ff feb7 	bl	80079b4 <_free_r>
 8007c46:	230c      	movs	r3, #12
 8007c48:	f8ca 3000 	str.w	r3, [sl]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e7e9      	b.n	8007c2e <__ssputs_r+0x8a>
	...

08007c5c <_svfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	4698      	mov	r8, r3
 8007c62:	898b      	ldrh	r3, [r1, #12]
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	b09d      	sub	sp, #116	@ 0x74
 8007c68:	4607      	mov	r7, r0
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	d510      	bpl.n	8007c92 <_svfiprintf_r+0x36>
 8007c70:	690b      	ldr	r3, [r1, #16]
 8007c72:	b973      	cbnz	r3, 8007c92 <_svfiprintf_r+0x36>
 8007c74:	2140      	movs	r1, #64	@ 0x40
 8007c76:	f7ff ff09 	bl	8007a8c <_malloc_r>
 8007c7a:	6028      	str	r0, [r5, #0]
 8007c7c:	6128      	str	r0, [r5, #16]
 8007c7e:	b930      	cbnz	r0, 8007c8e <_svfiprintf_r+0x32>
 8007c80:	230c      	movs	r3, #12
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	b01d      	add	sp, #116	@ 0x74
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	2340      	movs	r3, #64	@ 0x40
 8007c90:	616b      	str	r3, [r5, #20]
 8007c92:	2300      	movs	r3, #0
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	2320      	movs	r3, #32
 8007c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca0:	2330      	movs	r3, #48	@ 0x30
 8007ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e40 <_svfiprintf_r+0x1e4>
 8007ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007caa:	f04f 0901 	mov.w	r9, #1
 8007cae:	4623      	mov	r3, r4
 8007cb0:	469a      	mov	sl, r3
 8007cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb6:	b10a      	cbz	r2, 8007cbc <_svfiprintf_r+0x60>
 8007cb8:	2a25      	cmp	r2, #37	@ 0x25
 8007cba:	d1f9      	bne.n	8007cb0 <_svfiprintf_r+0x54>
 8007cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8007cc0:	d00b      	beq.n	8007cda <_svfiprintf_r+0x7e>
 8007cc2:	465b      	mov	r3, fp
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ff6b 	bl	8007ba4 <__ssputs_r>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f000 80a7 	beq.w	8007e22 <_svfiprintf_r+0x1c6>
 8007cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cd6:	445a      	add	r2, fp
 8007cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cda:	f89a 3000 	ldrb.w	r3, [sl]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 809f 	beq.w	8007e22 <_svfiprintf_r+0x1c6>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cee:	f10a 0a01 	add.w	sl, sl, #1
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	9307      	str	r3, [sp, #28]
 8007cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cfc:	4654      	mov	r4, sl
 8007cfe:	2205      	movs	r2, #5
 8007d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d04:	484e      	ldr	r0, [pc, #312]	@ (8007e40 <_svfiprintf_r+0x1e4>)
 8007d06:	f7f8 facb 	bl	80002a0 <memchr>
 8007d0a:	9a04      	ldr	r2, [sp, #16]
 8007d0c:	b9d8      	cbnz	r0, 8007d46 <_svfiprintf_r+0xea>
 8007d0e:	06d0      	lsls	r0, r2, #27
 8007d10:	bf44      	itt	mi
 8007d12:	2320      	movmi	r3, #32
 8007d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d18:	0711      	lsls	r1, r2, #28
 8007d1a:	bf44      	itt	mi
 8007d1c:	232b      	movmi	r3, #43	@ 0x2b
 8007d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d22:	f89a 3000 	ldrb.w	r3, [sl]
 8007d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d28:	d015      	beq.n	8007d56 <_svfiprintf_r+0xfa>
 8007d2a:	9a07      	ldr	r2, [sp, #28]
 8007d2c:	4654      	mov	r4, sl
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f04f 0c0a 	mov.w	ip, #10
 8007d34:	4621      	mov	r1, r4
 8007d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3a:	3b30      	subs	r3, #48	@ 0x30
 8007d3c:	2b09      	cmp	r3, #9
 8007d3e:	d94b      	bls.n	8007dd8 <_svfiprintf_r+0x17c>
 8007d40:	b1b0      	cbz	r0, 8007d70 <_svfiprintf_r+0x114>
 8007d42:	9207      	str	r2, [sp, #28]
 8007d44:	e014      	b.n	8007d70 <_svfiprintf_r+0x114>
 8007d46:	eba0 0308 	sub.w	r3, r0, r8
 8007d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	46a2      	mov	sl, r4
 8007d54:	e7d2      	b.n	8007cfc <_svfiprintf_r+0xa0>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	1d19      	adds	r1, r3, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	9103      	str	r1, [sp, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfbb      	ittet	lt
 8007d62:	425b      	neglt	r3, r3
 8007d64:	f042 0202 	orrlt.w	r2, r2, #2
 8007d68:	9307      	strge	r3, [sp, #28]
 8007d6a:	9307      	strlt	r3, [sp, #28]
 8007d6c:	bfb8      	it	lt
 8007d6e:	9204      	strlt	r2, [sp, #16]
 8007d70:	7823      	ldrb	r3, [r4, #0]
 8007d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d74:	d10a      	bne.n	8007d8c <_svfiprintf_r+0x130>
 8007d76:	7863      	ldrb	r3, [r4, #1]
 8007d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d7a:	d132      	bne.n	8007de2 <_svfiprintf_r+0x186>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	9203      	str	r2, [sp, #12]
 8007d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d88:	3402      	adds	r4, #2
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e50 <_svfiprintf_r+0x1f4>
 8007d90:	7821      	ldrb	r1, [r4, #0]
 8007d92:	2203      	movs	r2, #3
 8007d94:	4650      	mov	r0, sl
 8007d96:	f7f8 fa83 	bl	80002a0 <memchr>
 8007d9a:	b138      	cbz	r0, 8007dac <_svfiprintf_r+0x150>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	eba0 000a 	sub.w	r0, r0, sl
 8007da2:	2240      	movs	r2, #64	@ 0x40
 8007da4:	4082      	lsls	r2, r0
 8007da6:	4313      	orrs	r3, r2
 8007da8:	3401      	adds	r4, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db0:	4824      	ldr	r0, [pc, #144]	@ (8007e44 <_svfiprintf_r+0x1e8>)
 8007db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007db6:	2206      	movs	r2, #6
 8007db8:	f7f8 fa72 	bl	80002a0 <memchr>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d036      	beq.n	8007e2e <_svfiprintf_r+0x1d2>
 8007dc0:	4b21      	ldr	r3, [pc, #132]	@ (8007e48 <_svfiprintf_r+0x1ec>)
 8007dc2:	bb1b      	cbnz	r3, 8007e0c <_svfiprintf_r+0x1b0>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	3307      	adds	r3, #7
 8007dc8:	f023 0307 	bic.w	r3, r3, #7
 8007dcc:	3308      	adds	r3, #8
 8007dce:	9303      	str	r3, [sp, #12]
 8007dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd2:	4433      	add	r3, r6
 8007dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd6:	e76a      	b.n	8007cae <_svfiprintf_r+0x52>
 8007dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ddc:	460c      	mov	r4, r1
 8007dde:	2001      	movs	r0, #1
 8007de0:	e7a8      	b.n	8007d34 <_svfiprintf_r+0xd8>
 8007de2:	2300      	movs	r3, #0
 8007de4:	3401      	adds	r4, #1
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	4619      	mov	r1, r3
 8007dea:	f04f 0c0a 	mov.w	ip, #10
 8007dee:	4620      	mov	r0, r4
 8007df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df4:	3a30      	subs	r2, #48	@ 0x30
 8007df6:	2a09      	cmp	r2, #9
 8007df8:	d903      	bls.n	8007e02 <_svfiprintf_r+0x1a6>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0c6      	beq.n	8007d8c <_svfiprintf_r+0x130>
 8007dfe:	9105      	str	r1, [sp, #20]
 8007e00:	e7c4      	b.n	8007d8c <_svfiprintf_r+0x130>
 8007e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e06:	4604      	mov	r4, r0
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e7f0      	b.n	8007dee <_svfiprintf_r+0x192>
 8007e0c:	ab03      	add	r3, sp, #12
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	462a      	mov	r2, r5
 8007e12:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <_svfiprintf_r+0x1f0>)
 8007e14:	a904      	add	r1, sp, #16
 8007e16:	4638      	mov	r0, r7
 8007e18:	f3af 8000 	nop.w
 8007e1c:	1c42      	adds	r2, r0, #1
 8007e1e:	4606      	mov	r6, r0
 8007e20:	d1d6      	bne.n	8007dd0 <_svfiprintf_r+0x174>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	065b      	lsls	r3, r3, #25
 8007e26:	f53f af2d 	bmi.w	8007c84 <_svfiprintf_r+0x28>
 8007e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e2c:	e72c      	b.n	8007c88 <_svfiprintf_r+0x2c>
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	462a      	mov	r2, r5
 8007e34:	4b05      	ldr	r3, [pc, #20]	@ (8007e4c <_svfiprintf_r+0x1f0>)
 8007e36:	a904      	add	r1, sp, #16
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f000 f879 	bl	8007f30 <_printf_i>
 8007e3e:	e7ed      	b.n	8007e1c <_svfiprintf_r+0x1c0>
 8007e40:	0801bf1c 	.word	0x0801bf1c
 8007e44:	0801bf26 	.word	0x0801bf26
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	08007ba5 	.word	0x08007ba5
 8007e50:	0801bf22 	.word	0x0801bf22

08007e54 <_printf_common>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	4616      	mov	r6, r2
 8007e5a:	4698      	mov	r8, r3
 8007e5c:	688a      	ldr	r2, [r1, #8]
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bfb8      	it	lt
 8007e68:	4613      	movlt	r3, r2
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e70:	4607      	mov	r7, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b10a      	cbz	r2, 8007e7a <_printf_common+0x26>
 8007e76:	3301      	adds	r3, #1
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	0699      	lsls	r1, r3, #26
 8007e7e:	bf42      	ittt	mi
 8007e80:	6833      	ldrmi	r3, [r6, #0]
 8007e82:	3302      	addmi	r3, #2
 8007e84:	6033      	strmi	r3, [r6, #0]
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	f015 0506 	ands.w	r5, r5, #6
 8007e8c:	d106      	bne.n	8007e9c <_printf_common+0x48>
 8007e8e:	f104 0a19 	add.w	sl, r4, #25
 8007e92:	68e3      	ldr	r3, [r4, #12]
 8007e94:	6832      	ldr	r2, [r6, #0]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	dc26      	bgt.n	8007eea <_printf_common+0x96>
 8007e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	3b00      	subs	r3, #0
 8007ea4:	bf18      	it	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	0692      	lsls	r2, r2, #26
 8007eaa:	d42b      	bmi.n	8007f04 <_printf_common+0xb0>
 8007eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c8      	blx	r9
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d01e      	beq.n	8007ef8 <_printf_common+0xa4>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	f003 0306 	and.w	r3, r3, #6
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	bf02      	ittt	eq
 8007ec6:	68e5      	ldreq	r5, [r4, #12]
 8007ec8:	6833      	ldreq	r3, [r6, #0]
 8007eca:	1aed      	subeq	r5, r5, r3
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	bf0c      	ite	eq
 8007ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed4:	2500      	movne	r5, #0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bfc4      	itt	gt
 8007eda:	1a9b      	subgt	r3, r3, r2
 8007edc:	18ed      	addgt	r5, r5, r3
 8007ede:	2600      	movs	r6, #0
 8007ee0:	341a      	adds	r4, #26
 8007ee2:	42b5      	cmp	r5, r6
 8007ee4:	d11a      	bne.n	8007f1c <_printf_common+0xc8>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e008      	b.n	8007efc <_printf_common+0xa8>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4652      	mov	r2, sl
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	47c8      	blx	r9
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d103      	bne.n	8007f00 <_printf_common+0xac>
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f00:	3501      	adds	r5, #1
 8007f02:	e7c6      	b.n	8007e92 <_printf_common+0x3e>
 8007f04:	18e1      	adds	r1, r4, r3
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	2030      	movs	r0, #48	@ 0x30
 8007f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f0e:	4422      	add	r2, r4
 8007f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f18:	3302      	adds	r3, #2
 8007f1a:	e7c7      	b.n	8007eac <_printf_common+0x58>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4641      	mov	r1, r8
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c8      	blx	r9
 8007f26:	3001      	adds	r0, #1
 8007f28:	d0e6      	beq.n	8007ef8 <_printf_common+0xa4>
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7d9      	b.n	8007ee2 <_printf_common+0x8e>
	...

08007f30 <_printf_i>:
 8007f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	7e0f      	ldrb	r7, [r1, #24]
 8007f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f38:	2f78      	cmp	r7, #120	@ 0x78
 8007f3a:	4691      	mov	r9, r2
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	469a      	mov	sl, r3
 8007f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f46:	d807      	bhi.n	8007f58 <_printf_i+0x28>
 8007f48:	2f62      	cmp	r7, #98	@ 0x62
 8007f4a:	d80a      	bhi.n	8007f62 <_printf_i+0x32>
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	f000 80d2 	beq.w	80080f6 <_printf_i+0x1c6>
 8007f52:	2f58      	cmp	r7, #88	@ 0x58
 8007f54:	f000 80b9 	beq.w	80080ca <_printf_i+0x19a>
 8007f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f60:	e03a      	b.n	8007fd8 <_printf_i+0xa8>
 8007f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f66:	2b15      	cmp	r3, #21
 8007f68:	d8f6      	bhi.n	8007f58 <_printf_i+0x28>
 8007f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f70 <_printf_i+0x40>)
 8007f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f70:	08007fc9 	.word	0x08007fc9
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007f59 	.word	0x08007f59
 8007f7c:	08007f59 	.word	0x08007f59
 8007f80:	08007f59 	.word	0x08007f59
 8007f84:	08007f59 	.word	0x08007f59
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f59 	.word	0x08007f59
 8007f90:	08007f59 	.word	0x08007f59
 8007f94:	08007f59 	.word	0x08007f59
 8007f98:	08007f59 	.word	0x08007f59
 8007f9c:	080080dd 	.word	0x080080dd
 8007fa0:	08008007 	.word	0x08008007
 8007fa4:	08008097 	.word	0x08008097
 8007fa8:	08007f59 	.word	0x08007f59
 8007fac:	08007f59 	.word	0x08007f59
 8007fb0:	080080ff 	.word	0x080080ff
 8007fb4:	08007f59 	.word	0x08007f59
 8007fb8:	08008007 	.word	0x08008007
 8007fbc:	08007f59 	.word	0x08007f59
 8007fc0:	08007f59 	.word	0x08007f59
 8007fc4:	0800809f 	.word	0x0800809f
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	1d1a      	adds	r2, r3, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6032      	str	r2, [r6, #0]
 8007fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e09d      	b.n	8008118 <_printf_i+0x1e8>
 8007fdc:	6833      	ldr	r3, [r6, #0]
 8007fde:	6820      	ldr	r0, [r4, #0]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	6031      	str	r1, [r6, #0]
 8007fe4:	0606      	lsls	r6, r0, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xbc>
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	e003      	b.n	8007ff4 <_printf_i+0xc4>
 8007fec:	0645      	lsls	r5, r0, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xb8>
 8007ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	da03      	bge.n	8008000 <_printf_i+0xd0>
 8007ff8:	232d      	movs	r3, #45	@ 0x2d
 8007ffa:	426d      	negs	r5, r5
 8007ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008000:	4859      	ldr	r0, [pc, #356]	@ (8008168 <_printf_i+0x238>)
 8008002:	230a      	movs	r3, #10
 8008004:	e011      	b.n	800802a <_printf_i+0xfa>
 8008006:	6821      	ldr	r1, [r4, #0]
 8008008:	6833      	ldr	r3, [r6, #0]
 800800a:	0608      	lsls	r0, r1, #24
 800800c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008010:	d402      	bmi.n	8008018 <_printf_i+0xe8>
 8008012:	0649      	lsls	r1, r1, #25
 8008014:	bf48      	it	mi
 8008016:	b2ad      	uxthmi	r5, r5
 8008018:	2f6f      	cmp	r7, #111	@ 0x6f
 800801a:	4853      	ldr	r0, [pc, #332]	@ (8008168 <_printf_i+0x238>)
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	bf14      	ite	ne
 8008020:	230a      	movne	r3, #10
 8008022:	2308      	moveq	r3, #8
 8008024:	2100      	movs	r1, #0
 8008026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800802a:	6866      	ldr	r6, [r4, #4]
 800802c:	60a6      	str	r6, [r4, #8]
 800802e:	2e00      	cmp	r6, #0
 8008030:	bfa2      	ittt	ge
 8008032:	6821      	ldrge	r1, [r4, #0]
 8008034:	f021 0104 	bicge.w	r1, r1, #4
 8008038:	6021      	strge	r1, [r4, #0]
 800803a:	b90d      	cbnz	r5, 8008040 <_printf_i+0x110>
 800803c:	2e00      	cmp	r6, #0
 800803e:	d04b      	beq.n	80080d8 <_printf_i+0x1a8>
 8008040:	4616      	mov	r6, r2
 8008042:	fbb5 f1f3 	udiv	r1, r5, r3
 8008046:	fb03 5711 	mls	r7, r3, r1, r5
 800804a:	5dc7      	ldrb	r7, [r0, r7]
 800804c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008050:	462f      	mov	r7, r5
 8008052:	42bb      	cmp	r3, r7
 8008054:	460d      	mov	r5, r1
 8008056:	d9f4      	bls.n	8008042 <_printf_i+0x112>
 8008058:	2b08      	cmp	r3, #8
 800805a:	d10b      	bne.n	8008074 <_printf_i+0x144>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	07df      	lsls	r7, r3, #31
 8008060:	d508      	bpl.n	8008074 <_printf_i+0x144>
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	6861      	ldr	r1, [r4, #4]
 8008066:	4299      	cmp	r1, r3
 8008068:	bfde      	ittt	le
 800806a:	2330      	movle	r3, #48	@ 0x30
 800806c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008074:	1b92      	subs	r2, r2, r6
 8008076:	6122      	str	r2, [r4, #16]
 8008078:	f8cd a000 	str.w	sl, [sp]
 800807c:	464b      	mov	r3, r9
 800807e:	aa03      	add	r2, sp, #12
 8008080:	4621      	mov	r1, r4
 8008082:	4640      	mov	r0, r8
 8008084:	f7ff fee6 	bl	8007e54 <_printf_common>
 8008088:	3001      	adds	r0, #1
 800808a:	d14a      	bne.n	8008122 <_printf_i+0x1f2>
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	b004      	add	sp, #16
 8008092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f043 0320 	orr.w	r3, r3, #32
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	4833      	ldr	r0, [pc, #204]	@ (800816c <_printf_i+0x23c>)
 80080a0:	2778      	movs	r7, #120	@ 0x78
 80080a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	6831      	ldr	r1, [r6, #0]
 80080aa:	061f      	lsls	r7, r3, #24
 80080ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80080b0:	d402      	bmi.n	80080b8 <_printf_i+0x188>
 80080b2:	065f      	lsls	r7, r3, #25
 80080b4:	bf48      	it	mi
 80080b6:	b2ad      	uxthmi	r5, r5
 80080b8:	6031      	str	r1, [r6, #0]
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	bf44      	itt	mi
 80080be:	f043 0320 	orrmi.w	r3, r3, #32
 80080c2:	6023      	strmi	r3, [r4, #0]
 80080c4:	b11d      	cbz	r5, 80080ce <_printf_i+0x19e>
 80080c6:	2310      	movs	r3, #16
 80080c8:	e7ac      	b.n	8008024 <_printf_i+0xf4>
 80080ca:	4827      	ldr	r0, [pc, #156]	@ (8008168 <_printf_i+0x238>)
 80080cc:	e7e9      	b.n	80080a2 <_printf_i+0x172>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	e7f6      	b.n	80080c6 <_printf_i+0x196>
 80080d8:	4616      	mov	r6, r2
 80080da:	e7bd      	b.n	8008058 <_printf_i+0x128>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	6825      	ldr	r5, [r4, #0]
 80080e0:	6961      	ldr	r1, [r4, #20]
 80080e2:	1d18      	adds	r0, r3, #4
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	062e      	lsls	r6, r5, #24
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	d501      	bpl.n	80080f0 <_printf_i+0x1c0>
 80080ec:	6019      	str	r1, [r3, #0]
 80080ee:	e002      	b.n	80080f6 <_printf_i+0x1c6>
 80080f0:	0668      	lsls	r0, r5, #25
 80080f2:	d5fb      	bpl.n	80080ec <_printf_i+0x1bc>
 80080f4:	8019      	strh	r1, [r3, #0]
 80080f6:	2300      	movs	r3, #0
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	4616      	mov	r6, r2
 80080fc:	e7bc      	b.n	8008078 <_printf_i+0x148>
 80080fe:	6833      	ldr	r3, [r6, #0]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	6032      	str	r2, [r6, #0]
 8008104:	681e      	ldr	r6, [r3, #0]
 8008106:	6862      	ldr	r2, [r4, #4]
 8008108:	2100      	movs	r1, #0
 800810a:	4630      	mov	r0, r6
 800810c:	f7f8 f8c8 	bl	80002a0 <memchr>
 8008110:	b108      	cbz	r0, 8008116 <_printf_i+0x1e6>
 8008112:	1b80      	subs	r0, r0, r6
 8008114:	6060      	str	r0, [r4, #4]
 8008116:	6863      	ldr	r3, [r4, #4]
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	2300      	movs	r3, #0
 800811c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008120:	e7aa      	b.n	8008078 <_printf_i+0x148>
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	4632      	mov	r2, r6
 8008126:	4649      	mov	r1, r9
 8008128:	4640      	mov	r0, r8
 800812a:	47d0      	blx	sl
 800812c:	3001      	adds	r0, #1
 800812e:	d0ad      	beq.n	800808c <_printf_i+0x15c>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	d413      	bmi.n	800815e <_printf_i+0x22e>
 8008136:	68e0      	ldr	r0, [r4, #12]
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	4298      	cmp	r0, r3
 800813c:	bfb8      	it	lt
 800813e:	4618      	movlt	r0, r3
 8008140:	e7a6      	b.n	8008090 <_printf_i+0x160>
 8008142:	2301      	movs	r3, #1
 8008144:	4632      	mov	r2, r6
 8008146:	4649      	mov	r1, r9
 8008148:	4640      	mov	r0, r8
 800814a:	47d0      	blx	sl
 800814c:	3001      	adds	r0, #1
 800814e:	d09d      	beq.n	800808c <_printf_i+0x15c>
 8008150:	3501      	adds	r5, #1
 8008152:	68e3      	ldr	r3, [r4, #12]
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	1a5b      	subs	r3, r3, r1
 8008158:	42ab      	cmp	r3, r5
 800815a:	dcf2      	bgt.n	8008142 <_printf_i+0x212>
 800815c:	e7eb      	b.n	8008136 <_printf_i+0x206>
 800815e:	2500      	movs	r5, #0
 8008160:	f104 0619 	add.w	r6, r4, #25
 8008164:	e7f5      	b.n	8008152 <_printf_i+0x222>
 8008166:	bf00      	nop
 8008168:	0801bf2d 	.word	0x0801bf2d
 800816c:	0801bf3e 	.word	0x0801bf3e

08008170 <memmove>:
 8008170:	4288      	cmp	r0, r1
 8008172:	b510      	push	{r4, lr}
 8008174:	eb01 0402 	add.w	r4, r1, r2
 8008178:	d902      	bls.n	8008180 <memmove+0x10>
 800817a:	4284      	cmp	r4, r0
 800817c:	4623      	mov	r3, r4
 800817e:	d807      	bhi.n	8008190 <memmove+0x20>
 8008180:	1e43      	subs	r3, r0, #1
 8008182:	42a1      	cmp	r1, r4
 8008184:	d008      	beq.n	8008198 <memmove+0x28>
 8008186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800818e:	e7f8      	b.n	8008182 <memmove+0x12>
 8008190:	4402      	add	r2, r0
 8008192:	4601      	mov	r1, r0
 8008194:	428a      	cmp	r2, r1
 8008196:	d100      	bne.n	800819a <memmove+0x2a>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800819e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081a2:	e7f7      	b.n	8008194 <memmove+0x24>

080081a4 <_sbrk_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d06      	ldr	r5, [pc, #24]	@ (80081c0 <_sbrk_r+0x1c>)
 80081a8:	2300      	movs	r3, #0
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	602b      	str	r3, [r5, #0]
 80081b0:	f7f9 fa08 	bl	80015c4 <_sbrk>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_sbrk_r+0x1a>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_sbrk_r+0x1a>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20004840 	.word	0x20004840

080081c4 <memcpy>:
 80081c4:	440a      	add	r2, r1
 80081c6:	4291      	cmp	r1, r2
 80081c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081cc:	d100      	bne.n	80081d0 <memcpy+0xc>
 80081ce:	4770      	bx	lr
 80081d0:	b510      	push	{r4, lr}
 80081d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081da:	4291      	cmp	r1, r2
 80081dc:	d1f9      	bne.n	80081d2 <memcpy+0xe>
 80081de:	bd10      	pop	{r4, pc}

080081e0 <_realloc_r>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	4680      	mov	r8, r0
 80081e6:	4615      	mov	r5, r2
 80081e8:	460c      	mov	r4, r1
 80081ea:	b921      	cbnz	r1, 80081f6 <_realloc_r+0x16>
 80081ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	4611      	mov	r1, r2
 80081f2:	f7ff bc4b 	b.w	8007a8c <_malloc_r>
 80081f6:	b92a      	cbnz	r2, 8008204 <_realloc_r+0x24>
 80081f8:	f7ff fbdc 	bl	80079b4 <_free_r>
 80081fc:	2400      	movs	r4, #0
 80081fe:	4620      	mov	r0, r4
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	f000 f81a 	bl	800823c <_malloc_usable_size_r>
 8008208:	4285      	cmp	r5, r0
 800820a:	4606      	mov	r6, r0
 800820c:	d802      	bhi.n	8008214 <_realloc_r+0x34>
 800820e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008212:	d8f4      	bhi.n	80081fe <_realloc_r+0x1e>
 8008214:	4629      	mov	r1, r5
 8008216:	4640      	mov	r0, r8
 8008218:	f7ff fc38 	bl	8007a8c <_malloc_r>
 800821c:	4607      	mov	r7, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0ec      	beq.n	80081fc <_realloc_r+0x1c>
 8008222:	42b5      	cmp	r5, r6
 8008224:	462a      	mov	r2, r5
 8008226:	4621      	mov	r1, r4
 8008228:	bf28      	it	cs
 800822a:	4632      	movcs	r2, r6
 800822c:	f7ff ffca 	bl	80081c4 <memcpy>
 8008230:	4621      	mov	r1, r4
 8008232:	4640      	mov	r0, r8
 8008234:	f7ff fbbe 	bl	80079b4 <_free_r>
 8008238:	463c      	mov	r4, r7
 800823a:	e7e0      	b.n	80081fe <_realloc_r+0x1e>

0800823c <_malloc_usable_size_r>:
 800823c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008240:	1f18      	subs	r0, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfbc      	itt	lt
 8008246:	580b      	ldrlt	r3, [r1, r0]
 8008248:	18c0      	addlt	r0, r0, r3
 800824a:	4770      	bx	lr

0800824c <sqrtf>:
 800824c:	b508      	push	{r3, lr}
 800824e:	ed2d 8b02 	vpush	{d8}
 8008252:	eeb0 8a40 	vmov.f32	s16, s0
 8008256:	f000 f817 	bl	8008288 <__ieee754_sqrtf>
 800825a:	eeb4 8a48 	vcmp.f32	s16, s16
 800825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008262:	d60c      	bvs.n	800827e <sqrtf+0x32>
 8008264:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008284 <sqrtf+0x38>
 8008268:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	d505      	bpl.n	800827e <sqrtf+0x32>
 8008272:	f7ff fb73 	bl	800795c <__errno>
 8008276:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800827a:	2321      	movs	r3, #33	@ 0x21
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	ecbd 8b02 	vpop	{d8}
 8008282:	bd08      	pop	{r3, pc}
 8008284:	00000000 	.word	0x00000000

08008288 <__ieee754_sqrtf>:
 8008288:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800828c:	4770      	bx	lr
	...

08008290 <_init>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	bf00      	nop
 8008294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008296:	bc08      	pop	{r3}
 8008298:	469e      	mov	lr, r3
 800829a:	4770      	bx	lr

0800829c <_fini>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr
