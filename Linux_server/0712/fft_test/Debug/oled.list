
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134ec  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019148  08019148  0001b010  2**0
                  CONTENTS
  4 .ARM          00000008  08019148  08019148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019150  08019150  0001b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019150  08019150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019154  08019154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08019158  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045fc  20000010  08019168  0001b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000460c  08019168  0001b60c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003909e  00000000  00000000  0001b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e03  00000000  00000000  000540de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003930  00000000  00000000  00057ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a87  00000000  00000000  0005b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001952c  00000000  00000000  0005e29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021120  00000000  00000000  000777cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9506  00000000  00000000  000988eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00141df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000faf0  00000000  00000000  00141ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00151994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  001519f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0015448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c44 	.word	0x08005c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005c44 	.word	0x08005c44

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b96a 	b.w	8000584 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9d08      	ldr	r5, [sp, #32]
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14e      	bne.n	8000372 <__udivmoddi4+0xaa>
 80002d4:	4694      	mov	ip, r2
 80002d6:	458c      	cmp	ip, r1
 80002d8:	4686      	mov	lr, r0
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	d962      	bls.n	80003a6 <__udivmoddi4+0xde>
 80002e0:	b14a      	cbz	r2, 80002f6 <__udivmoddi4+0x2e>
 80002e2:	f1c2 0320 	rsb	r3, r2, #32
 80002e6:	4091      	lsls	r1, r2
 80002e8:	fa20 f303 	lsr.w	r3, r0, r3
 80002ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f0:	4319      	orrs	r1, r3
 80002f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f f68c 	uxth.w	r6, ip
 80002fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb07 1114 	mls	r1, r7, r4, r1
 800030a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030e:	fb04 f106 	mul.w	r1, r4, r6
 8000312:	4299      	cmp	r1, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x64>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f104 30ff 	add.w	r0, r4, #4294967295
 800031e:	f080 8112 	bcs.w	8000546 <__udivmoddi4+0x27e>
 8000322:	4299      	cmp	r1, r3
 8000324:	f240 810f 	bls.w	8000546 <__udivmoddi4+0x27e>
 8000328:	3c02      	subs	r4, #2
 800032a:	4463      	add	r3, ip
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb1 f0f7 	udiv	r0, r1, r7
 8000336:	fb07 1110 	mls	r1, r7, r0, r1
 800033a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033e:	fb00 f606 	mul.w	r6, r0, r6
 8000342:	429e      	cmp	r6, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x94>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 31ff 	add.w	r1, r0, #4294967295
 800034e:	f080 80fc 	bcs.w	800054a <__udivmoddi4+0x282>
 8000352:	429e      	cmp	r6, r3
 8000354:	f240 80f9 	bls.w	800054a <__udivmoddi4+0x282>
 8000358:	4463      	add	r3, ip
 800035a:	3802      	subs	r0, #2
 800035c:	1b9b      	subs	r3, r3, r6
 800035e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000362:	2100      	movs	r1, #0
 8000364:	b11d      	cbz	r5, 800036e <__udivmoddi4+0xa6>
 8000366:	40d3      	lsrs	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	e9c5 3200 	strd	r3, r2, [r5]
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d905      	bls.n	8000382 <__udivmoddi4+0xba>
 8000376:	b10d      	cbz	r5, 800037c <__udivmoddi4+0xb4>
 8000378:	e9c5 0100 	strd	r0, r1, [r5]
 800037c:	2100      	movs	r1, #0
 800037e:	4608      	mov	r0, r1
 8000380:	e7f5      	b.n	800036e <__udivmoddi4+0xa6>
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d146      	bne.n	8000418 <__udivmoddi4+0x150>
 800038a:	42a3      	cmp	r3, r4
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xcc>
 800038e:	4290      	cmp	r0, r2
 8000390:	f0c0 80f0 	bcc.w	8000574 <__udivmoddi4+0x2ac>
 8000394:	1a86      	subs	r6, r0, r2
 8000396:	eb64 0303 	sbc.w	r3, r4, r3
 800039a:	2001      	movs	r0, #1
 800039c:	2d00      	cmp	r5, #0
 800039e:	d0e6      	beq.n	800036e <__udivmoddi4+0xa6>
 80003a0:	e9c5 6300 	strd	r6, r3, [r5]
 80003a4:	e7e3      	b.n	800036e <__udivmoddi4+0xa6>
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	f040 8090 	bne.w	80004cc <__udivmoddi4+0x204>
 80003ac:	eba1 040c 	sub.w	r4, r1, ip
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80003be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003c2:	fb08 4416 	mls	r4, r8, r6, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb07 f006 	mul.w	r0, r7, r6
 80003ce:	4298      	cmp	r0, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x11c>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x11a>
 80003dc:	4298      	cmp	r0, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2b4>
 80003e2:	4626      	mov	r6, r4
 80003e4:	1a1c      	subs	r4, r3, r0
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ee:	fb08 4410 	mls	r4, r8, r0, r4
 80003f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f6:	fb00 f707 	mul.w	r7, r0, r7
 80003fa:	429f      	cmp	r7, r3
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x148>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 34ff 	add.w	r4, r0, #4294967295
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x146>
 8000408:	429f      	cmp	r7, r3
 800040a:	f200 80b0 	bhi.w	800056e <__udivmoddi4+0x2a6>
 800040e:	4620      	mov	r0, r4
 8000410:	1bdb      	subs	r3, r3, r7
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	e7a5      	b.n	8000364 <__udivmoddi4+0x9c>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 f706 	lsr.w	r7, r2, r6
 8000422:	431f      	orrs	r7, r3
 8000424:	fa20 fc06 	lsr.w	ip, r0, r6
 8000428:	fa04 f301 	lsl.w	r3, r4, r1
 800042c:	ea43 030c 	orr.w	r3, r3, ip
 8000430:	40f4      	lsrs	r4, r6
 8000432:	fa00 f801 	lsl.w	r8, r0, r1
 8000436:	0c38      	lsrs	r0, r7, #16
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb4 fef0 	udiv	lr, r4, r0
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fb00 441e 	mls	r4, r0, lr, r4
 8000448:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a1      	cmp	r9, r4
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	d90a      	bls.n	800046e <__udivmoddi4+0x1a6>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045e:	f080 8084 	bcs.w	800056a <__udivmoddi4+0x2a2>
 8000462:	45a1      	cmp	r9, r4
 8000464:	f240 8081 	bls.w	800056a <__udivmoddi4+0x2a2>
 8000468:	f1ae 0e02 	sub.w	lr, lr, #2
 800046c:	443c      	add	r4, r7
 800046e:	eba4 0409 	sub.w	r4, r4, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	45a4      	cmp	ip, r4
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1d2>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	d267      	bcs.n	8000562 <__udivmoddi4+0x29a>
 8000492:	45a4      	cmp	ip, r4
 8000494:	d965      	bls.n	8000562 <__udivmoddi4+0x29a>
 8000496:	3b02      	subs	r3, #2
 8000498:	443c      	add	r4, r7
 800049a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049e:	fba0 9302 	umull	r9, r3, r0, r2
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	429c      	cmp	r4, r3
 80004a8:	46ce      	mov	lr, r9
 80004aa:	469c      	mov	ip, r3
 80004ac:	d351      	bcc.n	8000552 <__udivmoddi4+0x28a>
 80004ae:	d04e      	beq.n	800054e <__udivmoddi4+0x286>
 80004b0:	b155      	cbz	r5, 80004c8 <__udivmoddi4+0x200>
 80004b2:	ebb8 030e 	subs.w	r3, r8, lr
 80004b6:	eb64 040c 	sbc.w	r4, r4, ip
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	431e      	orrs	r6, r3
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	e9c5 6400 	strd	r6, r4, [r5]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e750      	b.n	800036e <__udivmoddi4+0xa6>
 80004cc:	f1c2 0320 	rsb	r3, r2, #32
 80004d0:	fa20 f103 	lsr.w	r1, r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa24 f303 	lsr.w	r3, r4, r3
 80004dc:	4094      	lsls	r4, r2
 80004de:	430c      	orrs	r4, r1
 80004e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e8:	fa1f f78c 	uxth.w	r7, ip
 80004ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f0:	fb08 3110 	mls	r1, r8, r0, r3
 80004f4:	0c23      	lsrs	r3, r4, #16
 80004f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fa:	fb00 f107 	mul.w	r1, r0, r7
 80004fe:	4299      	cmp	r1, r3
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x24c>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 36ff 	add.w	r6, r0, #4294967295
 800050a:	d22c      	bcs.n	8000566 <__udivmoddi4+0x29e>
 800050c:	4299      	cmp	r1, r3
 800050e:	d92a      	bls.n	8000566 <__udivmoddi4+0x29e>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1a5b      	subs	r3, r3, r1
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb3 f1f8 	udiv	r1, r3, r8
 800051c:	fb08 3311 	mls	r3, r8, r1, r3
 8000520:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000524:	fb01 f307 	mul.w	r3, r1, r7
 8000528:	42a3      	cmp	r3, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x276>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f101 36ff 	add.w	r6, r1, #4294967295
 8000534:	d213      	bcs.n	800055e <__udivmoddi4+0x296>
 8000536:	42a3      	cmp	r3, r4
 8000538:	d911      	bls.n	800055e <__udivmoddi4+0x296>
 800053a:	3902      	subs	r1, #2
 800053c:	4464      	add	r4, ip
 800053e:	1ae4      	subs	r4, r4, r3
 8000540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000544:	e739      	b.n	80003ba <__udivmoddi4+0xf2>
 8000546:	4604      	mov	r4, r0
 8000548:	e6f0      	b.n	800032c <__udivmoddi4+0x64>
 800054a:	4608      	mov	r0, r1
 800054c:	e706      	b.n	800035c <__udivmoddi4+0x94>
 800054e:	45c8      	cmp	r8, r9
 8000550:	d2ae      	bcs.n	80004b0 <__udivmoddi4+0x1e8>
 8000552:	ebb9 0e02 	subs.w	lr, r9, r2
 8000556:	eb63 0c07 	sbc.w	ip, r3, r7
 800055a:	3801      	subs	r0, #1
 800055c:	e7a8      	b.n	80004b0 <__udivmoddi4+0x1e8>
 800055e:	4631      	mov	r1, r6
 8000560:	e7ed      	b.n	800053e <__udivmoddi4+0x276>
 8000562:	4603      	mov	r3, r0
 8000564:	e799      	b.n	800049a <__udivmoddi4+0x1d2>
 8000566:	4630      	mov	r0, r6
 8000568:	e7d4      	b.n	8000514 <__udivmoddi4+0x24c>
 800056a:	46d6      	mov	lr, sl
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1a6>
 800056e:	4463      	add	r3, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74d      	b.n	8000410 <__udivmoddi4+0x148>
 8000574:	4606      	mov	r6, r0
 8000576:	4623      	mov	r3, r4
 8000578:	4608      	mov	r0, r1
 800057a:	e70f      	b.n	800039c <__udivmoddi4+0xd4>
 800057c:	3e02      	subs	r6, #2
 800057e:	4463      	add	r3, ip
 8000580:	e730      	b.n	80003e4 <__udivmoddi4+0x11c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_TIM_PeriodElapsedCallback>:
#define SamplingRate 40000
uint16_t adValue[SamplesFft];
float32_t input[SamplesFft];
float32_t output[SamplesFft];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *hTim) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	if (doConvert > 0)
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d004      	beq.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		doConvert--;
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3b01      	subs	r3, #1
 800059e:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	f5ad 5d91 	sub.w	sp, sp, #4640	@ 0x1220
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f001 fd77 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f941 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fa9b 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ca:	f000 fa79 	bl	8000ac0 <MX_DMA_Init>
  MX_SPI1_Init();
 80005ce:	f000 f9f5 	bl	80009bc <MX_SPI1_Init>
  MX_ADC1_Init();
 80005d2:	f000 f9a1 	bl	8000918 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d6:	f000 fa27 	bl	8000a28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	uint16_t adcValue[SamplesFft];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcValue, SamplesFft);
 80005da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80005de:	3b10      	subs	r3, #16
 80005e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005e4:	4619      	mov	r1, r3
 80005e6:	488f      	ldr	r0, [pc, #572]	@ (8000824 <main+0x270>)
 80005e8:	f001 fe3c 	bl	8002264 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80005ec:	488e      	ldr	r0, [pc, #568]	@ (8000828 <main+0x274>)
 80005ee:	f003 ff33 	bl	8004458 <HAL_TIM_Base_Start_IT>
	//setup ssd1306
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 80005f2:	4b8e      	ldr	r3, [pc, #568]	@ (800082c <main+0x278>)
 80005f4:	4a8e      	ldr	r2, [pc, #568]	@ (8000830 <main+0x27c>)
 80005f6:	498f      	ldr	r1, [pc, #572]	@ (8000834 <main+0x280>)
 80005f8:	488f      	ldr	r0, [pc, #572]	@ (8000838 <main+0x284>)
 80005fa:	f000 fd8d 	bl	8001118 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);
	//init ssd1306
	u8g2_InitDisplay(&u8g2);
 80005fe:	488e      	ldr	r0, [pc, #568]	@ (8000838 <main+0x284>)
 8000600:	f001 fc8e 	bl	8001f20 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	488c      	ldr	r0, [pc, #560]	@ (8000838 <main+0x284>)
 8000608:	f001 fc99 	bl	8001f3e <u8x8_SetPowerSave>
//
  u8g2_ClearBuffer(&u8g2);
 800060c:	488a      	ldr	r0, [pc, #552]	@ (8000838 <main+0x284>)
 800060e:	f000 fcf1 	bl	8000ff4 <u8g2_ClearBuffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	u8g2_SetDrawColor(&u8g2, 1);
 8000612:	2101      	movs	r1, #1
 8000614:	4888      	ldr	r0, [pc, #544]	@ (8000838 <main+0x284>)
 8000616:	f000 fef0 	bl	80013fa <u8g2_SetDrawColor>
	//initialize FFT
	arm_rfft_fast_instance_f32 fftInstance;
	arm_rfft_fast_init_f32(&fftInstance, SamplesFft);
 800061a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800061e:	3b08      	subs	r3, #8
 8000620:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fb01 	bl	8004c2c <arm_rfft_fast_init_f32>
	while (1) {
			if (doConvert==0){
 800062a:	4b84      	ldr	r3, [pc, #528]	@ (800083c <main+0x288>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1fb      	bne.n	800062a <main+0x76>
			doConvert = 128;
 8000632:	4b82      	ldr	r3, [pc, #520]	@ (800083c <main+0x288>)
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	601a      	str	r2, [r3, #0]
			//date move
			for(int i=0; i<SamplesFft; i++){
 8000638:	2300      	movs	r3, #0
 800063a:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800063e:	f102 0204 	add.w	r2, r2, #4
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e024      	b.n	8000690 <main+0xdc>
				input[i] =(float32_t)adcValue[i];
 8000646:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800064a:	461a      	mov	r2, r3
 800064c:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000650:	f103 0304 	add.w	r3, r3, #4
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800065e:	ee07 3a90 	vmov	s15, r3
 8000662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000666:	4a76      	ldr	r2, [pc, #472]	@ (8000840 <main+0x28c>)
 8000668:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800066c:	f103 0304 	add.w	r3, r3, #4
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0; i<SamplesFft; i++){
 800067a:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800067e:	f103 0304 	add.w	r3, r3, #4
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800068a:	f102 0204 	add.w	r2, r2, #4
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000694:	f103 0304 	add.w	r3, r3, #4
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800069e:	dbd2      	blt.n	8000646 <main+0x92>
			}
			//cal fft
			arm_rfft_fast_f32(&fftInstance,input,output,0);
 80006a0:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 80006a4:	3808      	subs	r0, #8
 80006a6:	2300      	movs	r3, #0
 80006a8:	4a66      	ldr	r2, [pc, #408]	@ (8000844 <main+0x290>)
 80006aa:	4965      	ldr	r1, [pc, #404]	@ (8000840 <main+0x28c>)
 80006ac:	f004 fb40 	bl	8004d30 <arm_rfft_fast_f32>
			//align data
			uint32_t showData[128] = {0, };
 80006b0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006b4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80006b8:	4618      	mov	r0, r3
 80006ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f005 fa93 	bl	8005bec <memset>
			for(int i =0; i<128; i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e04a      	b.n	8000766 <main+0x1b2>
				for(int j =0; j<8; j++){
 80006d0:	2300      	movs	r3, #0
 80006d2:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 80006d6:	f102 021c 	add.w	r2, r2, #28
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e035      	b.n	800074a <main+0x196>
					showData[i] += output[i*8+j];
 80006de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80006e2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80006e6:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006f8:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	00da      	lsls	r2, r3, #3
 8000700:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000704:	f103 031c 	add.w	r3, r3, #28
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	4a4d      	ldr	r2, [pc, #308]	@ (8000844 <main+0x290>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	edd3 7a00 	vldr	s15, [r3]
 8000716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071e:	ee17 1a90 	vmov	r1, s15
 8000722:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000726:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800072a:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j =0; j<8; j++){
 8000734:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000738:	f103 031c 	add.w	r3, r3, #28
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 8000744:	f102 021c 	add.w	r2, r2, #28
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 800074e:	f103 031c 	add.w	r3, r3, #28
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b07      	cmp	r3, #7
 8000756:	ddc2      	ble.n	80006de <main+0x12a>
			for(int i =0; i<128; i++){
 8000758:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b7f      	cmp	r3, #127	@ 0x7f
 800076e:	ddaf      	ble.n	80006d0 <main+0x11c>
				}
				showData[i]/64;
			}
			//show display
			u8g2_ClearBuffer(&u8g2);
 8000770:	4831      	ldr	r0, [pc, #196]	@ (8000838 <main+0x284>)
 8000772:	f000 fc3f 	bl	8000ff4 <u8g2_ClearBuffer>
			for (int x = 2; x < 128; x++) {
 8000776:	2302      	movs	r3, #2
 8000778:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 800077c:	f102 0218 	add.w	r2, r2, #24
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	e044      	b.n	800080e <main+0x25a>
				if(showData[x] > 63) showData[x] = 63;
 8000784:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000788:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800078c:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 8000790:	f102 0218 	add.w	r2, r2, #24
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800079a:	2b3f      	cmp	r3, #63	@ 0x3f
 800079c:	d90b      	bls.n	80007b6 <main+0x202>
 800079e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007a2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80007a6:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 80007aa:	f102 0218 	add.w	r2, r2, #24
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	213f      	movs	r1, #63	@ 0x3f
 80007b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				u8g2_DrawLine(&u8g2, x,63,x, 64-showData[x]);
 80007b6:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 80007ba:	f103 0318 	add.w	r3, r3, #24
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	b299      	uxth	r1, r3
 80007c2:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 80007c6:	f103 0318 	add.w	r3, r3, #24
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	b298      	uxth	r0, r3
 80007ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80007d2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80007d6:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 80007da:	f102 0218 	add.w	r2, r2, #24
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	4603      	mov	r3, r0
 80007f0:	223f      	movs	r2, #63	@ 0x3f
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <main+0x284>)
 80007f4:	f000 fe76 	bl	80014e4 <u8g2_DrawLine>
			for (int x = 2; x < 128; x++) {
 80007f8:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 80007fc:	f103 0318 	add.w	r3, r3, #24
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 8000808:	f102 0218 	add.w	r2, r2, #24
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000812:	f103 0318 	add.w	r3, r3, #24
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b7f      	cmp	r3, #127	@ 0x7f
 800081a:	ddb3      	ble.n	8000784 <main+0x1d0>
			}
			u8g2_SendBuffer(&u8g2);
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <main+0x284>)
 800081e:	f000 fc5c 	bl	80010da <u8g2_SendBuffer>
			if (doConvert==0){
 8000822:	e702      	b.n	800062a <main+0x76>
 8000824:	2000002c 	.word	0x2000002c
 8000828:	2000012c 	.word	0x2000012c
 800082c:	08000e3d 	.word	0x08000e3d
 8000830:	08000f31 	.word	0x08000f31
 8000834:	08005c6c 	.word	0x08005c6c
 8000838:	20000174 	.word	0x20000174
 800083c:	20000000 	.word	0x20000000
 8000840:	20000208 	.word	0x20000208
 8000844:	20002208 	.word	0x20002208

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 f9c8 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <SystemClock_Config+0xc8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a26      	ldr	r2, [pc, #152]	@ (8000910 <SystemClock_Config+0xc8>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <SystemClock_Config+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <SystemClock_Config+0xcc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a20      	ldr	r2, [pc, #128]	@ (8000914 <SystemClock_Config+0xcc>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2310      	movs	r3, #16
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b8:	2308      	movs	r3, #8
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fea7 	bl	8003620 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f946 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2103      	movs	r1, #3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f909 	bl	8003b10 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000904:	f000 f930 	bl	8000b68 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	@ 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800092a:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800092c:	4a22      	ldr	r2, [pc, #136]	@ (80009b8 <MX_ADC1_Init+0xa0>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000930:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000932:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000936:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000938:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000944:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000946:	2200      	movs	r2, #0
 8000948:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800095c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800096a:	2201      	movs	r2, #1
 800096c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 8000978:	2201      	movs	r2, #1
 800097a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800097e:	f001 fc2d 	bl	80021dc <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000988:	f000 f8ee 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_ADC1_Init+0x9c>)
 800099e:	f001 fd6f 	bl	8002480 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009a8:	f000 f8de 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000002c 	.word	0x2000002c
 80009b8:	40012000 	.word	0x40012000

080009bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009c2:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <MX_SPI1_Init+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009dc:	2202      	movs	r2, #2
 80009de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009f0:	2218      	movs	r2, #24
 80009f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_SPI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_SPI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_SPI1_Init+0x64>)
 8000a08:	220a      	movs	r2, #10
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_SPI1_Init+0x64>)
 8000a0e:	f003 fa2b 	bl	8003e68 <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a18:	f000 f8a6 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000d4 	.word	0x200000d4
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a4e:	2263      	movs	r2, #99	@ 0x63
 8000a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25-1;
 8000a58:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a6c:	f003 fca4 	bl	80043b8 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f877 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000a88:	f003 fe38 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f869 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a96:	2320      	movs	r3, #32
 8000a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_TIM2_Init+0x94>)
 8000aa4:	f004 f840 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000aae:	f000 f85b 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000012c 	.word	0x2000012c

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000ad0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2038      	movs	r0, #56	@ 0x38
 8000ae8:	f002 f855 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aec:	2038      	movs	r0, #56	@ 0x38
 8000aee:	f002 f86e 	bl	8002bce <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_GPIO_Init+0x60>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <MX_GPIO_Init+0x60>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_GPIO_Init+0x60>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000b36:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <MX_GPIO_Init+0x64>)
 8000b38:	f002 fd58 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RES_Pin;
 8000b3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0x64>)
 8000b54:	f002 fbc6 	bl	80032e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca0 <HAL_ADC_MspInit+0xdc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d157      	bne.n	8000c96 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481d      	ldr	r0, [pc, #116]	@ (8000ca8 <HAL_ADC_MspInit+0xe4>)
 8000c32:	f002 fb57 	bl	80032e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c38:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb0 <HAL_ADC_MspInit+0xec>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c7c:	f001 ffc2 	bl	8002c04 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c86:	f7ff ff6f 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	20000074 	.word	0x20000074
 8000cb0:	40026410 	.word	0x40026410

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_D0_Pin|OLED_D1_Pin;
 8000d0e:	23a0      	movs	r3, #160	@ 0xa0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f002 fadb 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d115      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_TIM_Base_MspInit+0x48>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	201c      	movs	r0, #28
 8000d78:	f001 ff0d 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d7c:	201c      	movs	r0, #28
 8000d7e:	f001 ff26 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f001 f9b5 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f003 fb91 	bl	800451c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000012c 	.word	0x2000012c

08000e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <DMA2_Stream0_IRQHandler+0x10>)
 8000e0a:	f002 f801 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000074 	.word	0x20000074

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi1;
//extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	72fb      	strb	r3, [r7, #11]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000e4e:	7afb      	ldrb	r3, [r7, #11]
 8000e50:	3b28      	subs	r3, #40	@ 0x28
 8000e52:	2b23      	cmp	r3, #35	@ 0x23
 8000e54:	d865      	bhi.n	8000f22 <u8x8_stm32_gpio_and_delay+0xe6>
 8000e56:	a201      	add	r2, pc, #4	@ (adr r2, 8000e5c <u8x8_stm32_gpio_and_delay+0x20>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000f23 	.word	0x08000f23
 8000e60:	08000eed 	.word	0x08000eed
 8000e64:	08000f23 	.word	0x08000f23
 8000e68:	08000f23 	.word	0x08000f23
 8000e6c:	08000f23 	.word	0x08000f23
 8000e70:	08000f23 	.word	0x08000f23
 8000e74:	08000f23 	.word	0x08000f23
 8000e78:	08000f23 	.word	0x08000f23
 8000e7c:	08000f23 	.word	0x08000f23
 8000e80:	08000f23 	.word	0x08000f23
 8000e84:	08000f23 	.word	0x08000f23
 8000e88:	08000f23 	.word	0x08000f23
 8000e8c:	08000f23 	.word	0x08000f23
 8000e90:	08000f23 	.word	0x08000f23
 8000e94:	08000f23 	.word	0x08000f23
 8000e98:	08000f23 	.word	0x08000f23
 8000e9c:	08000f23 	.word	0x08000f23
 8000ea0:	08000f23 	.word	0x08000f23
 8000ea4:	08000f23 	.word	0x08000f23
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000f23 	.word	0x08000f23
 8000eb0:	08000f23 	.word	0x08000f23
 8000eb4:	08000f23 	.word	0x08000f23
 8000eb8:	08000f23 	.word	0x08000f23
 8000ebc:	08000f23 	.word	0x08000f23
 8000ec0:	08000f23 	.word	0x08000f23
 8000ec4:	08000f23 	.word	0x08000f23
 8000ec8:	08000f23 	.word	0x08000f23
 8000ecc:	08000f23 	.word	0x08000f23
 8000ed0:	08000f23 	.word	0x08000f23
 8000ed4:	08000f23 	.word	0x08000f23
 8000ed8:	08000f23 	.word	0x08000f23
 8000edc:	08000f23 	.word	0x08000f23
 8000ee0:	08000ef7 	.word	0x08000ef7
 8000ee4:	08000f05 	.word	0x08000f05
 8000ee8:	08000f13 	.word	0x08000f13
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000eec:	7abb      	ldrb	r3, [r7, #10]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 f950 	bl	8002194 <HAL_Delay>
		break;
 8000ef4:	e015      	b.n	8000f22 <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000ef6:	7abb      	ldrb	r3, [r7, #10]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2110      	movs	r1, #16
 8000efc:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <u8x8_stm32_gpio_and_delay+0xf0>)
 8000efe:	f002 fb75 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000f02:	e00e      	b.n	8000f22 <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000f04:	7abb      	ldrb	r3, [r7, #10]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <u8x8_stm32_gpio_and_delay+0xf0>)
 8000f0c:	f002 fb6e 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000f10:	e007      	b.n	8000f22 <u8x8_stm32_gpio_and_delay+0xe6>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 8000f12:	7abb      	ldrb	r3, [r7, #10]
 8000f14:	461a      	mov	r2, r3
 8000f16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1a:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <u8x8_stm32_gpio_and_delay+0xf0>)
 8000f1c:	f002 fb66 	bl	80035ec <HAL_GPIO_WritePin>
		break;
 8000f20:	bf00      	nop
	}
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020000 	.word	0x40020000

08000f30 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	72fb      	strb	r3, [r7, #11]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000f42:	7afb      	ldrb	r3, [r7, #11]
 8000f44:	3b14      	subs	r3, #20
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d847      	bhi.n	8000fda <u8x8_byte_stm32_hw_spi+0xaa>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <u8x8_byte_stm32_hw_spi+0x20>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000fdf 	.word	0x08000fdf
 8000f54:	08000fdb 	.word	0x08000fdb
 8000f58:	08000fdb 	.word	0x08000fdb
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	08000fab 	.word	0x08000fab
 8000f64:	08000fc3 	.word	0x08000fc3
 8000f68:	08000fdb 	.word	0x08000fdb
 8000f6c:	08000fdb 	.word	0x08000fdb
 8000f70:	08000fdb 	.word	0x08000fdb
 8000f74:	08000fdb 	.word	0x08000fdb
 8000f78:	08000fdb 	.word	0x08000fdb
 8000f7c:	08000fdb 	.word	0x08000fdb
 8000f80:	08000f9d 	.word	0x08000f9d
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000f84:	7abb      	ldrb	r3, [r7, #10]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <u8x8_byte_stm32_hw_spi+0xc0>)
 8000f8e:	f002 fff4 	bl	8003f7a <HAL_SPI_Transmit>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <u8x8_byte_stm32_hw_spi+0xb2>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e024      	b.n	8000fe6 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	214a      	movs	r1, #74	@ 0x4a
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 ffeb 	bl	8001f7e <u8x8_gpio_call>
		break;
 8000fa8:	e01c      	b.n	8000fe4 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2149      	movs	r1, #73	@ 0x49
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 ffe2 	bl	8001f7e <u8x8_gpio_call>
		HAL_Delay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 f8ea 	bl	8002194 <HAL_Delay>
		break;
 8000fc0:	e010      	b.n	8000fe4 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f001 f8e6 	bl	8002194 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2149      	movs	r1, #73	@ 0x49
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 ffd3 	bl	8001f7e <u8x8_gpio_call>
		break;
 8000fd8:	e004      	b.n	8000fe4 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e003      	b.n	8000fe6 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8000fe2:	bf00      	nop
	}
	return 1;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000d4 	.word	0x200000d4

08000ff4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	7c1b      	ldrb	r3, [r3, #16]
 8001002:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fde2 	bl	8005bec <memset>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	7c1b      	ldrb	r3, [r3, #16]
 8001046:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001050:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	b29b      	uxth	r3, r3
 8001056:	89ba      	ldrh	r2, [r7, #12]
 8001058:	fb12 f303 	smulbb	r3, r2, r3
 800105c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800105e:	89bb      	ldrh	r3, [r7, #12]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800106c:	7bf9      	ldrb	r1, [r7, #15]
 800106e:	78ba      	ldrb	r2, [r7, #2]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	460b      	mov	r3, r1
 8001076:	2100      	movs	r1, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 ff20 	bl	8001ebe <u8x8_DrawTile>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001098:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80010a0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffbd 	bl	8001030 <u8g2_send_tile_row>
    src_row++;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	3301      	adds	r3, #1
 80010c0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d203      	bcs.n	80010d2 <u8g2_send_buffer+0x4c>
 80010ca:	7bba      	ldrb	r2, [r7, #14]
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3eb      	bcc.n	80010aa <u8g2_send_buffer+0x24>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffcf 	bl	8001086 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 ff39 	bl	8001f60 <u8x8_RefreshDisplay>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2208      	movs	r2, #8
 8001104:	701a      	strb	r2, [r3, #0]
  return buf;
 8001106:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	20004208 	.word	0x20004208

08001118 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800112e:	490c      	ldr	r1, [pc, #48]	@ (8001160 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 ff75 	bl	8002020 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001136:	f107 0313 	add.w	r3, r7, #19
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffdc 	bl	80010f8 <u8g2_m_16_8_f>
 8001140:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001142:	7cfa      	ldrb	r2, [r7, #19]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800114a:	6979      	ldr	r1, [r7, #20]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fb22 	bl	8001796 <u8g2_SetupBuffer>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	08001be1 	.word	0x08001be1
 8001160:	08001db9 	.word	0x08001db9
 8001164:	08001619 	.word	0x08001619

08001168 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <u8g2_SetFontPosBaseline+0x1c>)
 800118c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	08001169 	.word	0x08001169

080011a0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	460b      	mov	r3, r1
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	8abb      	ldrh	r3, [r7, #20]
 80011c6:	4413      	add	r3, r2
 80011c8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80011ca:	8afa      	ldrh	r2, [r7, #22]
 80011cc:	8abb      	ldrh	r3, [r7, #20]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d90b      	bls.n	80011ea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80011d2:	8afa      	ldrh	r2, [r7, #22]
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d205      	bcs.n	80011e6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	82bb      	strh	r3, [r7, #20]
      b--;
 80011de:	8abb      	ldrh	r3, [r7, #20]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	82bb      	strh	r3, [r7, #20]
 80011e4:	e001      	b.n	80011ea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80011ea:	8afa      	ldrh	r2, [r7, #22]
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d301      	bcc.n	80011f6 <u8g2_clip_intersection2+0x56>
    return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e01c      	b.n	8001230 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80011f6:	8aba      	ldrh	r2, [r7, #20]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d801      	bhi.n	8001202 <u8g2_clip_intersection2+0x62>
    return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e016      	b.n	8001230 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001202:	8afa      	ldrh	r2, [r7, #22]
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	429a      	cmp	r2, r3
 8001208:	d201      	bcs.n	800120e <u8g2_clip_intersection2+0x6e>
    a = c;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800120e:	8aba      	ldrh	r2, [r7, #20]
 8001210:	88bb      	ldrh	r3, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	d901      	bls.n	800121a <u8g2_clip_intersection2+0x7a>
    b = d;
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8afa      	ldrh	r2, [r7, #22]
 800121e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001220:	8aba      	ldrh	r2, [r7, #20]
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	8aba      	ldrh	r2, [r7, #20]
 800122c:	801a      	strh	r2, [r3, #0]
  return 1;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	817b      	strh	r3, [r7, #10]
 800124e:	460b      	mov	r3, r1
 8001250:	813b      	strh	r3, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800125a:	893a      	ldrh	r2, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	893a      	ldrh	r2, [r7, #8]
 8001268:	8979      	ldrh	r1, [r7, #10]
 800126a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4603      	mov	r3, r0
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	47a0      	blx	r4
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}

0800127e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b087      	sub	sp, #28
 8001282:	af02      	add	r7, sp, #8
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4603      	mov	r3, r0
 800128e:	817b      	strh	r3, [r7, #10]
 8001290:	460b      	mov	r3, r1
 8001292:	813b      	strh	r3, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d075      	beq.n	800138e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d072      	beq.n	800138e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d91a      	bls.n	80012e4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80012ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d109      	bne.n	80012ca <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80012b6:	897a      	ldrh	r2, [r7, #10]
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	817b      	strh	r3, [r7, #10]
	  x++;
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	817b      	strh	r3, [r7, #10]
 80012c8:	e00c      	b.n	80012e4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80012ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d108      	bne.n	80012e4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80012d2:	893a      	ldrh	r2, [r7, #8]
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	813b      	strh	r3, [r7, #8]
	  y++;
 80012dc:	893b      	ldrh	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80012e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80012f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11a      	bne.n	800132e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d83b      	bhi.n	800137c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800130a:	893b      	ldrh	r3, [r7, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d937      	bls.n	8001380 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800131c:	1db9      	adds	r1, r7, #6
 800131e:	f107 000a 	add.w	r0, r7, #10
 8001322:	f7ff ff3d 	bl	80011a0 <u8g2_clip_intersection2>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11a      	bne.n	8001362 <u8g2_DrawHVLine+0xe4>
	  return;
 800132c:	e02f      	b.n	800138e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	429a      	cmp	r2, r3
 8001338:	d824      	bhi.n	8001384 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	429a      	cmp	r2, r3
 8001344:	d920      	bls.n	8001388 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001352:	1db9      	adds	r1, r7, #6
 8001354:	f107 0008 	add.w	r0, r7, #8
 8001358:	f7ff ff22 	bl	80011a0 <u8g2_clip_intersection2>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d014      	beq.n	800138c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	689c      	ldr	r4, [r3, #8]
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	893a      	ldrh	r2, [r7, #8]
 800136c:	88f8      	ldrh	r0, [r7, #6]
 800136e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	47a0      	blx	r4
 800137a:	e008      	b.n	800138e <u8g2_DrawHVLine+0x110>
	  return;
 800137c:	bf00      	nop
 800137e:	e006      	b.n	800138e <u8g2_DrawHVLine+0x110>
	  return;
 8001380:	bf00      	nop
 8001382:	e004      	b.n	800138e <u8g2_DrawHVLine+0x110>
	  return;
 8001384:	bf00      	nop
 8001386:	e002      	b.n	800138e <u8g2_DrawHVLine+0x110>
	  return;
 8001388:	bf00      	nop
 800138a:	e000      	b.n	800138e <u8g2_DrawHVLine+0x110>
	  return;
 800138c:	bf00      	nop
    }
}
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}

08001394 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80013aa:	883a      	ldrh	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d31a      	bcc.n	80013e6 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80013b6:	883a      	ldrh	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d216      	bcs.n	80013ea <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d312      	bcc.n	80013ee <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d20e      	bcs.n	80013f2 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80013d4:	883a      	ldrh	r2, [r7, #0]
 80013d6:	8879      	ldrh	r1, [r7, #2]
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff4d 	bl	800127e <u8g2_DrawHVLine>
 80013e4:	e006      	b.n	80013f4 <u8g2_DrawPixel+0x60>
    return;
 80013e6:	bf00      	nop
 80013e8:	e004      	b.n	80013f4 <u8g2_DrawPixel+0x60>
    return;
 80013ea:	bf00      	nop
 80013ec:	e002      	b.n	80013f4 <u8g2_DrawPixel+0x60>
    return;
 80013ee:	bf00      	nop
 80013f0:	e000      	b.n	80013f4 <u8g2_DrawPixel+0x60>
    return;
 80013f2:	bf00      	nop
}
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d903      	bls.n	800141c <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	4603      	mov	r3, r0
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20d      	bcs.n	800146a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800144e:	883a      	ldrh	r2, [r7, #0]
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	429a      	cmp	r2, r3
 8001454:	d901      	bls.n	800145a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001456:	2301      	movs	r3, #1
 8001458:	e014      	b.n	8001484 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d901      	bls.n	8001466 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001466:	2300      	movs	r3, #0
 8001468:	e00c      	b.n	8001484 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800146a:	883a      	ldrh	r2, [r7, #0]
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	429a      	cmp	r2, r3
 8001470:	d907      	bls.n	8001482 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	883b      	ldrh	r3, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d901      	bls.n	800147e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800147a:	2301      	movs	r3, #1
 800147c:	e002      	b.n	8001484 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001482:	2300      	movs	r3, #0
    }
  }
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bc90      	pop	{r4, r7}
 800148c:	4770      	bx	lr

0800148e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	4608      	mov	r0, r1
 8001498:	4611      	mov	r1, r2
 800149a:	461a      	mov	r2, r3
 800149c:	4603      	mov	r3, r0
 800149e:	817b      	strh	r3, [r7, #10]
 80014a0:	460b      	mov	r3, r1
 80014a2:	813b      	strh	r3, [r7, #8]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80014b4:	8b3b      	ldrh	r3, [r7, #24]
 80014b6:	893a      	ldrh	r2, [r7, #8]
 80014b8:	f7ff ffb6 	bl	8001428 <u8g2_is_intersection_decision_tree>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <u8g2_IsIntersection+0x38>
    return 0; 
 80014c2:	2300      	movs	r3, #0
 80014c4:	e00a      	b.n	80014dc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	897a      	ldrh	r2, [r7, #10]
 80014d6:	f7ff ffa7 	bl	8001428 <u8g2_is_intersection_decision_tree>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	817b      	strh	r3, [r7, #10]
 80014f6:	460b      	mov	r3, r1
 80014f8:	813b      	strh	r3, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8001502:	897a      	ldrh	r2, [r7, #10]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	429a      	cmp	r2, r3
 8001508:	d904      	bls.n	8001514 <u8g2_DrawLine+0x30>
 800150a:	897a      	ldrh	r2, [r7, #10]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	837b      	strh	r3, [r7, #26]
 8001512:	e003      	b.n	800151c <u8g2_DrawLine+0x38>
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001520:	429a      	cmp	r2, r3
 8001522:	d904      	bls.n	800152e <u8g2_DrawLine+0x4a>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	833b      	strh	r3, [r7, #24]
 800152c:	e003      	b.n	8001536 <u8g2_DrawLine+0x52>
 800152e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8001536:	8b3a      	ldrh	r2, [r7, #24]
 8001538:	8b7b      	ldrh	r3, [r7, #26]
 800153a:	429a      	cmp	r2, r3
 800153c:	d913      	bls.n	8001566 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 8001542:	8b7b      	ldrh	r3, [r7, #26]
 8001544:	823b      	strh	r3, [r7, #16]
 8001546:	8b3b      	ldrh	r3, [r7, #24]
 8001548:	837b      	strh	r3, [r7, #26]
 800154a:	8a3b      	ldrh	r3, [r7, #16]
 800154c:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	823b      	strh	r3, [r7, #16]
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	817b      	strh	r3, [r7, #10]
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	823b      	strh	r3, [r7, #16]
 800155e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	8a3b      	ldrh	r3, [r7, #16]
 8001564:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  if ( x1 > x2 ) 
 8001566:	897a      	ldrh	r2, [r7, #10]
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90b      	bls.n	8001586 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800156e:	897b      	ldrh	r3, [r7, #10]
 8001570:	823b      	strh	r3, [r7, #16]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	8a3b      	ldrh	r3, [r7, #16]
 8001578:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 800157a:	893b      	ldrh	r3, [r7, #8]
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001580:	813b      	strh	r3, [r7, #8]
 8001582:	8a3b      	ldrh	r3, [r7, #16]
 8001584:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  err = dx >> 1;
 8001586:	8b7b      	ldrh	r3, [r7, #26]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800158e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001590:	893b      	ldrh	r3, [r7, #8]
 8001592:	429a      	cmp	r2, r3
 8001594:	d902      	bls.n	800159c <u8g2_DrawLine+0xb8>
 8001596:	2301      	movs	r3, #1
 8001598:	82bb      	strh	r3, [r7, #20]
 800159a:	e002      	b.n	80015a2 <u8g2_DrawLine+0xbe>
 800159c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015a0:	82bb      	strh	r3, [r7, #20]
  y = y1;
 80015a2:	893b      	ldrh	r3, [r7, #8]
 80015a4:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d102      	bne.n	80015b6 <u8g2_DrawLine+0xd2>
    x2--;
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 80015b6:	897b      	ldrh	r3, [r7, #10]
 80015b8:	83fb      	strh	r3, [r7, #30]
 80015ba:	e024      	b.n	8001606 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 80015bc:	7cfb      	ldrb	r3, [r7, #19]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 80015c2:	8bba      	ldrh	r2, [r7, #28]
 80015c4:	8bfb      	ldrh	r3, [r7, #30]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fee3 	bl	8001394 <u8g2_DrawPixel>
 80015ce:	e005      	b.n	80015dc <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80015d0:	8bfa      	ldrh	r2, [r7, #30]
 80015d2:	8bbb      	ldrh	r3, [r7, #28]
 80015d4:	4619      	mov	r1, r3
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fedc 	bl	8001394 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 80015dc:	8afa      	ldrh	r2, [r7, #22]
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 80015e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	da08      	bge.n	8001600 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 80015ee:	8aba      	ldrh	r2, [r7, #20]
 80015f0:	8bbb      	ldrh	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 80015f6:	8afa      	ldrh	r2, [r7, #22]
 80015f8:	8b7b      	ldrh	r3, [r7, #26]
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	3301      	adds	r3, #1
 8001604:	83fb      	strh	r3, [r7, #30]
 8001606:	8bfa      	ldrh	r2, [r7, #30]
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	d9d6      	bls.n	80015bc <u8g2_DrawLine+0xd8>
    }
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4603      	mov	r3, r0
 8001628:	817b      	strh	r3, [r7, #10]
 800162a:	460b      	mov	r3, r1
 800162c:	813b      	strh	r3, [r7, #8]
 800162e:	4613      	mov	r3, r2
 8001630:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001632:	893b      	ldrh	r3, [r7, #8]
 8001634:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001642:	7e3a      	ldrb	r2, [r7, #24]
 8001644:	7efb      	ldrb	r3, [r7, #27]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800165a:	2b01      	cmp	r3, #1
 800165c:	d801      	bhi.n	8001662 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800165e:	7e3b      	ldrb	r3, [r7, #24]
 8001660:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001668:	2b01      	cmp	r3, #1
 800166a:	d001      	beq.n	8001670 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800166c:	7e3b      	ldrb	r3, [r7, #24]
 800166e:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001670:	893b      	ldrh	r3, [r7, #8]
 8001672:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001674:	8afb      	ldrh	r3, [r7, #22]
 8001676:	f023 0307 	bic.w	r3, r3, #7
 800167a:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	7c1b      	ldrb	r3, [r3, #16]
 8001682:	461a      	mov	r2, r3
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	fb13 f302 	smulbb	r3, r3, r2
 800168a:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001690:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001692:	8afb      	ldrh	r3, [r7, #22]
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80016a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d117      	bne.n	80016da <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	7ebb      	ldrb	r3, [r7, #26]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	7e7b      	ldrb	r3, [r7, #25]
 80016be:	4053      	eors	r3, r2
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
	len--;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e8      	bne.n	80016aa <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80016d8:	e038      	b.n	800174c <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	7ebb      	ldrb	r3, [r7, #26]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	7e7b      	ldrb	r3, [r7, #25]
 80016ee:	4053      	eors	r3, r2
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	3301      	adds	r3, #1
 80016fa:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80016fc:	7efb      	ldrb	r3, [r7, #27]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	76fb      	strb	r3, [r7, #27]
      len--;
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	3b01      	subs	r3, #1
 8001708:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800170a:	7efb      	ldrb	r3, [r7, #27]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d114      	bne.n	800173a <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001714:	461a      	mov	r2, r3
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001722:	2b01      	cmp	r3, #1
 8001724:	d801      	bhi.n	800172a <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001730:	2b01      	cmp	r3, #1
 8001732:	d008      	beq.n	8001746 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	767b      	strb	r3, [r7, #25]
 8001738:	e005      	b.n	8001746 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800173a:	7ebb      	ldrb	r3, [r7, #26]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001740:	7e7b      	ldrb	r3, [r7, #25]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1c6      	bne.n	80016da <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800174c:	bf00      	nop
 800174e:	3724      	adds	r7, #36	@ 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001776:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff ffa9 	bl	8001758 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fcba 	bl	8001180 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001830:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	89fa      	ldrh	r2, [r7, #14]
 800183c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	7c1b      	ldrb	r3, [r3, #16]
 8001842:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	89fa      	ldrh	r2, [r7, #14]
 800184e:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001856:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	89fa      	ldrh	r2, [r7, #14]
 8001862:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800186a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001874:	4413      	add	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	7c52      	ldrb	r2, [r2, #17]
 800187a:	4293      	cmp	r3, r2
 800187c:	dd07      	ble.n	800188e <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	7c5b      	ldrb	r3, [r3, #17]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	4413      	add	r3, r2
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	8a9a      	ldrh	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	8ada      	ldrh	r2, [r3, #22]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	4603      	mov	r3, r0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fdc4 	bl	800148e <u8g2_IsIntersection>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001914:	e03b      	b.n	800198e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800192a:	429a      	cmp	r2, r3
 800192c:	d205      	bcs.n	800193a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001946:	429a      	cmp	r2, r3
 8001948:	d905      	bls.n	8001956 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001962:	429a      	cmp	r2, r3
 8001964:	d205      	bcs.n	8001972 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800197e:	429a      	cmp	r2, r3
 8001980:	d905      	bls.n	800198e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff3c 	bl	800181c <u8g2_update_dimension_common>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff7b 	bl	80018dc <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af02      	add	r7, sp, #8
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	4608      	mov	r0, r1
 80019f8:	4611      	mov	r1, r2
 80019fa:	461a      	mov	r2, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	817b      	strh	r3, [r7, #10]
 8001a00:	460b      	mov	r3, r1
 8001a02:	813b      	strh	r3, [r7, #8]
 8001a04:	4613      	mov	r3, r2
 8001a06:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001a08:	88f8      	ldrh	r0, [r7, #6]
 8001a0a:	893a      	ldrh	r2, [r7, #8]
 8001a0c:	8979      	ldrh	r1, [r7, #10]
 8001a0e:	7e3b      	ldrb	r3, [r7, #24]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4603      	mov	r3, r0
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff fc11 	bl	800123c <u8g2_draw_hv_line_2dir>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001a22:	b590      	push	{r4, r7, lr}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691c      	ldr	r4, [r3, #16]
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	2300      	movs	r3, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	47a0      	blx	r4
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	691c      	ldr	r4, [r3, #16]
 8001a58:	7afa      	ldrb	r2, [r7, #11]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2117      	movs	r1, #23
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	47a0      	blx	r4
 8001a62:	4603      	mov	r3, r0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001a78:	1cfb      	adds	r3, r7, #3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffe1 	bl	8001a46 <u8x8_byte_SendBytes>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001a8e:	b590      	push	{r4, r7, lr}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68dc      	ldr	r4, [r3, #12]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2115      	movs	r1, #21
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	47a0      	blx	r4
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68dc      	ldr	r4, [r3, #12]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2116      	movs	r1, #22
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	47a0      	blx	r4
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}

08001ad6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001ad6:	b590      	push	{r4, r7, lr}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68dc      	ldr	r4, [r3, #12]
 8001ae8:	7afa      	ldrb	r2, [r7, #11]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2117      	movs	r1, #23
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	47a0      	blx	r4
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}

08001afc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68dc      	ldr	r4, [r3, #12]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2118      	movs	r1, #24
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	47a0      	blx	r4
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}

08001b1c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68dc      	ldr	r4, [r3, #12]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2119      	movs	r1, #25
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	47a0      	blx	r4
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	73fb      	strb	r3, [r7, #15]
    data++;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b56:	d031      	beq.n	8001bbc <u8x8_cad_SendSequence+0x80>
 8001b58:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b5a:	dc3d      	bgt.n	8001bd8 <u8x8_cad_SendSequence+0x9c>
 8001b5c:	2b19      	cmp	r3, #25
 8001b5e:	dc3b      	bgt.n	8001bd8 <u8x8_cad_SendSequence+0x9c>
 8001b60:	2b18      	cmp	r3, #24
 8001b62:	da23      	bge.n	8001bac <u8x8_cad_SendSequence+0x70>
 8001b64:	2b16      	cmp	r3, #22
 8001b66:	dc02      	bgt.n	8001b6e <u8x8_cad_SendSequence+0x32>
 8001b68:	2b15      	cmp	r3, #21
 8001b6a:	da03      	bge.n	8001b74 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001b6c:	e034      	b.n	8001bd8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001b6e:	2b17      	cmp	r3, #23
 8001b70:	d00e      	beq.n	8001b90 <u8x8_cad_SendSequence+0x54>
	return;
 8001b72:	e031      	b.n	8001bd8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68dc      	ldr	r4, [r3, #12]
 8001b7e:	7bba      	ldrb	r2, [r7, #14]
 8001b80:	7bf9      	ldrb	r1, [r7, #15]
 8001b82:	2300      	movs	r3, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	47a0      	blx	r4
	  data++;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
	  break;
 8001b8e:	e022      	b.n	8001bd6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001b96:	f107 030e 	add.w	r3, r7, #14
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff99 	bl	8001ad6 <u8x8_cad_SendData>
	  data++;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	603b      	str	r3, [r7, #0]
	  break;
 8001baa:	e014      	b.n	8001bd6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68dc      	ldr	r4, [r3, #12]
 8001bb0:	7bf9      	ldrb	r1, [r7, #15]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	47a0      	blx	r4
	  break;
 8001bba:	e00c      	b.n	8001bd6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2129      	movs	r1, #41	@ 0x29
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f9d8 	bl	8001f7e <u8x8_gpio_call>
	  data++;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	603b      	str	r3, [r7, #0]
	  break;
 8001bd4:	bf00      	nop
    cmd = *data;
 8001bd6:	e7b6      	b.n	8001b46 <u8x8_cad_SendSequence+0xa>
	return;
 8001bd8:	bf00      	nop
    }
  }
}
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	72fb      	strb	r3, [r7, #11]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	3b14      	subs	r3, #20
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d82f      	bhi.n	8001c5a <u8x8_cad_001+0x7a>
 8001bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <u8x8_cad_001+0x20>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c49 	.word	0x08001c49
 8001c04:	08001c19 	.word	0x08001c19
 8001c08:	08001c2d 	.word	0x08001c2d
 8001c0c:	08001c41 	.word	0x08001c41
 8001c10:	08001c49 	.word	0x08001c49
 8001c14:	08001c49 	.word	0x08001c49
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff ff01 	bl	8001a22 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001c20:	7abb      	ldrb	r3, [r7, #10]
 8001c22:	4619      	mov	r1, r3
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff ff21 	bl	8001a6c <u8x8_byte_SendByte>
      break;
 8001c2a:	e018      	b.n	8001c5e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fef7 	bl	8001a22 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	4619      	mov	r1, r3
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff ff17 	bl	8001a6c <u8x8_byte_SendByte>
      break;
 8001c3e:	e00e      	b.n	8001c5e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001c40:	2101      	movs	r1, #1
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff feed 	bl	8001a22 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691c      	ldr	r4, [r3, #16]
 8001c4c:	7aba      	ldrb	r2, [r7, #10]
 8001c4e:	7af9      	ldrb	r1, [r7, #11]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	47a0      	blx	r4
 8001c56:	4603      	mov	r3, r0
 8001c58:	e002      	b.n	8001c60 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <u8x8_cad_001+0x80>
  }
  return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	72fb      	strb	r3, [r7, #11]
 8001c76:	4613      	mov	r3, r2
 8001c78:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	3b0b      	subs	r3, #11
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	f200 808a 	bhi.w	8001d98 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8001c84:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001ca1 	.word	0x08001ca1
 8001c90:	08001d99 	.word	0x08001d99
 8001c94:	08001cbb 	.word	0x08001cbb
 8001c98:	08001ced 	.word	0x08001ced
 8001c9c:	08001d0d 	.word	0x08001d0d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8001ca6:	4940      	ldr	r1, [pc, #256]	@ (8001da8 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff ff47 	bl	8001b3c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8001cae:	e075      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8001cb0:	493e      	ldr	r1, [pc, #248]	@ (8001dac <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff ff42 	bl	8001b3c <u8x8_cad_SendSequence>
      break;
 8001cb8:	e070      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001cba:	7abb      	ldrb	r3, [r7, #10]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8001cc0:	493b      	ldr	r1, [pc, #236]	@ (8001db0 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7ff ff3a 	bl	8001b3c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	7c9a      	ldrb	r2, [r3, #18]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001cd4:	e062      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8001cd6:	4937      	ldr	r1, [pc, #220]	@ (8001db4 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff ff2f 	bl	8001b3c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7cda      	ldrb	r2, [r3, #19]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8001cea:	e057      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff ff05 	bl	8001afc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001cf2:	2181      	movs	r1, #129	@ 0x81
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff feca 	bl	8001a8e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8001cfa:	7abb      	ldrb	r3, [r7, #10]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fed7 	bl	8001ab2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff ff09 	bl	8001b1c <u8x8_cad_EndTransfer>
      break;
 8001d0a:	e047      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff fef5 	bl	8001afc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	795b      	ldrb	r3, [r3, #5]
 8001d16:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	4413      	add	r3, r2
 8001d28:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8001d2a:	2140      	movs	r1, #64	@ 0x40
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff feae 	bl	8001a8e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff fea4 	bl	8001a8e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff feae 	bl	8001ab2 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	799b      	ldrb	r3, [r3, #6]
 8001d5a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fea5 	bl	8001ab2 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	791b      	ldrb	r3, [r3, #4]
 8001d6c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001d74:	7dbb      	ldrb	r3, [r7, #22]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fea9 	bl	8001ad6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8001d84:	7abb      	ldrb	r3, [r7, #10]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001d8a:	7abb      	ldrb	r3, [r7, #10]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1eb      	bne.n	8001d68 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fec3 	bl	8001b1c <u8x8_cad_EndTransfer>
      break;
 8001d96:	e001      	b.n	8001d9c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08005cb0 	.word	0x08005cb0
 8001dac:	08005cb8 	.word	0x08005cb8
 8001db0:	08005cc0 	.word	0x08005cc0
 8001db4:	08005cc8 	.word	0x08005cc8

08001db8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	72fb      	strb	r3, [r7, #11]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8001dca:	7aba      	ldrb	r2, [r7, #10]
 8001dcc:	7af9      	ldrb	r1, [r7, #11]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff ff49 	bl	8001c68 <u8x8_d_ssd1306_sh1106_generic>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e014      	b.n	8001e0a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d009      	beq.n	8001dfa <u8x8_d_ssd1306_128x64_noname+0x42>
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d10c      	bne.n	8001e04 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f82a 	bl	8001e44 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8001df0:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff fea2 	bl	8001b3c <u8x8_cad_SendSequence>
      break;
 8001df8:	e006      	b.n	8001e08 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8001dfa:	4907      	ldr	r1, [pc, #28]	@ (8001e18 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f80d 	bl	8001e1c <u8x8_d_helper_display_setup_memory>
      break;
 8001e02:	e001      	b.n	8001e08 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08005c78 	.word	0x08005c78
 8001e18:	08005cd0 	.word	0x08005cd0

08001e1c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	7c9a      	ldrb	r2, [r3, #18]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695c      	ldr	r4, [r3, #20]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2128      	movs	r1, #40	@ 0x28
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68dc      	ldr	r4, [r3, #12]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	2114      	movs	r1, #20
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	214b      	movs	r1, #75	@ 0x4b
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f886 	bl	8001f7e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	791b      	ldrb	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2129      	movs	r1, #41	@ 0x29
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f87e 	bl	8001f7e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	214b      	movs	r1, #75	@ 0x4b
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f879 	bl	8001f7e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	791b      	ldrb	r3, [r3, #4]
 8001e92:	461a      	mov	r2, r3
 8001e94:	2129      	movs	r1, #41	@ 0x29
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f871 	bl	8001f7e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	214b      	movs	r1, #75	@ 0x4b
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f86c 	bl	8001f7e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	795b      	ldrb	r3, [r3, #5]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2129      	movs	r1, #41	@ 0x29
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f864 	bl	8001f7e <u8x8_gpio_call>
}    
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}

08001ebe <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001ebe:	b590      	push	{r4, r7, lr}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	70fb      	strb	r3, [r7, #3]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70bb      	strb	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8001edc:	78bb      	ldrb	r3, [r7, #2]
 8001ede:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689c      	ldr	r4, [r3, #8]
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	47a0      	blx	r4
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd90      	pop	{r4, r7, pc}

08001f02 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8001f02:	b590      	push	{r4, r7, lr}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689c      	ldr	r4, [r3, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2200      	movs	r2, #0
 8001f12:	2109      	movs	r1, #9
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	47a0      	blx	r4
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689c      	ldr	r4, [r3, #8]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	210a      	movs	r1, #10
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}

08001f3e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689c      	ldr	r4, [r3, #8]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	2300      	movs	r3, #0
 8001f52:	210b      	movs	r1, #11
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	47a0      	blx	r4
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd90      	pop	{r4, r7, pc}

08001f60 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689c      	ldr	r4, [r3, #8]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2110      	movs	r1, #16
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	47a0      	blx	r4
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}

08001f7e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001f7e:	b590      	push	{r4, r7, lr}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695c      	ldr	r4, [r3, #20]
 8001f92:	78ba      	ldrb	r2, [r7, #2]
 8001f94:	78f9      	ldrb	r1, [r7, #3]
 8001f96:	2300      	movs	r3, #0
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	47a0      	blx	r4
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}

08001fa4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a11      	ldr	r2, [pc, #68]	@ (800201c <u8x8_SetupDefaults+0x58>)
 8001fd6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a10      	ldr	r2, [pc, #64]	@ (800201c <u8x8_SetupDefaults+0x58>)
 8001fdc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <u8x8_SetupDefaults+0x58>)
 8001fe2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <u8x8_SetupDefaults+0x58>)
 8001fe8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	22ff      	movs	r2, #255	@ 0xff
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	22ff      	movs	r2, #255	@ 0xff
 800200c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	08001fa5 	.word	0x08001fa5

08002020 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff ffc8 	bl	8001fc4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff ff58 	bl	8001f02 <u8x8_SetupMemory>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002060:	f7fe feda 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002064:	480c      	ldr	r0, [pc, #48]	@ (8002098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002066:	490d      	ldr	r1, [pc, #52]	@ (800209c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002068:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800207c:	4c0a      	ldr	r4, [pc, #40]	@ (80020a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208a:	f003 fdb7 	bl	8005bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7fe fa91 	bl	80005b4 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020a0:	08019158 	.word	0x08019158
  ldr r2, =_sbss
 80020a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020a8:	2000460c 	.word	0x2000460c

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 fd51 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7fe fd46 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fd69 	bl	8002bea <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fd31 	bl	8002b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000004 	.word	0x20000004
 800214c:	2000000c 	.word	0x2000000c
 8002150:	20000008 	.word	0x20000008

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000000c 	.word	0x2000000c
 8002178:	20004608 	.word	0x20004608

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20004608 	.word	0x20004608

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000000c 	.word	0x2000000c

080021dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e033      	b.n	800225a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fce2 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002222:	f023 0302 	bic.w	r3, r3, #2
 8002226:	f043 0202 	orr.w	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa58 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
 800224a:	e001      	b.n	8002250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1e>
 800227e:	2302      	movs	r3, #2
 8002280:	e0ce      	b.n	8002420 <HAL_ADC_Start_DMA+0x1bc>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d018      	beq.n	80022ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002428 <HAL_ADC_Start_DMA+0x1c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5f      	ldr	r2, [pc, #380]	@ (800242c <HAL_ADC_Start_DMA+0x1c8>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9a      	lsrs	r2, r3, #18
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022d8:	d107      	bne.n	80022ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	f040 8086 	bne.w	8002406 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002324:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002338:	d106      	bne.n	8002348 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f023 0206 	bic.w	r2, r3, #6
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
 8002346:	e002      	b.n	800234e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002356:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_ADC_Start_DMA+0x1cc>)
 8002358:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	4a35      	ldr	r2, [pc, #212]	@ (8002434 <HAL_ADC_Start_DMA+0x1d0>)
 8002360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	4a34      	ldr	r2, [pc, #208]	@ (8002438 <HAL_ADC_Start_DMA+0x1d4>)
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	4a33      	ldr	r2, [pc, #204]	@ (800243c <HAL_ADC_Start_DMA+0x1d8>)
 8002370:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800237a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800238a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800239a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	334c      	adds	r3, #76	@ 0x4c
 80023a6:	4619      	mov	r1, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f000 fcd8 	bl	8002d60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10f      	bne.n	80023dc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d129      	bne.n	800241e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	e020      	b.n	800241e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_ADC_Start_DMA+0x1dc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11b      	bne.n	800241e <HAL_ADC_Start_DMA+0x1ba>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d114      	bne.n	800241e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e00b      	b.n	800241e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000004 	.word	0x20000004
 800242c:	431bde83 	.word	0x431bde83
 8002430:	40012300 	.word	0x40012300
 8002434:	080028dd 	.word	0x080028dd
 8002438:	08002997 	.word	0x08002997
 800243c:	080029b3 	.word	0x080029b3
 8002440:	40012000 	.word	0x40012000

08002444 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	@ 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	@ 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	@ 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	@ 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000004 	.word	0x20000004
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13c      	bne.n	8002970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d12b      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d127      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002930:	2b00      	cmp	r3, #0
 8002932:	d119      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0220 	bic.w	r2, r2, #32
 8002942:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fd6b 	bl	8002444 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800296e:	e00e      	b.n	800298e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd75 	bl	800246c <HAL_ADC_ErrorCallback>
}
 8002982:	e004      	b.n	800298e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff fd57 	bl	8002458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff fd4a 	bl	800246c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4c:	d301      	bcc.n	8002b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00f      	b.n	8002b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <SysTick_Config+0x40>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7ff ff8e 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <SysTick_Config+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <SysTick_Config+0x40>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff3e 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5d 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff31 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa2 	bl	8002b3c <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fab4 	bl	800217c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e099      	b.n	8002d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c40:	e00f      	b.n	8002c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c42:	f7ff fa9b 	bl	800217c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d908      	bls.n	8002c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e078      	b.n	8002d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e8      	bne.n	8002c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_DMA_Init+0x158>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d117      	bne.n	8002d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fa6f 	bl	80031ec <DMA_CheckFifoParam>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d22:	2301      	movs	r3, #1
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa26 	bl	8003180 <DMA_CalcBaseAndBitshift>
 8002d34:	4603      	mov	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	223f      	movs	r2, #63	@ 0x3f
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	f010803f 	.word	0xf010803f

08002d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Start_IT+0x26>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e040      	b.n	8002e08 <HAL_DMA_Start_IT+0xa8>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12f      	bne.n	8002dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f9b8 	bl	8003124 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	223f      	movs	r2, #63	@ 0x3f
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0216 	orr.w	r2, r2, #22
 8002dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e005      	b.n	8002e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003058 <HAL_DMA_IRQHandler+0x248>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a8e      	ldr	r2, [pc, #568]	@ (800305c <HAL_DMA_IRQHandler+0x24c>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01a      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	2208      	movs	r2, #8
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d012      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	2210      	movs	r2, #16
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d043      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d03c      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d018      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d024      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e01f      	b.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	2220      	movs	r2, #32
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 808f 	beq.w	80030b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8087 	beq.w	80030b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d136      	bne.n	8003028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0216 	bic.w	r2, r2, #22
 8002fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_DMA_IRQHandler+0x1da>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0208 	bic.w	r2, r2, #8
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	223f      	movs	r2, #63	@ 0x3f
 8003000:	409a      	lsls	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	2b00      	cmp	r3, #0
 800301c:	d07e      	beq.n	800311c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
        }
        return;
 8003026:	e079      	b.n	800311c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d031      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e02c      	b.n	80030b0 <HAL_DMA_IRQHandler+0x2a0>
 8003056:	bf00      	nop
 8003058:	20000004 	.word	0x20000004
 800305c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d023      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
 8003070:	e01e      	b.n	80030b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10f      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0210 	bic.w	r2, r2, #16
 800308e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d032      	beq.n	800311e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d022      	beq.n	800310a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2205      	movs	r2, #5
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3301      	adds	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d307      	bcc.n	80030f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f2      	bne.n	80030dc <HAL_DMA_IRQHandler+0x2cc>
 80030f6:	e000      	b.n	80030fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e000      	b.n	800311e <HAL_DMA_IRQHandler+0x30e>
        return;
 800311c:	bf00      	nop
    }
  }
}
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003140:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	d108      	bne.n	8003164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003162:	e007      	b.n	8003174 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	60da      	str	r2, [r3, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3b10      	subs	r3, #16
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <DMA_CalcBaseAndBitshift+0x68>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d909      	bls.n	80031c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	@ 0x58
 80031c0:	e007      	b.n	80031d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	aaaaaaab 	.word	0xaaaaaaab
 80031e8:	08005ce8 	.word	0x08005ce8

080031ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11f      	bne.n	8003246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d856      	bhi.n	80032ba <DMA_CheckFifoParam+0xce>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <DMA_CheckFifoParam+0x28>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003237 	.word	0x08003237
 800321c:	08003225 	.word	0x08003225
 8003220:	080032bb 	.word	0x080032bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d046      	beq.n	80032be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003234:	e043      	b.n	80032be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800323e:	d140      	bne.n	80032c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e03d      	b.n	80032c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324e:	d121      	bne.n	8003294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d837      	bhi.n	80032c6 <DMA_CheckFifoParam+0xda>
 8003256:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <DMA_CheckFifoParam+0x70>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	0800326d 	.word	0x0800326d
 8003260:	08003273 	.word	0x08003273
 8003264:	0800326d 	.word	0x0800326d
 8003268:	08003285 	.word	0x08003285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e030      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d025      	beq.n	80032ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003282:	e022      	b.n	80032ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800328c:	d11f      	bne.n	80032ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003292:	e01c      	b.n	80032ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d903      	bls.n	80032a2 <DMA_CheckFifoParam+0xb6>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d003      	beq.n	80032a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032a0:	e018      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      break;
 80032a6:	e015      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e00b      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032ba:	bf00      	nop
 80032bc:	e00a      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
 80032c0:	e008      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e006      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e004      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e002      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
    }
  } 
  
  return status; 
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e159      	b.n	80035b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	f040 8148 	bne.w	80035ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d005      	beq.n	8003336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	2b02      	cmp	r3, #2
 8003334:	d130      	bne.n	8003398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800336c:	2201      	movs	r2, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 0201 	and.w	r2, r3, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d017      	beq.n	80033d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d123      	bne.n	8003428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	08da      	lsrs	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a2 	beq.w	80035ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b57      	ldr	r3, [pc, #348]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a56      	ldr	r2, [pc, #344]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b54      	ldr	r3, [pc, #336]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003486:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a49      	ldr	r2, [pc, #292]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x202>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a48      	ldr	r2, [pc, #288]	@ (80035d8 <HAL_GPIO_Init+0x2f4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x1fe>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a47      	ldr	r2, [pc, #284]	@ (80035dc <HAL_GPIO_Init+0x2f8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x1fa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a46      	ldr	r2, [pc, #280]	@ (80035e0 <HAL_GPIO_Init+0x2fc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x1f6>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a45      	ldr	r2, [pc, #276]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x1f2>
 80034d2:	2304      	movs	r3, #4
 80034d4:	e008      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e006      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034da:	2303      	movs	r3, #3
 80034dc:	e004      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034de:	2302      	movs	r3, #2
 80034e0:	e002      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_GPIO_Init+0x204>
 80034e6:	2300      	movs	r3, #0
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f002 0203 	and.w	r2, r2, #3
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	4093      	lsls	r3, r2
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f8:	4935      	ldr	r1, [pc, #212]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3302      	adds	r3, #2
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003506:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352a:	4a2f      	ldr	r2, [pc, #188]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003530:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003554:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355a:	4b23      	ldr	r3, [pc, #140]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800357e:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003584:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a8:	4a0f      	ldr	r2, [pc, #60]	@ (80035e8 <HAL_GPIO_Init+0x304>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3301      	adds	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	f67f aea2 	bls.w	8003300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3724      	adds	r7, #36	@ 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40013800 	.word	0x40013800
 80035d4:	40020000 	.word	0x40020000
 80035d8:	40020400 	.word	0x40020400
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020c00 	.word	0x40020c00
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e267      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d075      	beq.n	800372a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363e:	4b88      	ldr	r3, [pc, #544]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d00c      	beq.n	8003664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b85      	ldr	r3, [pc, #532]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d112      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b82      	ldr	r3, [pc, #520]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003662:	d10b      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4b7e      	ldr	r3, [pc, #504]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05b      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d157      	bne.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e242      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x74>
 8003686:	4b76      	ldr	r3, [pc, #472]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x98>
 800369e:	4b70      	ldr	r3, [pc, #448]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 80036b8:	4b69      	ldr	r3, [pc, #420]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b66      	ldr	r3, [pc, #408]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a65      	ldr	r2, [pc, #404]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe fd50 	bl	800217c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fe fd4c 	bl	800217c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	@ 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e207      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe fd3c 	bl	800217c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7fe fd38 	bl	800217c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1f3      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d063      	beq.n	80037fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003736:	4b4a      	ldr	r3, [pc, #296]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b44      	ldr	r3, [pc, #272]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1c7      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4937      	ldr	r1, [pc, #220]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e03a      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x244>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe fcf1 	bl	800217c <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379e:	f7fe fced 	bl	800217c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1a8      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037bc:	4b28      	ldr	r3, [pc, #160]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4925      	ldr	r1, [pc, #148]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d2:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCC_OscConfig+0x244>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fcd0 	bl	800217c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe fccc 	bl	800217c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e187      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d036      	beq.n	8003878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_RCC_OscConfig+0x248>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fcb0 	bl	800217c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe fcac 	bl	800217c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e167      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_OscConfig+0x240>)
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x200>
 800383e:	e01b      	b.n	8003878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x248>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe fc99 	bl	800217c <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e00e      	b.n	800386c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe fc95 	bl	800217c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d907      	bls.n	800386c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e150      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ea      	bne.n	800384e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8097 	beq.w	80039b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b81      	ldr	r3, [pc, #516]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b77      	ldr	r3, [pc, #476]	@ (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b74      	ldr	r3, [pc, #464]	@ (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a73      	ldr	r2, [pc, #460]	@ (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fc55 	bl	800217c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe fc51 	bl	800217c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e10c      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x2ea>
 80038fc:	4b64      	ldr	r3, [pc, #400]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a63      	ldr	r2, [pc, #396]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	e01c      	b.n	8003944 <HAL_RCC_OscConfig+0x324>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x30c>
 8003912:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	4a5e      	ldr	r2, [pc, #376]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70
 800391e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	@ 0x70
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0x324>
 800392c:	4b58      	ldr	r3, [pc, #352]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a57      	ldr	r2, [pc, #348]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	4b55      	ldr	r3, [pc, #340]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a54      	ldr	r2, [pc, #336]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 0304 	bic.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe fc16 	bl	800217c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe fc12 	bl	800217c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0cb      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b49      	ldr	r3, [pc, #292]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ee      	beq.n	8003954 <HAL_RCC_OscConfig+0x334>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7fe fc00 	bl	800217c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe fbfc 	bl	800217c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0b5      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	4b3e      	ldr	r3, [pc, #248]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ee      	bne.n	8003980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b39      	ldr	r3, [pc, #228]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	4a38      	ldr	r2, [pc, #224]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a1 	beq.w	8003b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039be:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d05c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d141      	bne.n	8003a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_RCC_OscConfig+0x478>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fbd0 	bl	800217c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fbcc 	bl	800217c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e087      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	491b      	ldr	r1, [pc, #108]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1b      	ldr	r3, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x478>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fba5 	bl	800217c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fe fba1 	bl	800217c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e05c      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x416>
 8003a54:	e054      	b.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fb8e 	bl	800217c <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fb8a 	bl	800217c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e045      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x444>
 8003a82:	e03d      	b.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e038      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
 8003a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x4ec>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d028      	beq.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d121      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d11a      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d111      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0cc      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b68      	ldr	r3, [pc, #416]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d90c      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b65      	ldr	r3, [pc, #404]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b63      	ldr	r3, [pc, #396]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b8      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b64:	4b59      	ldr	r3, [pc, #356]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a58      	ldr	r2, [pc, #352]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a52      	ldr	r2, [pc, #328]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	494d      	ldr	r1, [pc, #308]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d044      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e07f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e067      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b37      	ldr	r3, [pc, #220]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4934      	ldr	r1, [pc, #208]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c00:	f7fe fabc 	bl	800217c <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe fab8 	bl	800217c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e04f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b25      	ldr	r3, [pc, #148]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d20c      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b22      	ldr	r3, [pc, #136]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e032      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4916      	ldr	r1, [pc, #88]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	490e      	ldr	r1, [pc, #56]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c96:	f000 f821 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	490a      	ldr	r1, [pc, #40]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	5ccb      	ldrb	r3, [r1, r3]
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	4a09      	ldr	r2, [pc, #36]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fa1c 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08005c5c 	.word	0x08005c5c
 8003cd4:	20000004 	.word	0x20000004
 8003cd8:	20000008 	.word	0x20000008

08003cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce0:	b090      	sub	sp, #64	@ 0x40
 8003ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce8:	2300      	movs	r3, #0
 8003cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cec:	2300      	movs	r3, #0
 8003cee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d00d      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x40>
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	f200 80a1 	bhi.w	8003e48 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0e:	e09b      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d12:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003d14:	e09b      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d16:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d1a:	e098      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d26:	4b4d      	ldr	r3, [pc, #308]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d028      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b4a      	ldr	r3, [pc, #296]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	2200      	movs	r2, #0
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d44:	2100      	movs	r1, #0
 8003d46:	4b47      	ldr	r3, [pc, #284]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d48:	fb03 f201 	mul.w	r2, r3, r1
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	4a43      	ldr	r2, [pc, #268]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d56:	fba0 1202 	umull	r1, r2, r0, r2
 8003d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d62:	4413      	add	r3, r2
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d68:	2200      	movs	r2, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	61fa      	str	r2, [r7, #28]
 8003d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d76:	f7fc fa8f 	bl	8000298 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4613      	mov	r3, r2
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d82:	e053      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	617a      	str	r2, [r7, #20]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d96:	f04f 0b00 	mov.w	fp, #0
 8003d9a:	4652      	mov	r2, sl
 8003d9c:	465b      	mov	r3, fp
 8003d9e:	f04f 0000 	mov.w	r0, #0
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	0159      	lsls	r1, r3, #5
 8003da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dac:	0150      	lsls	r0, r2, #5
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	ebb2 080a 	subs.w	r8, r2, sl
 8003db6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dce:	ebb2 0408 	subs.w	r4, r2, r8
 8003dd2:	eb63 0509 	sbc.w	r5, r3, r9
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	00eb      	lsls	r3, r5, #3
 8003de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de4:	00e2      	lsls	r2, r4, #3
 8003de6:	4614      	mov	r4, r2
 8003de8:	461d      	mov	r5, r3
 8003dea:	eb14 030a 	adds.w	r3, r4, sl
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	eb45 030b 	adc.w	r3, r5, fp
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e02:	4629      	mov	r1, r5
 8003e04:	028b      	lsls	r3, r1, #10
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	028a      	lsls	r2, r1, #10
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	2200      	movs	r2, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	60fa      	str	r2, [r7, #12]
 8003e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e20:	f7fc fa3a 	bl	8000298 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	3301      	adds	r3, #1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003e3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e46:	e002      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e48:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3740      	adds	r7, #64	@ 0x40
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	017d7840 	.word	0x017d7840

08003e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07b      	b.n	8003f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8a:	d009      	beq.n	8003ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
 8003e92:	e005      	b.n	8003ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fefa 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	f003 0104 	and.w	r1, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	f003 0210 	and.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b088      	sub	sp, #32
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_SPI_Transmit+0x22>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e12d      	b.n	80041f8 <HAL_SPI_Transmit+0x27e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa4:	f7fe f8ea 	bl	800217c <HAL_GetTick>
 8003fa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fbe:	e116      	b.n	80041ee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_Transmit+0x52>
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd0:	e10d      	b.n	80041ee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004018:	d10f      	bne.n	800403a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004038:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004044:	2b40      	cmp	r3, #64	@ 0x40
 8004046:	d007      	beq.n	8004058 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004060:	d14f      	bne.n	8004102 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_SPI_Transmit+0xf6>
 800406a:	8afb      	ldrh	r3, [r7, #22]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d142      	bne.n	80040f6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	1c9a      	adds	r2, r3, #2
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004094:	e02f      	b.n	80040f6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d112      	bne.n	80040ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040c8:	e015      	b.n	80040f6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ca:	f7fe f857 	bl	800217c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d803      	bhi.n	80040e2 <HAL_SPI_Transmit+0x168>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_Transmit+0x16e>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80040f4:	e07b      	b.n	80041ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ca      	bne.n	8004096 <HAL_SPI_Transmit+0x11c>
 8004100:	e050      	b.n	80041a4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Transmit+0x196>
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d144      	bne.n	800419a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004136:	e030      	b.n	800419a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d113      	bne.n	800416e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800416c:	e015      	b.n	800419a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fe f805 	bl	800217c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Transmit+0x20c>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x212>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004198:	e029      	b.n	80041ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1c9      	bne.n	8004138 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	6839      	ldr	r1, [r7, #0]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f8b1 	bl	8004310 <SPI_EndRxTxTransaction>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e003      	b.n	80041ee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004210:	f7fd ffb4 	bl	800217c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004220:	f7fd ffac 	bl	800217c <HAL_GetTick>
 8004224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004226:	4b39      	ldr	r3, [pc, #228]	@ (800430c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	0d1b      	lsrs	r3, r3, #20
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004236:	e054      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d050      	beq.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004240:	f7fd ff9c 	bl	800217c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d13d      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800426e:	d111      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004278:	d004      	beq.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004282:	d107      	bne.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429c:	d10f      	bne.n	80042be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e017      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3b01      	subs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d19b      	bne.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000004 	.word	0x20000004

08004310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2201      	movs	r2, #1
 8004324:	2102      	movs	r1, #2
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ff6a 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e032      	b.n	80043a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004342:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <SPI_EndRxTxTransaction+0xa0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <SPI_EndRxTxTransaction+0xa4>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0d5b      	lsrs	r3, r3, #21
 800434e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004360:	d112      	bne.n	8004388 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff47 	bl	8004200 <SPI_WaitFlagStateUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e00f      	b.n	80043a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3b01      	subs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d0f2      	beq.n	8004388 <SPI_EndRxTxTransaction+0x78>
 80043a2:	e000      	b.n	80043a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80043a4:	bf00      	nop
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000004 	.word	0x20000004
 80043b4:	165e9f81 	.word	0x165e9f81

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e041      	b.n	800444e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fcb0 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fa70 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d001      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e044      	b.n	80044fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <HAL_TIM_Base_Start_IT+0xb0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449a:	d013      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	@ (800450c <HAL_TIM_Base_Start_IT+0xb4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a19      	ldr	r2, [pc, #100]	@ (8004510 <HAL_TIM_Base_Start_IT+0xb8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	@ (8004514 <HAL_TIM_Base_Start_IT+0xbc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a16      	ldr	r2, [pc, #88]	@ (8004518 <HAL_TIM_Base_Start_IT+0xc0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d111      	bne.n	80044e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d010      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	e007      	b.n	80044f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40010000 	.word	0x40010000
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f999 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f98b 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f99c 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d020      	beq.n	80045cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0204 	mvn.w	r2, #4
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f973 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f965 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f976 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0208 	mvn.w	r2, #8
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2204      	movs	r2, #4
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f94d 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f93f 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f950 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2208      	movs	r2, #8
 800463a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f927 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f919 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f92a 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0201 	mvn.w	r2, #1
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fb ff80 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fab6 	bl	8004c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f8fb 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0220 	mvn.w	r2, #32
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa88 	bl	8004c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_ConfigClockSource+0x1c>
 8004714:	2302      	movs	r3, #2
 8004716:	e0b4      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x186>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800473e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475e:	f000 8086 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x172>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b70      	cmp	r3, #112	@ 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xa6>
 800476c:	2b70      	cmp	r3, #112	@ 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b60      	cmp	r3, #96	@ 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x11a>
 8004774:	2b60      	cmp	r3, #96	@ 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b50      	cmp	r3, #80	@ 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xfa>
 800477c:	2b50      	cmp	r3, #80	@ 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b40      	cmp	r3, #64	@ 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x13a>
 8004784:	2b40      	cmp	r3, #64	@ 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b30      	cmp	r3, #48	@ 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b30      	cmp	r3, #48	@ 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b2:	f000 f999 	bl	8004ae8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04f      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e0:	f000 f982 	bl	8004ae8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	461a      	mov	r2, r3
 8004804:	f000 f8f6 	bl	80049f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	@ 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f94f 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004814:	e02c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f915 	bl	8004a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	@ 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f93f 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004834:	e01c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	461a      	mov	r2, r3
 8004844:	f000 f8d6 	bl	80049f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	@ 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f92f 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004854:	e00c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 f926 	bl	8004ab2 <TIM_ITRx_SetConfig>
      break;
 8004866:	e003      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	@ (80049d8 <TIM_Base_SetConfig+0xfc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00f      	beq.n	8004914 <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <TIM_Base_SetConfig+0x100>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x38>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a36      	ldr	r2, [pc, #216]	@ (80049e0 <TIM_Base_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x38>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <TIM_Base_SetConfig+0x108>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	@ (80049d8 <TIM_Base_SetConfig+0xfc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01b      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004934:	d017      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a28      	ldr	r2, [pc, #160]	@ (80049dc <TIM_Base_SetConfig+0x100>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a27      	ldr	r2, [pc, #156]	@ (80049e0 <TIM_Base_SetConfig+0x104>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00f      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a26      	ldr	r2, [pc, #152]	@ (80049e4 <TIM_Base_SetConfig+0x108>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a25      	ldr	r2, [pc, #148]	@ (80049e8 <TIM_Base_SetConfig+0x10c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a24      	ldr	r2, [pc, #144]	@ (80049ec <TIM_Base_SetConfig+0x110>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a23      	ldr	r2, [pc, #140]	@ (80049f0 <TIM_Base_SetConfig+0x114>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d108      	bne.n	8004978 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0e      	ldr	r2, [pc, #56]	@ (80049d8 <TIM_Base_SetConfig+0xfc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d103      	bne.n	80049ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	611a      	str	r2, [r3, #16]
  }
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 030a 	bic.w	r3, r3, #10
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b087      	sub	sp, #28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f023 0210 	bic.w	r2, r3, #16
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	031b      	lsls	r3, r3, #12
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 0307 	orr.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e050      	b.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d018      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8c:	d013      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a16      	ldr	r2, [pc, #88]	@ (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a13      	ldr	r2, [pc, #76]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40014000 	.word	0x40014000

08004c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <arm_rfft_fast_init_f32>:
 8004c2c:	084b      	lsrs	r3, r1, #1
 8004c2e:	2b80      	cmp	r3, #128	@ 0x80
 8004c30:	b410      	push	{r4}
 8004c32:	8201      	strh	r1, [r0, #16]
 8004c34:	8003      	strh	r3, [r0, #0]
 8004c36:	d046      	beq.n	8004cc6 <arm_rfft_fast_init_f32+0x9a>
 8004c38:	d916      	bls.n	8004c68 <arm_rfft_fast_init_f32+0x3c>
 8004c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c3e:	d03c      	beq.n	8004cba <arm_rfft_fast_init_f32+0x8e>
 8004c40:	d928      	bls.n	8004c94 <arm_rfft_fast_init_f32+0x68>
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c46:	d01f      	beq.n	8004c88 <arm_rfft_fast_init_f32+0x5c>
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d112      	bne.n	8004c74 <arm_rfft_fast_init_f32+0x48>
 8004c4e:	4920      	ldr	r1, [pc, #128]	@ (8004cd0 <arm_rfft_fast_init_f32+0xa4>)
 8004c50:	4a20      	ldr	r2, [pc, #128]	@ (8004cd4 <arm_rfft_fast_init_f32+0xa8>)
 8004c52:	4b21      	ldr	r3, [pc, #132]	@ (8004cd8 <arm_rfft_fast_init_f32+0xac>)
 8004c54:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8004c58:	8184      	strh	r4, [r0, #12]
 8004c5a:	6081      	str	r1, [r0, #8]
 8004c5c:	6042      	str	r2, [r0, #4]
 8004c5e:	6143      	str	r3, [r0, #20]
 8004c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c64:	2000      	movs	r0, #0
 8004c66:	4770      	bx	lr
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d01c      	beq.n	8004ca6 <arm_rfft_fast_init_f32+0x7a>
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d006      	beq.n	8004c7e <arm_rfft_fast_init_f32+0x52>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d01d      	beq.n	8004cb0 <arm_rfft_fast_init_f32+0x84>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	2438      	movs	r4, #56	@ 0x38
 8004c80:	4916      	ldr	r1, [pc, #88]	@ (8004cdc <arm_rfft_fast_init_f32+0xb0>)
 8004c82:	4a17      	ldr	r2, [pc, #92]	@ (8004ce0 <arm_rfft_fast_init_f32+0xb4>)
 8004c84:	4b17      	ldr	r3, [pc, #92]	@ (8004ce4 <arm_rfft_fast_init_f32+0xb8>)
 8004c86:	e7e7      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004c88:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8004c8c:	4916      	ldr	r1, [pc, #88]	@ (8004ce8 <arm_rfft_fast_init_f32+0xbc>)
 8004c8e:	4a17      	ldr	r2, [pc, #92]	@ (8004cec <arm_rfft_fast_init_f32+0xc0>)
 8004c90:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <arm_rfft_fast_init_f32+0xc4>)
 8004c92:	e7e1      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c98:	d1ec      	bne.n	8004c74 <arm_rfft_fast_init_f32+0x48>
 8004c9a:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8004c9e:	4915      	ldr	r1, [pc, #84]	@ (8004cf4 <arm_rfft_fast_init_f32+0xc8>)
 8004ca0:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <arm_rfft_fast_init_f32+0xcc>)
 8004ca2:	4b16      	ldr	r3, [pc, #88]	@ (8004cfc <arm_rfft_fast_init_f32+0xd0>)
 8004ca4:	e7d8      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004ca6:	2430      	movs	r4, #48	@ 0x30
 8004ca8:	4915      	ldr	r1, [pc, #84]	@ (8004d00 <arm_rfft_fast_init_f32+0xd4>)
 8004caa:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <arm_rfft_fast_init_f32+0xd8>)
 8004cac:	4b16      	ldr	r3, [pc, #88]	@ (8004d08 <arm_rfft_fast_init_f32+0xdc>)
 8004cae:	e7d3      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004cb0:	2414      	movs	r4, #20
 8004cb2:	4916      	ldr	r1, [pc, #88]	@ (8004d0c <arm_rfft_fast_init_f32+0xe0>)
 8004cb4:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <arm_rfft_fast_init_f32+0xe4>)
 8004cb6:	4b17      	ldr	r3, [pc, #92]	@ (8004d14 <arm_rfft_fast_init_f32+0xe8>)
 8004cb8:	e7ce      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004cba:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8004cbe:	4916      	ldr	r1, [pc, #88]	@ (8004d18 <arm_rfft_fast_init_f32+0xec>)
 8004cc0:	4a16      	ldr	r2, [pc, #88]	@ (8004d1c <arm_rfft_fast_init_f32+0xf0>)
 8004cc2:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <arm_rfft_fast_init_f32+0xf4>)
 8004cc4:	e7c8      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004cc6:	24d0      	movs	r4, #208	@ 0xd0
 8004cc8:	4916      	ldr	r1, [pc, #88]	@ (8004d24 <arm_rfft_fast_init_f32+0xf8>)
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <arm_rfft_fast_init_f32+0xfc>)
 8004ccc:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <arm_rfft_fast_init_f32+0x100>)
 8004cce:	e7c3      	b.n	8004c58 <arm_rfft_fast_init_f32+0x2c>
 8004cd0:	08014af8 	.word	0x08014af8
 8004cd4:	08005cf0 	.word	0x08005cf0
 8004cd8:	0800be60 	.word	0x0800be60
 8004cdc:	08009df0 	.word	0x08009df0
 8004ce0:	080168b8 	.word	0x080168b8
 8004ce4:	08018da8 	.word	0x08018da8
 8004ce8:	080127e0 	.word	0x080127e0
 8004cec:	080106e0 	.word	0x080106e0
 8004cf0:	08009e60 	.word	0x08009e60
 8004cf4:	08018a38 	.word	0x08018a38
 8004cf8:	0800fe60 	.word	0x0800fe60
 8004cfc:	08016ab8 	.word	0x08016ab8
 8004d00:	08013698 	.word	0x08013698
 8004d04:	080126e0 	.word	0x080126e0
 8004d08:	08009cf0 	.word	0x08009cf0
 8004d0c:	080135f0 	.word	0x080135f0
 8004d10:	08010660 	.word	0x08010660
 8004d14:	08013618 	.word	0x08013618
 8004d18:	080172b8 	.word	0x080172b8
 8004d1c:	08013af8 	.word	0x08013af8
 8004d20:	08017638 	.word	0x08017638
 8004d24:	08018fa8 	.word	0x08018fa8
 8004d28:	080136f8 	.word	0x080136f8
 8004d2c:	08018638 	.word	0x08018638

08004d30 <arm_rfft_fast_f32>:
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	8a06      	ldrh	r6, [r0, #16]
 8004d36:	0876      	lsrs	r6, r6, #1
 8004d38:	4607      	mov	r7, r0
 8004d3a:	4615      	mov	r5, r2
 8004d3c:	8006      	strh	r6, [r0, #0]
 8004d3e:	460c      	mov	r4, r1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d15c      	bne.n	8004dfe <arm_rfft_fast_f32+0xce>
 8004d44:	461a      	mov	r2, r3
 8004d46:	2301      	movs	r3, #1
 8004d48:	f000 fbe4 	bl	8005514 <arm_cfft_f32>
 8004d4c:	edd4 7a00 	vldr	s15, [r4]
 8004d50:	ed94 7a01 	vldr	s14, [r4, #4]
 8004d54:	883e      	ldrh	r6, [r7, #0]
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004d5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d60:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 8004d64:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004d68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d6c:	3e01      	subs	r6, #1
 8004d6e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004d72:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004d76:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004d7a:	ed85 7a00 	vstr	s14, [r5]
 8004d7e:	edc5 7a01 	vstr	s15, [r5, #4]
 8004d82:	3010      	adds	r0, #16
 8004d84:	f105 0210 	add.w	r2, r5, #16
 8004d88:	3b08      	subs	r3, #8
 8004d8a:	f104 0110 	add.w	r1, r4, #16
 8004d8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d92:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004d96:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004d9a:	edd3 3a03 	vldr	s7, [r3, #12]
 8004d9e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004da2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004da6:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004daa:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004dae:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004db2:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004db6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004dba:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004dbe:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004dc2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004dc6:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004dca:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004dce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004dd2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004dd6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004dda:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004dde:	3e01      	subs	r6, #1
 8004de0:	ed02 7a02 	vstr	s14, [r2, #-8]
 8004de4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004de8:	f1a3 0308 	sub.w	r3, r3, #8
 8004dec:	f101 0108 	add.w	r1, r1, #8
 8004df0:	f100 0008 	add.w	r0, r0, #8
 8004df4:	f102 0208 	add.w	r2, r2, #8
 8004df8:	d1c9      	bne.n	8004d8e <arm_rfft_fast_f32+0x5e>
 8004dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfe:	edd1 7a00 	vldr	s15, [r1]
 8004e02:	edd1 6a01 	vldr	s13, [r1, #4]
 8004e06:	6941      	ldr	r1, [r0, #20]
 8004e08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e10:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8004e14:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e18:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e1c:	3e01      	subs	r6, #1
 8004e1e:	ed82 7a00 	vstr	s14, [r2]
 8004e22:	edc2 7a01 	vstr	s15, [r2, #4]
 8004e26:	00f0      	lsls	r0, r6, #3
 8004e28:	b3ee      	cbz	r6, 8004ea6 <arm_rfft_fast_f32+0x176>
 8004e2a:	3808      	subs	r0, #8
 8004e2c:	f101 0e10 	add.w	lr, r1, #16
 8004e30:	4420      	add	r0, r4
 8004e32:	f104 0110 	add.w	r1, r4, #16
 8004e36:	f102 0c10 	add.w	ip, r2, #16
 8004e3a:	ed90 7a02 	vldr	s14, [r0, #8]
 8004e3e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004e42:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8004e46:	ed90 4a03 	vldr	s8, [r0, #12]
 8004e4a:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004e4e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8004e52:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004e56:	ee74 4a05 	vadd.f32	s9, s8, s10
 8004e5a:	ee26 3a27 	vmul.f32	s6, s12, s15
 8004e5e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004e62:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004e66:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004e6a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004e6e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004e72:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004e76:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004e7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e7e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8004e82:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004e86:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004e8a:	3e01      	subs	r6, #1
 8004e8c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004e90:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8004e94:	f1a0 0008 	sub.w	r0, r0, #8
 8004e98:	f101 0108 	add.w	r1, r1, #8
 8004e9c:	f10e 0e08 	add.w	lr, lr, #8
 8004ea0:	f10c 0c08 	add.w	ip, ip, #8
 8004ea4:	d1c9      	bne.n	8004e3a <arm_rfft_fast_f32+0x10a>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	2301      	movs	r3, #1
 8004eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb2:	f000 bb2f 	b.w	8005514 <arm_cfft_f32>
 8004eb6:	bf00      	nop

08004eb8 <arm_cfft_radix8by2_f32>:
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	ed2d 8b08 	vpush	{d8-d11}
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	f8b7 e000 	ldrh.w	lr, [r7]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004ece:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004ed2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004ed6:	f000 80b0 	beq.w	800503a <arm_cfft_radix8by2_f32+0x182>
 8004eda:	008b      	lsls	r3, r1, #2
 8004edc:	3310      	adds	r3, #16
 8004ede:	18c6      	adds	r6, r0, r3
 8004ee0:	3210      	adds	r2, #16
 8004ee2:	4443      	add	r3, r8
 8004ee4:	f100 0510 	add.w	r5, r0, #16
 8004ee8:	f108 0410 	add.w	r4, r8, #16
 8004eec:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004ef0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004ef4:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004ef8:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004efc:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004f00:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004f04:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004f08:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004f0c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004f10:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004f14:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004f18:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004f1c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004f20:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004f24:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004f28:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004f2c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004f30:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004f34:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004f38:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004f3c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004f40:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004f44:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004f48:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004f4c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004f50:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004f54:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004f58:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004f5c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004f60:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004f64:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004f68:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004f6c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004f70:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004f74:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004f78:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004f7c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004f80:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004f84:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004f88:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004f8c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004f90:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004f94:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004f98:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004f9c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004fa0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004fa4:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004fa8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004fac:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004fb0:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004fb4:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004fb8:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004fbc:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004fc0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004fcc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004fd0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004fd4:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004fd8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004fdc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004fe0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004fe4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004fe8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004fec:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004ff0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004ff4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004ff8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004ffc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005000:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005004:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005008:	ee37 7a26 	vadd.f32	s14, s14, s13
 800500c:	f1be 0e01 	subs.w	lr, lr, #1
 8005010:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005014:	f105 0510 	add.w	r5, r5, #16
 8005018:	ed44 7a01 	vstr	s15, [r4, #-4]
 800501c:	f106 0610 	add.w	r6, r6, #16
 8005020:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005024:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005028:	f102 0210 	add.w	r2, r2, #16
 800502c:	f104 0410 	add.w	r4, r4, #16
 8005030:	f103 0310 	add.w	r3, r3, #16
 8005034:	f47f af5a 	bne.w	8004eec <arm_cfft_radix8by2_f32+0x34>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	b28c      	uxth	r4, r1
 800503c:	4621      	mov	r1, r4
 800503e:	2302      	movs	r3, #2
 8005040:	f000 fae2 	bl	8005608 <arm_radix8_butterfly_f32>
 8005044:	ecbd 8b08 	vpop	{d8-d11}
 8005048:	4621      	mov	r1, r4
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4640      	mov	r0, r8
 800504e:	2302      	movs	r3, #2
 8005050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	f000 bad8 	b.w	8005608 <arm_radix8_butterfly_f32>

08005058 <arm_cfft_radix8by4_f32>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	ed2d 8b0a 	vpush	{d8-d12}
 8005060:	8802      	ldrh	r2, [r0, #0]
 8005062:	ed91 6a00 	vldr	s12, [r1]
 8005066:	b08f      	sub	sp, #60	@ 0x3c
 8005068:	460f      	mov	r7, r1
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	6841      	ldr	r1, [r0, #4]
 800506e:	900c      	str	r0, [sp, #48]	@ 0x30
 8005070:	0093      	lsls	r3, r2, #2
 8005072:	4638      	mov	r0, r7
 8005074:	4418      	add	r0, r3
 8005076:	4606      	mov	r6, r0
 8005078:	9009      	str	r0, [sp, #36]	@ 0x24
 800507a:	4418      	add	r0, r3
 800507c:	edd0 6a00 	vldr	s13, [r0]
 8005080:	ed96 4a00 	vldr	s8, [r6]
 8005084:	edd6 2a01 	vldr	s5, [r6, #4]
 8005088:	edd0 7a01 	vldr	s15, [r0, #4]
 800508c:	900a      	str	r0, [sp, #40]	@ 0x28
 800508e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005092:	4604      	mov	r4, r0
 8005094:	4625      	mov	r5, r4
 8005096:	441c      	add	r4, r3
 8005098:	edd4 4a00 	vldr	s9, [r4]
 800509c:	ed97 7a01 	vldr	s14, [r7, #4]
 80050a0:	ed94 3a01 	vldr	s6, [r4, #4]
 80050a4:	9401      	str	r4, [sp, #4]
 80050a6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80050aa:	4630      	mov	r0, r6
 80050ac:	ee35 5a24 	vadd.f32	s10, s10, s9
 80050b0:	463e      	mov	r6, r7
 80050b2:	ee15 ea10 	vmov	lr, s10
 80050b6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80050ba:	f846 eb08 	str.w	lr, [r6], #8
 80050be:	ee37 6a27 	vadd.f32	s12, s14, s15
 80050c2:	ed90 5a01 	vldr	s10, [r0, #4]
 80050c6:	9605      	str	r6, [sp, #20]
 80050c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050cc:	9e01      	ldr	r6, [sp, #4]
 80050ce:	9707      	str	r7, [sp, #28]
 80050d0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80050d4:	ed96 2a01 	vldr	s4, [r6, #4]
 80050d8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80050dc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80050e0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80050e4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80050e8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80050ec:	4604      	mov	r4, r0
 80050ee:	46a3      	mov	fp, r4
 80050f0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80050f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80050f8:	ee14 8a10 	vmov	r8, s8
 80050fc:	46a4      	mov	ip, r4
 80050fe:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005102:	ed87 7a01 	vstr	s14, [r7, #4]
 8005106:	f84b 8b08 	str.w	r8, [fp], #8
 800510a:	f1ac 0704 	sub.w	r7, ip, #4
 800510e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005112:	f101 0c08 	add.w	ip, r1, #8
 8005116:	462c      	mov	r4, r5
 8005118:	f8cd c010 	str.w	ip, [sp, #16]
 800511c:	ee15 ca90 	vmov	ip, s11
 8005120:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005124:	f844 cb08 	str.w	ip, [r4], #8
 8005128:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800512c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005130:	9406      	str	r4, [sp, #24]
 8005132:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005136:	f101 0410 	add.w	r4, r1, #16
 800513a:	0852      	lsrs	r2, r2, #1
 800513c:	9402      	str	r4, [sp, #8]
 800513e:	ed85 6a01 	vstr	s12, [r5, #4]
 8005142:	462c      	mov	r4, r5
 8005144:	f101 0518 	add.w	r5, r1, #24
 8005148:	920b      	str	r2, [sp, #44]	@ 0x2c
 800514a:	46b2      	mov	sl, r6
 800514c:	9503      	str	r5, [sp, #12]
 800514e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005152:	3a02      	subs	r2, #2
 8005154:	ee16 5a90 	vmov	r5, s13
 8005158:	46b6      	mov	lr, r6
 800515a:	4630      	mov	r0, r6
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	f84a 5b08 	str.w	r5, [sl], #8
 8005162:	f1a0 0604 	sub.w	r6, r0, #4
 8005166:	edce 7a01 	vstr	s15, [lr, #4]
 800516a:	9208      	str	r2, [sp, #32]
 800516c:	f000 8130 	beq.w	80053d0 <arm_cfft_radix8by4_f32+0x378>
 8005170:	4691      	mov	r9, r2
 8005172:	9a07      	ldr	r2, [sp, #28]
 8005174:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005178:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800517c:	3b08      	subs	r3, #8
 800517e:	f102 0510 	add.w	r5, r2, #16
 8005182:	f101 0c20 	add.w	ip, r1, #32
 8005186:	f1a4 020c 	sub.w	r2, r4, #12
 800518a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800518e:	4433      	add	r3, r6
 8005190:	3410      	adds	r4, #16
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	ed55 3a02 	vldr	s7, [r5, #-8]
 800519a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800519e:	ed91 7a00 	vldr	s14, [r1]
 80051a2:	edd0 7a00 	vldr	s15, [r0]
 80051a6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80051aa:	ed15 4a01 	vldr	s8, [r5, #-4]
 80051ae:	edd0 6a01 	vldr	s13, [r0, #4]
 80051b2:	ed91 6a01 	vldr	s12, [r1, #4]
 80051b6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80051ba:	ee34 0a25 	vadd.f32	s0, s8, s11
 80051be:	ee78 4a07 	vadd.f32	s9, s16, s14
 80051c2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80051c6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80051ca:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80051ce:	ed45 4a02 	vstr	s9, [r5, #-8]
 80051d2:	edd1 4a01 	vldr	s9, [r1, #4]
 80051d6:	ed90 4a01 	vldr	s8, [r0, #4]
 80051da:	ee70 4a24 	vadd.f32	s9, s0, s9
 80051de:	ee75 aa06 	vadd.f32	s21, s10, s12
 80051e2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80051e6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80051ea:	ed45 4a01 	vstr	s9, [r5, #-4]
 80051ee:	edd6 1a00 	vldr	s3, [r6]
 80051f2:	edd7 0a00 	vldr	s1, [r7]
 80051f6:	ed92 4a02 	vldr	s8, [r2, #8]
 80051fa:	edd3 3a02 	vldr	s7, [r3, #8]
 80051fe:	ed93 2a01 	vldr	s4, [r3, #4]
 8005202:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005206:	edd2 2a01 	vldr	s5, [r2, #4]
 800520a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800520e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005212:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005216:	ee74 8a84 	vadd.f32	s17, s9, s8
 800521a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800521e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8005222:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005226:	ee18 aa90 	vmov	sl, s17
 800522a:	f847 a908 	str.w	sl, [r7], #-8
 800522e:	edd2 8a01 	vldr	s17, [r2, #4]
 8005232:	ed93 9a01 	vldr	s18, [r3, #4]
 8005236:	ee73 8a28 	vadd.f32	s17, s6, s17
 800523a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800523e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005242:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005246:	edc7 8a01 	vstr	s17, [r7, #4]
 800524a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800524e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005252:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005256:	ee6a ba28 	vmul.f32	s23, s20, s17
 800525a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800525e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005262:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005266:	ee79 9a82 	vadd.f32	s19, s19, s4
 800526a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800526e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005272:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005276:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800527a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800527e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005282:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005286:	ee1c aa10 	vmov	sl, s24
 800528a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800528e:	f841 ab08 	str.w	sl, [r1], #8
 8005292:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005296:	ee3b bacb 	vsub.f32	s22, s23, s22
 800529a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800529e:	ee33 3a62 	vsub.f32	s6, s6, s5
 80052a2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80052a6:	edc2 8a01 	vstr	s17, [r2, #4]
 80052aa:	ed82 ba02 	vstr	s22, [r2, #8]
 80052ae:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80052b2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80052b6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80052ba:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80052be:	ee30 0a46 	vsub.f32	s0, s0, s12
 80052c2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80052c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80052ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80052ce:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80052d2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80052d6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80052da:	ee60 9a04 	vmul.f32	s19, s0, s8
 80052de:	ee28 8a04 	vmul.f32	s16, s16, s8
 80052e2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80052e6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80052ea:	ee39 4a68 	vsub.f32	s8, s18, s17
 80052ee:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80052f2:	ee14 aa10 	vmov	sl, s8
 80052f6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80052fa:	ee63 4a24 	vmul.f32	s9, s6, s9
 80052fe:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005302:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005306:	ed04 0a01 	vstr	s0, [r4, #-4]
 800530a:	f846 a908 	str.w	sl, [r6], #-8
 800530e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005312:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005316:	edc6 3a01 	vstr	s7, [r6, #4]
 800531a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800531e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005322:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8005326:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800532a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800532e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005332:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005336:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800533a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800533e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005342:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005346:	ee66 6a86 	vmul.f32	s13, s13, s12
 800534a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800534e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005352:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005356:	ee21 1a07 	vmul.f32	s2, s2, s14
 800535a:	ee15 aa90 	vmov	sl, s11
 800535e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005362:	f840 ab08 	str.w	sl, [r0], #8
 8005366:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800536a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800536e:	f1b9 0901 	subs.w	r9, r9, #1
 8005372:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005376:	f105 0508 	add.w	r5, r5, #8
 800537a:	ed83 1a02 	vstr	s2, [r3, #8]
 800537e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005382:	f108 0808 	add.w	r8, r8, #8
 8005386:	f1a2 0208 	sub.w	r2, r2, #8
 800538a:	f10c 0c10 	add.w	ip, ip, #16
 800538e:	f104 0408 	add.w	r4, r4, #8
 8005392:	f10e 0e18 	add.w	lr, lr, #24
 8005396:	f1a3 0308 	sub.w	r3, r3, #8
 800539a:	f47f aefc 	bne.w	8005196 <arm_cfft_radix8by4_f32+0x13e>
 800539e:	9908      	ldr	r1, [sp, #32]
 80053a0:	9802      	ldr	r0, [sp, #8]
 80053a2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80053a6:	00cb      	lsls	r3, r1, #3
 80053a8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80053ac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80053b0:	9102      	str	r1, [sp, #8]
 80053b2:	9905      	ldr	r1, [sp, #20]
 80053b4:	4419      	add	r1, r3
 80053b6:	9105      	str	r1, [sp, #20]
 80053b8:	9904      	ldr	r1, [sp, #16]
 80053ba:	4419      	add	r1, r3
 80053bc:	9104      	str	r1, [sp, #16]
 80053be:	9906      	ldr	r1, [sp, #24]
 80053c0:	449b      	add	fp, r3
 80053c2:	4419      	add	r1, r3
 80053c4:	449a      	add	sl, r3
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	9106      	str	r1, [sp, #24]
 80053ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	9a05      	ldr	r2, [sp, #20]
 80053d2:	9806      	ldr	r0, [sp, #24]
 80053d4:	ed92 4a00 	vldr	s8, [r2]
 80053d8:	ed90 7a00 	vldr	s14, [r0]
 80053dc:	ed9b 3a00 	vldr	s6, [fp]
 80053e0:	edda 3a00 	vldr	s7, [sl]
 80053e4:	edd2 4a01 	vldr	s9, [r2, #4]
 80053e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80053ec:	ed9a 2a01 	vldr	s4, [sl, #4]
 80053f0:	eddb 7a01 	vldr	s15, [fp, #4]
 80053f4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80053f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fa:	ee34 6a07 	vadd.f32	s12, s8, s14
 80053fe:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8005402:	ee36 5a03 	vadd.f32	s10, s12, s6
 8005406:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800540a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800540e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8005412:	ed82 5a00 	vstr	s10, [r2]
 8005416:	ed9b 5a01 	vldr	s10, [fp, #4]
 800541a:	edda 4a01 	vldr	s9, [sl, #4]
 800541e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005422:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005426:	ee35 5a24 	vadd.f32	s10, s10, s9
 800542a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800542e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005432:	9a04      	ldr	r2, [sp, #16]
 8005434:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005438:	edd2 1a00 	vldr	s3, [r2]
 800543c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005440:	9a02      	ldr	r2, [sp, #8]
 8005442:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005446:	ee36 6a43 	vsub.f32	s12, s12, s6
 800544a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800544e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005452:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005456:	ee25 5a21 	vmul.f32	s10, s10, s3
 800545a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800545e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005462:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005466:	edcb 2a00 	vstr	s5, [fp]
 800546a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800546e:	ed92 4a01 	vldr	s8, [r2, #4]
 8005472:	ed92 5a00 	vldr	s10, [r2]
 8005476:	9a03      	ldr	r2, [sp, #12]
 8005478:	ee36 6a63 	vsub.f32	s12, s12, s7
 800547c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005480:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005484:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005488:	ee26 6a04 	vmul.f32	s12, s12, s8
 800548c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005490:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005494:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005498:	ee76 6a83 	vadd.f32	s13, s13, s6
 800549c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054a0:	ed80 6a01 	vstr	s12, [r0, #4]
 80054a4:	edc0 5a00 	vstr	s11, [r0]
 80054a8:	edd2 5a01 	vldr	s11, [r2, #4]
 80054ac:	9807      	ldr	r0, [sp, #28]
 80054ae:	ee77 7a02 	vadd.f32	s15, s14, s4
 80054b2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80054b6:	edd2 6a00 	vldr	s13, [r2]
 80054ba:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80054be:	ee67 6a26 	vmul.f32	s13, s14, s13
 80054c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80054ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054ce:	ee36 7a07 	vadd.f32	s14, s12, s14
 80054d2:	edca 7a01 	vstr	s15, [sl, #4]
 80054d6:	ed8a 7a00 	vstr	s14, [sl]
 80054da:	6872      	ldr	r2, [r6, #4]
 80054dc:	4621      	mov	r1, r4
 80054de:	2304      	movs	r3, #4
 80054e0:	f000 f892 	bl	8005608 <arm_radix8_butterfly_f32>
 80054e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054e6:	6872      	ldr	r2, [r6, #4]
 80054e8:	4621      	mov	r1, r4
 80054ea:	2304      	movs	r3, #4
 80054ec:	f000 f88c 	bl	8005608 <arm_radix8_butterfly_f32>
 80054f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80054f2:	6872      	ldr	r2, [r6, #4]
 80054f4:	4621      	mov	r1, r4
 80054f6:	2304      	movs	r3, #4
 80054f8:	f000 f886 	bl	8005608 <arm_radix8_butterfly_f32>
 80054fc:	6872      	ldr	r2, [r6, #4]
 80054fe:	9801      	ldr	r0, [sp, #4]
 8005500:	4621      	mov	r1, r4
 8005502:	2304      	movs	r3, #4
 8005504:	b00f      	add	sp, #60	@ 0x3c
 8005506:	ecbd 8b0a 	vpop	{d8-d12}
 800550a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550e:	f000 b87b 	b.w	8005608 <arm_radix8_butterfly_f32>
 8005512:	bf00      	nop

08005514 <arm_cfft_f32>:
 8005514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005518:	2a01      	cmp	r2, #1
 800551a:	4606      	mov	r6, r0
 800551c:	4617      	mov	r7, r2
 800551e:	460c      	mov	r4, r1
 8005520:	4698      	mov	r8, r3
 8005522:	8805      	ldrh	r5, [r0, #0]
 8005524:	d054      	beq.n	80055d0 <arm_cfft_f32+0xbc>
 8005526:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800552a:	d04c      	beq.n	80055c6 <arm_cfft_f32+0xb2>
 800552c:	d916      	bls.n	800555c <arm_cfft_f32+0x48>
 800552e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005532:	d01a      	beq.n	800556a <arm_cfft_f32+0x56>
 8005534:	d95c      	bls.n	80055f0 <arm_cfft_f32+0xdc>
 8005536:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800553a:	d044      	beq.n	80055c6 <arm_cfft_f32+0xb2>
 800553c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005540:	d105      	bne.n	800554e <arm_cfft_f32+0x3a>
 8005542:	2301      	movs	r3, #1
 8005544:	6872      	ldr	r2, [r6, #4]
 8005546:	4629      	mov	r1, r5
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f85d 	bl	8005608 <arm_radix8_butterfly_f32>
 800554e:	f1b8 0f00 	cmp.w	r8, #0
 8005552:	d111      	bne.n	8005578 <arm_cfft_f32+0x64>
 8005554:	2f01      	cmp	r7, #1
 8005556:	d016      	beq.n	8005586 <arm_cfft_f32+0x72>
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	2d20      	cmp	r5, #32
 800555e:	d032      	beq.n	80055c6 <arm_cfft_f32+0xb2>
 8005560:	d94a      	bls.n	80055f8 <arm_cfft_f32+0xe4>
 8005562:	2d40      	cmp	r5, #64	@ 0x40
 8005564:	d0ed      	beq.n	8005542 <arm_cfft_f32+0x2e>
 8005566:	2d80      	cmp	r5, #128	@ 0x80
 8005568:	d1f1      	bne.n	800554e <arm_cfft_f32+0x3a>
 800556a:	4621      	mov	r1, r4
 800556c:	4630      	mov	r0, r6
 800556e:	f7ff fca3 	bl	8004eb8 <arm_cfft_radix8by2_f32>
 8005572:	f1b8 0f00 	cmp.w	r8, #0
 8005576:	d0ed      	beq.n	8005554 <arm_cfft_f32+0x40>
 8005578:	68b2      	ldr	r2, [r6, #8]
 800557a:	89b1      	ldrh	r1, [r6, #12]
 800557c:	4620      	mov	r0, r4
 800557e:	f7fa fe2b 	bl	80001d8 <arm_bitreversal_32>
 8005582:	2f01      	cmp	r7, #1
 8005584:	d1e8      	bne.n	8005558 <arm_cfft_f32+0x44>
 8005586:	ee07 5a90 	vmov	s15, r5
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005592:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005596:	2d00      	cmp	r5, #0
 8005598:	d0de      	beq.n	8005558 <arm_cfft_f32+0x44>
 800559a:	f104 0108 	add.w	r1, r4, #8
 800559e:	2300      	movs	r3, #0
 80055a0:	3301      	adds	r3, #1
 80055a2:	429d      	cmp	r5, r3
 80055a4:	f101 0108 	add.w	r1, r1, #8
 80055a8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80055ac:	ed51 7a03 	vldr	s15, [r1, #-12]
 80055b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80055b8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80055bc:	ed41 7a03 	vstr	s15, [r1, #-12]
 80055c0:	d1ee      	bne.n	80055a0 <arm_cfft_f32+0x8c>
 80055c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c6:	4621      	mov	r1, r4
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff fd45 	bl	8005058 <arm_cfft_radix8by4_f32>
 80055ce:	e7be      	b.n	800554e <arm_cfft_f32+0x3a>
 80055d0:	b1ad      	cbz	r5, 80055fe <arm_cfft_f32+0xea>
 80055d2:	f101 030c 	add.w	r3, r1, #12
 80055d6:	2200      	movs	r2, #0
 80055d8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80055dc:	3201      	adds	r2, #1
 80055de:	eef1 7a67 	vneg.f32	s15, s15
 80055e2:	4295      	cmp	r5, r2
 80055e4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80055e8:	f103 0308 	add.w	r3, r3, #8
 80055ec:	d1f4      	bne.n	80055d8 <arm_cfft_f32+0xc4>
 80055ee:	e79a      	b.n	8005526 <arm_cfft_f32+0x12>
 80055f0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80055f4:	d0a5      	beq.n	8005542 <arm_cfft_f32+0x2e>
 80055f6:	e7aa      	b.n	800554e <arm_cfft_f32+0x3a>
 80055f8:	2d10      	cmp	r5, #16
 80055fa:	d0b6      	beq.n	800556a <arm_cfft_f32+0x56>
 80055fc:	e7a7      	b.n	800554e <arm_cfft_f32+0x3a>
 80055fe:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005602:	d894      	bhi.n	800552e <arm_cfft_f32+0x1a>
 8005604:	e7aa      	b.n	800555c <arm_cfft_f32+0x48>
 8005606:	bf00      	nop

08005608 <arm_radix8_butterfly_f32>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	ed2d 8b10 	vpush	{d8-d15}
 8005610:	461c      	mov	r4, r3
 8005612:	b09d      	sub	sp, #116	@ 0x74
 8005614:	4603      	mov	r3, r0
 8005616:	3304      	adds	r3, #4
 8005618:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800592c <arm_radix8_butterfly_f32+0x324>
 800561c:	9019      	str	r0, [sp, #100]	@ 0x64
 800561e:	921a      	str	r2, [sp, #104]	@ 0x68
 8005620:	468b      	mov	fp, r1
 8005622:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005624:	468a      	mov	sl, r1
 8005626:	46a1      	mov	r9, r4
 8005628:	4607      	mov	r7, r0
 800562a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800562e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005632:	eb03 0508 	add.w	r5, r3, r8
 8005636:	195c      	adds	r4, r3, r5
 8005638:	00de      	lsls	r6, r3, #3
 800563a:	191a      	adds	r2, r3, r4
 800563c:	9600      	str	r6, [sp, #0]
 800563e:	1898      	adds	r0, r3, r2
 8005640:	4619      	mov	r1, r3
 8005642:	9e00      	ldr	r6, [sp, #0]
 8005644:	9311      	str	r3, [sp, #68]	@ 0x44
 8005646:	4401      	add	r1, r0
 8005648:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800564c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005650:	19be      	adds	r6, r7, r6
 8005652:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005656:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800565a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800565e:	9f00      	ldr	r7, [sp, #0]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	eb06 0e07 	add.w	lr, r6, r7
 8005666:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	3204      	adds	r2, #4
 800566c:	3104      	adds	r1, #4
 800566e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005672:	f04f 0c00 	mov.w	ip, #0
 8005676:	edde 7a00 	vldr	s15, [lr]
 800567a:	edd6 6a00 	vldr	s13, [r6]
 800567e:	ed95 2a00 	vldr	s4, [r5]
 8005682:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005686:	edd4 4a00 	vldr	s9, [r4]
 800568a:	ed90 5a00 	vldr	s10, [r0]
 800568e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005692:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005696:	ee77 8a85 	vadd.f32	s17, s15, s10
 800569a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800569e:	ee32 4a20 	vadd.f32	s8, s4, s1
 80056a2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80056a6:	ee33 6a84 	vadd.f32	s12, s7, s8
 80056aa:	ee73 5a28 	vadd.f32	s11, s6, s17
 80056ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80056b2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80056b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80056ba:	ed47 6a01 	vstr	s13, [r7, #-4]
 80056be:	edc4 5a00 	vstr	s11, [r4]
 80056c2:	ed92 9a00 	vldr	s18, [r2]
 80056c6:	ed95 1a01 	vldr	s2, [r5, #4]
 80056ca:	edd6 5a01 	vldr	s11, [r6, #4]
 80056ce:	ed91 6a00 	vldr	s12, [r1]
 80056d2:	edd7 2a00 	vldr	s5, [r7]
 80056d6:	edd4 1a01 	vldr	s3, [r4, #4]
 80056da:	edde 6a01 	vldr	s13, [lr, #4]
 80056de:	edd0 9a01 	vldr	s19, [r0, #4]
 80056e2:	ee72 0a60 	vsub.f32	s1, s4, s1
 80056e6:	ee71 aa46 	vsub.f32	s21, s2, s12
 80056ea:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80056ee:	ee37 0a60 	vsub.f32	s0, s14, s1
 80056f2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80056f6:	ee37 7a20 	vadd.f32	s14, s14, s1
 80056fa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80056fe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005702:	ee75 5a89 	vadd.f32	s11, s11, s18
 8005706:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800570a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800570e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005712:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005716:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800571a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800571e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8005722:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005726:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800572a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800572e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005732:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005736:	ee75 8a86 	vadd.f32	s17, s11, s12
 800573a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800573e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005742:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8005746:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800574a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800574e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8005752:	ee71 5a49 	vsub.f32	s11, s2, s18
 8005756:	ee31 2a09 	vadd.f32	s4, s2, s18
 800575a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800575e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8005762:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005766:	ee73 0a06 	vadd.f32	s1, s6, s12
 800576a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800576e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005772:	ee32 8a28 	vadd.f32	s16, s4, s17
 8005776:	ee33 6a46 	vsub.f32	s12, s6, s12
 800577a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800577e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005782:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005786:	ee71 5a64 	vsub.f32	s11, s2, s9
 800578a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800578e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005792:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005796:	ee74 4a81 	vadd.f32	s9, s9, s2
 800579a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800579e:	44dc      	add	ip, fp
 80057a0:	45e2      	cmp	sl, ip
 80057a2:	ed87 8a00 	vstr	s16, [r7]
 80057a6:	ed84 2a01 	vstr	s4, [r4, #4]
 80057aa:	441f      	add	r7, r3
 80057ac:	edce 0a00 	vstr	s1, [lr]
 80057b0:	441c      	add	r4, r3
 80057b2:	ed80 6a00 	vstr	s12, [r0]
 80057b6:	edce 1a01 	vstr	s3, [lr, #4]
 80057ba:	ed80 4a01 	vstr	s8, [r0, #4]
 80057be:	449e      	add	lr, r3
 80057c0:	ed86 3a00 	vstr	s6, [r6]
 80057c4:	4418      	add	r0, r3
 80057c6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80057ca:	ed02 5a01 	vstr	s10, [r2, #-4]
 80057ce:	ed85 7a00 	vstr	s14, [r5]
 80057d2:	edc6 5a01 	vstr	s11, [r6, #4]
 80057d6:	edc1 4a00 	vstr	s9, [r1]
 80057da:	441e      	add	r6, r3
 80057dc:	edc2 6a00 	vstr	s13, [r2]
 80057e0:	4419      	add	r1, r3
 80057e2:	edc5 7a01 	vstr	s15, [r5, #4]
 80057e6:	441a      	add	r2, r3
 80057e8:	441d      	add	r5, r3
 80057ea:	f63f af44 	bhi.w	8005676 <arm_radix8_butterfly_f32+0x6e>
 80057ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80057f0:	2a07      	cmp	r2, #7
 80057f2:	f240 81f5 	bls.w	8005be0 <arm_radix8_butterfly_f32+0x5d8>
 80057f6:	f108 0101 	add.w	r1, r8, #1
 80057fa:	188f      	adds	r7, r1, r2
 80057fc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8005800:	19d6      	adds	r6, r2, r7
 8005802:	eb08 0c09 	add.w	ip, r8, r9
 8005806:	1994      	adds	r4, r2, r6
 8005808:	eb0c 0e09 	add.w	lr, ip, r9
 800580c:	4610      	mov	r0, r2
 800580e:	9701      	str	r7, [sp, #4]
 8005810:	4420      	add	r0, r4
 8005812:	eb0e 0709 	add.w	r7, lr, r9
 8005816:	1815      	adds	r5, r2, r0
 8005818:	eb07 0209 	add.w	r2, r7, r9
 800581c:	9203      	str	r2, [sp, #12]
 800581e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005824:	9117      	str	r1, [sp, #92]	@ 0x5c
 8005826:	440a      	add	r2, r1
 8005828:	9900      	ldr	r1, [sp, #0]
 800582a:	3108      	adds	r1, #8
 800582c:	9100      	str	r1, [sp, #0]
 800582e:	9902      	ldr	r1, [sp, #8]
 8005830:	3108      	adds	r1, #8
 8005832:	9102      	str	r1, [sp, #8]
 8005834:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005836:	00ff      	lsls	r7, r7, #3
 8005838:	9715      	str	r7, [sp, #84]	@ 0x54
 800583a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800583e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005842:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8005846:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8005848:	9903      	ldr	r1, [sp, #12]
 800584a:	19d7      	adds	r7, r2, r7
 800584c:	00c9      	lsls	r1, r1, #3
 800584e:	9114      	str	r1, [sp, #80]	@ 0x50
 8005850:	9710      	str	r7, [sp, #64]	@ 0x40
 8005852:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005854:	9f00      	ldr	r7, [sp, #0]
 8005856:	19cf      	adds	r7, r1, r7
 8005858:	970d      	str	r7, [sp, #52]	@ 0x34
 800585a:	9f02      	ldr	r7, [sp, #8]
 800585c:	19cf      	adds	r7, r1, r7
 800585e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8005862:	970c      	str	r7, [sp, #48]	@ 0x30
 8005864:	9f01      	ldr	r7, [sp, #4]
 8005866:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800586a:	3504      	adds	r5, #4
 800586c:	3004      	adds	r0, #4
 800586e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8005872:	9508      	str	r5, [sp, #32]
 8005874:	9009      	str	r0, [sp, #36]	@ 0x24
 8005876:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8005878:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800587a:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800587e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005882:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8005886:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005888:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 800588c:	1945      	adds	r5, r0, r5
 800588e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005892:	460f      	mov	r7, r1
 8005894:	3404      	adds	r4, #4
 8005896:	4641      	mov	r1, r8
 8005898:	1841      	adds	r1, r0, r1
 800589a:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 800589e:	940a      	str	r4, [sp, #40]	@ 0x28
 80058a0:	eb00 0c06 	add.w	ip, r0, r6
 80058a4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80058a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80058aa:	9506      	str	r5, [sp, #24]
 80058ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80058ae:	9105      	str	r1, [sp, #20]
 80058b0:	4639      	mov	r1, r7
 80058b2:	1905      	adds	r5, r0, r4
 80058b4:	3108      	adds	r1, #8
 80058b6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80058b8:	9507      	str	r5, [sp, #28]
 80058ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 80058bc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80058c0:	2101      	movs	r1, #1
 80058c2:	eb00 0e06 	add.w	lr, r0, r6
 80058c6:	9518      	str	r5, [sp, #96]	@ 0x60
 80058c8:	9404      	str	r4, [sp, #16]
 80058ca:	9103      	str	r1, [sp, #12]
 80058cc:	4620      	mov	r0, r4
 80058ce:	4689      	mov	r9, r1
 80058d0:	9e06      	ldr	r6, [sp, #24]
 80058d2:	ed90 fa00 	vldr	s30, [r0]
 80058d6:	edd6 7a01 	vldr	s15, [r6, #4]
 80058da:	edd0 ba01 	vldr	s23, [r0, #4]
 80058de:	edcd 7a00 	vstr	s15, [sp]
 80058e2:	a80d      	add	r0, sp, #52	@ 0x34
 80058e4:	edde 7a01 	vldr	s15, [lr, #4]
 80058e8:	9c05      	ldr	r4, [sp, #20]
 80058ea:	9d07      	ldr	r5, [sp, #28]
 80058ec:	edd2 fa00 	vldr	s31, [r2]
 80058f0:	ed92 ca01 	vldr	s24, [r2, #4]
 80058f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80058f8:	c807      	ldmia	r0, {r0, r1, r2}
 80058fa:	eddc 7a01 	vldr	s15, [ip, #4]
 80058fe:	edd4 ea00 	vldr	s29, [r4]
 8005902:	ed95 ea00 	vldr	s28, [r5]
 8005906:	edd6 da00 	vldr	s27, [r6]
 800590a:	edd4 aa01 	vldr	s21, [r4, #4]
 800590e:	ed95 aa01 	vldr	s20, [r5, #4]
 8005912:	ed9e da00 	vldr	s26, [lr]
 8005916:	eddc ca00 	vldr	s25, [ip]
 800591a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800591e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8005920:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005922:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005924:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005926:	edcd 7a02 	vstr	s15, [sp, #8]
 800592a:	e001      	b.n	8005930 <arm_radix8_butterfly_f32+0x328>
 800592c:	3f3504f3 	.word	0x3f3504f3
 8005930:	ed16 6a01 	vldr	s12, [r6, #-4]
 8005934:	ed91 5a00 	vldr	s10, [r1]
 8005938:	ed57 9a01 	vldr	s19, [r7, #-4]
 800593c:	edd5 7a00 	vldr	s15, [r5]
 8005940:	ed18 7a01 	vldr	s14, [r8, #-4]
 8005944:	edd2 3a00 	vldr	s7, [r2]
 8005948:	ed94 3a00 	vldr	s6, [r4]
 800594c:	ed90 2a00 	vldr	s4, [r0]
 8005950:	ed92 0a01 	vldr	s0, [r2, #4]
 8005954:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005958:	ee32 1a06 	vadd.f32	s2, s4, s12
 800595c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005960:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005964:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005968:	ee71 6a24 	vadd.f32	s13, s2, s9
 800596c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005970:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005978:	ed82 6a00 	vstr	s12, [r2]
 800597c:	edd5 8a01 	vldr	s17, [r5, #4]
 8005980:	ed90 9a01 	vldr	s18, [r0, #4]
 8005984:	edd6 2a00 	vldr	s5, [r6]
 8005988:	ed98 7a00 	vldr	s14, [r8]
 800598c:	edd4 0a01 	vldr	s1, [r4, #4]
 8005990:	ed91 6a01 	vldr	s12, [r1, #4]
 8005994:	edd7 5a00 	vldr	s11, [r7]
 8005998:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800599c:	ee33 3a69 	vsub.f32	s6, s6, s19
 80059a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80059a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80059a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80059ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 80059b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80059b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80059b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80059bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80059c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80059c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80059c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80059cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80059d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80059d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80059d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80059dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80059e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80059e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80059e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80059ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80059f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80059f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80059f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80059fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005a00:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005a04:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005a08:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005a0c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005a10:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005a14:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005a18:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005a1c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005a20:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005a24:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005a28:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005a2c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005a30:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005a34:	ee74 4a82 	vadd.f32	s9, s9, s4
 8005a38:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005a3c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005a40:	ee30 0a80 	vadd.f32	s0, s1, s0
 8005a44:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005a48:	ee33 6a06 	vadd.f32	s12, s6, s12
 8005a4c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005a50:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005a54:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005a58:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005a5c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005a60:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005a64:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005a68:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005a6c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005a70:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005a74:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005a78:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005a7c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005a80:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005a84:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005a88:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005a8c:	ed82 1a01 	vstr	s2, [r2, #4]
 8005a90:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005a94:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005a98:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005a9c:	ed81 3a00 	vstr	s6, [r1]
 8005aa0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005aa4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005aa8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005aac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005ab0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005ab4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005ab8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005abc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005ac0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005ac4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005ac8:	ed9d 4a00 	vldr	s8, [sp]
 8005acc:	edc1 6a01 	vstr	s13, [r1, #4]
 8005ad0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005ad4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005ad8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005adc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005ae0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005ae4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ae8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005aec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005af0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005af4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005af8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005afc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005b00:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005b04:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005b08:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005b0c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005b10:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b14:	44d9      	add	r9, fp
 8005b16:	45ca      	cmp	sl, r9
 8005b18:	ed84 9a00 	vstr	s18, [r4]
 8005b1c:	edc4 3a01 	vstr	s7, [r4, #4]
 8005b20:	441a      	add	r2, r3
 8005b22:	ed07 7a01 	vstr	s14, [r7, #-4]
 8005b26:	edc7 2a00 	vstr	s5, [r7]
 8005b2a:	4419      	add	r1, r3
 8005b2c:	ed80 2a00 	vstr	s4, [r0]
 8005b30:	ed80 8a01 	vstr	s16, [r0, #4]
 8005b34:	441c      	add	r4, r3
 8005b36:	ed48 1a01 	vstr	s3, [r8, #-4]
 8005b3a:	ed88 0a00 	vstr	s0, [r8]
 8005b3e:	441f      	add	r7, r3
 8005b40:	ed46 4a01 	vstr	s9, [r6, #-4]
 8005b44:	4418      	add	r0, r3
 8005b46:	edc6 9a00 	vstr	s19, [r6]
 8005b4a:	4498      	add	r8, r3
 8005b4c:	edc5 0a00 	vstr	s1, [r5]
 8005b50:	ed85 6a01 	vstr	s12, [r5, #4]
 8005b54:	441e      	add	r6, r3
 8005b56:	441d      	add	r5, r3
 8005b58:	f63f aeea 	bhi.w	8005930 <arm_radix8_butterfly_f32+0x328>
 8005b5c:	9a03      	ldr	r2, [sp, #12]
 8005b5e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005b60:	3201      	adds	r2, #1
 8005b62:	4611      	mov	r1, r2
 8005b64:	9203      	str	r2, [sp, #12]
 8005b66:	9a04      	ldr	r2, [sp, #16]
 8005b68:	4402      	add	r2, r0
 8005b6a:	9204      	str	r2, [sp, #16]
 8005b6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005b6e:	9a05      	ldr	r2, [sp, #20]
 8005b70:	4402      	add	r2, r0
 8005b72:	9205      	str	r2, [sp, #20]
 8005b74:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005b76:	9a07      	ldr	r2, [sp, #28]
 8005b78:	4402      	add	r2, r0
 8005b7a:	9207      	str	r2, [sp, #28]
 8005b7c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005b7e:	9a06      	ldr	r2, [sp, #24]
 8005b80:	4402      	add	r2, r0
 8005b82:	9206      	str	r2, [sp, #24]
 8005b84:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b86:	4496      	add	lr, r2
 8005b88:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005b8a:	4494      	add	ip, r2
 8005b8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b8e:	3208      	adds	r2, #8
 8005b90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b94:	3208      	adds	r2, #8
 8005b96:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b9a:	3208      	adds	r2, #8
 8005b9c:	920d      	str	r2, [sp, #52]	@ 0x34
 8005b9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ba4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ba6:	3208      	adds	r2, #8
 8005ba8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bac:	3208      	adds	r2, #8
 8005bae:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb2:	3208      	adds	r2, #8
 8005bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bb6:	9a08      	ldr	r2, [sp, #32]
 8005bb8:	3208      	adds	r2, #8
 8005bba:	9208      	str	r2, [sp, #32]
 8005bbc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005bbe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005bc0:	4288      	cmp	r0, r1
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	d007      	beq.n	8005bd6 <arm_radix8_butterfly_f32+0x5ce>
 8005bc6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005bc8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4401      	add	r1, r0
 8005bd0:	9110      	str	r1, [sp, #64]	@ 0x40
 8005bd2:	9804      	ldr	r0, [sp, #16]
 8005bd4:	e67c      	b.n	80058d0 <arm_radix8_butterfly_f32+0x2c8>
 8005bd6:	4683      	mov	fp, r0
 8005bd8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8005bdc:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8005bde:	e524      	b.n	800562a <arm_radix8_butterfly_f32+0x22>
 8005be0:	b01d      	add	sp, #116	@ 0x74
 8005be2:	ecbd 8b10 	vpop	{d8-d15}
 8005be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bea:	bf00      	nop

08005bec <memset>:
 8005bec:	4402      	add	r2, r0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <__libc_init_array>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8005c34 <__libc_init_array+0x38>)
 8005c00:	4c0d      	ldr	r4, [pc, #52]	@ (8005c38 <__libc_init_array+0x3c>)
 8005c02:	1b64      	subs	r4, r4, r5
 8005c04:	10a4      	asrs	r4, r4, #2
 8005c06:	2600      	movs	r6, #0
 8005c08:	42a6      	cmp	r6, r4
 8005c0a:	d109      	bne.n	8005c20 <__libc_init_array+0x24>
 8005c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c3c <__libc_init_array+0x40>)
 8005c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c40 <__libc_init_array+0x44>)
 8005c10:	f000 f818 	bl	8005c44 <_init>
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	2600      	movs	r6, #0
 8005c1a:	42a6      	cmp	r6, r4
 8005c1c:	d105      	bne.n	8005c2a <__libc_init_array+0x2e>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c24:	4798      	blx	r3
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7ee      	b.n	8005c08 <__libc_init_array+0xc>
 8005c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c2e:	4798      	blx	r3
 8005c30:	3601      	adds	r6, #1
 8005c32:	e7f2      	b.n	8005c1a <__libc_init_array+0x1e>
 8005c34:	08019150 	.word	0x08019150
 8005c38:	08019150 	.word	0x08019150
 8005c3c:	08019150 	.word	0x08019150
 8005c40:	08019154 	.word	0x08019154

08005c44 <_init>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr

08005c50 <_fini>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	bf00      	nop
 8005c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c56:	bc08      	pop	{r3}
 8005c58:	469e      	mov	lr, r3
 8005c5a:	4770      	bx	lr
